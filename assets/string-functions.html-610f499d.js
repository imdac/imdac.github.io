import{_ as o,M as i,p,q as r,R as n,t as s,N as e,a3 as t}from"./framework-dd056dd6.js";const l={},c=n("h1",{id:"php-string-functions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-string-functions","aria-hidden":"true"},"#"),s(" PHP String Functions")],-1),u={class:"watch"},d={href:"https://www.linkedin.com/learning/php-essential-training-2/string-functions",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.php.net/manual/en/ref.strings.php",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.php.net/",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"strtolower-function",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#strtolower-function","aria-hidden":"true"},"#"),s(" strtolower() Function")],-1),b={href:"https://www.php.net/manual/en/function.strtolower.php",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"strtolower()",-1),m=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;The quick brown fox&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot; jumped over the lazy dog.&quot;</span><span class="token punctuation">;</span>

  <span class="token variable">$third</span> <span class="token operator">=</span> <span class="token variable">$first</span><span class="token punctuation">;</span>
  <span class="token variable">$third</span> <span class="token operator">.=</span> <span class="token variable">$second</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$third</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="strtoupper-function" tabindex="-1"><a class="header-anchor" href="#strtoupper-function" aria-hidden="true">#</a> strtoupper() Function</h2>`,2),f={href:"https://www.php.net/manual/en/function.strtoupper.php",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"strtoupper()",-1),w=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;The quick brown fox&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot; jumped over the lazy dog.&quot;</span><span class="token punctuation">;</span>

  <span class="token variable">$third</span> <span class="token operator">=</span> <span class="token variable">$first</span><span class="token punctuation">;</span>
  <span class="token variable">$third</span> <span class="token operator">.=</span> <span class="token variable">$second</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$third</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ucfirst-function" tabindex="-1"><a class="header-anchor" href="#ucfirst-function" aria-hidden="true">#</a> ucfirst() Function</h2>`,2),q={href:"https://www.php.net/manual/en/function.ucfirst.php",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"ucfirst()",-1),T=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;The quick brown fox&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot; jumped over the lazy dog.&quot;</span><span class="token punctuation">;</span>

  <span class="token variable">$third</span> <span class="token operator">=</span> <span class="token variable">$first</span><span class="token punctuation">;</span>
  <span class="token variable">$third</span> <span class="token operator">.=</span> <span class="token variable">$second</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token variable">$third</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ucwords-function" tabindex="-1"><a class="header-anchor" href="#ucwords-function" aria-hidden="true">#</a> ucwords() Function</h2>`,2),x={href:"https://www.php.net/manual/en/function.ucfirst.php",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"ucwords()",-1),F=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;The quick brown fox&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot; jumped over the lazy dog.&quot;</span><span class="token punctuation">;</span>

  <span class="token variable">$third</span> <span class="token operator">=</span> <span class="token variable">$first</span><span class="token punctuation">;</span>
  <span class="token variable">$third</span> <span class="token operator">.=</span> <span class="token variable">$second</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token function">ucwords</span><span class="token punctuation">(</span><span class="token variable">$third</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="strlen-function" tabindex="-1"><a class="header-anchor" href="#strlen-function" aria-hidden="true">#</a> strlen() Function</h2>`,2),j={href:"https://www.php.net/manual/en/function.strlen.php",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"strlen()",-1),z=n("code",null,"0",-1),N=t(`<div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The <code>strlen()</code> returns the number of bytes <strong>NOT</strong> the number of characters in a string. While usually the same, they can be different.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;The quick brown fox&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot; jumped over the lazy dog.&quot;</span><span class="token punctuation">;</span>

  <span class="token variable">$third</span> <span class="token operator">=</span> <span class="token variable">$first</span><span class="token punctuation">;</span>
  <span class="token variable">$third</span> <span class="token operator">.=</span> <span class="token variable">$second</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$third</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="trim-function" tabindex="-1"><a class="header-anchor" href="#trim-function" aria-hidden="true">#</a> trim() Function</h2>`,3),A={href:"https://www.php.net/manual/en/function.trim.php",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"trim()",-1),P=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;A&quot;</span> <span class="token operator">.</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;  B C D  &quot;</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;E&quot;</span><span class="token punctuation">;</span> 
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="strstr-function" tabindex="-1"><a class="header-anchor" href="#strstr-function" aria-hidden="true">#</a> strstr() Function</h2>`,2),S={href:"https://www.php.net/manual/en/function.strstr.php",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"strstr()",-1),I=n("strong",null,"haystack",-1),O=n("strong",null,"needle",-1),V=n("code",null,"FALSE",-1),H=t(`<p>By default, the <code>strstr()</code> function will return a string from the first occurrence of the <strong>needle</strong> to the end of the <strong>haystack</strong>. If the third parameter is set to <code>TRUE</code>, the function will return a string from the being of the <strong>haystack</strong> to the first occurrence of the <strong>needle</strong>. The function will return <code>FALSE</code> if the <strong>needle</strong> is not found.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The <code>strstr()</code> function and the <code>strchar()</code> function are the same, as one is an alias of the other.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;The quick brown fox&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot; jumped over the lazy dog.&quot;</span><span class="token punctuation">;</span>

  <span class="token variable">$third</span> <span class="token operator">=</span> <span class="token variable">$first</span><span class="token punctuation">;</span>
  <span class="token variable">$third</span> <span class="token operator">.=</span> <span class="token variable">$second</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$third</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;brown&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="str-replace-function" tabindex="-1"><a class="header-anchor" href="#str-replace-function" aria-hidden="true">#</a> str_replace() Function</h2>`,4),C={href:"https://www.php.net/manual/en/function.str-replace.php",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"str_replace()",-1),W=n("strong",null,"search",-1),D=n("strong",null,"subject",-1),M=n("strong",null,"replacement",-1),U=n("strong",null,"search",-1),G=n("strong",null,"replacement",-1),J=n("strong",null,"subject",-1),K=t(`<p>The function returns a string containing the <strong>replacement</strong> strings instead of the <strong>search</strong> string.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;The quick brown fox&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot; jumped over the lazy dog.&quot;</span><span class="token punctuation">;</span>

  <span class="token variable">$third</span> <span class="token operator">=</span> <span class="token variable">$first</span><span class="token punctuation">;</span>
  <span class="token variable">$third</span> <span class="token operator">.=</span> <span class="token variable">$second</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;quick&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;super-fast&quot;</span><span class="token punctuation">,</span> <span class="token variable">$third</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="str-repeat-function" tabindex="-1"><a class="header-anchor" href="#str-repeat-function" aria-hidden="true">#</a> str_repeat() Function</h2>`,3),Q={href:"https://www.php.net/manual/en/function.str-replace.php",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"str_repeat()",-1),Y=n("strong",null,"input",-1),Z=n("strong",null,"multiplier",-1),nn=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;The quick brown fox&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot; jumped over the lazy dog.&quot;</span><span class="token punctuation">;</span>

  <span class="token variable">$third</span> <span class="token operator">=</span> <span class="token variable">$first</span><span class="token punctuation">;</span>
  <span class="token variable">$third</span> <span class="token operator">.=</span> <span class="token variable">$second</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token variable">$third</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="substr-function" tabindex="-1"><a class="header-anchor" href="#substr-function" aria-hidden="true">#</a> substr() Function</h2>`,2),sn={href:"https://www.php.net/manual/en/function.substr.php",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"substr()",-1),en=n("strong",null,"string",-1),tn=n("strong",null,"start",-1),on=n("strong",null,"length",-1),pn=n("strong",null,"string",-1),rn=n("strong",null,"start",-1),ln=n("strong",null,"length",-1),cn=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;The quick brown fox&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot; jumped over the lazy dog.&quot;</span><span class="token punctuation">;</span>

  <span class="token variable">$third</span> <span class="token operator">=</span> <span class="token variable">$first</span><span class="token punctuation">;</span>
  <span class="token variable">$third</span> <span class="token operator">.=</span> <span class="token variable">$second</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$third</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="strpos-function" tabindex="-1"><a class="header-anchor" href="#strpos-function" aria-hidden="true">#</a> strpos() Function</h2>`,2),un={href:"https://www.php.net/manual/en/function.substr.php",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"strpos()",-1),hn=n("strong",null,"haystack",-1),kn=n("strong",null,"needle",-1),vn=n("strong",null,"offset",-1),bn=t(`<p>The <code>strpos()</code> function will return the position (index) of where the <strong>needle</strong> begins as a number. If the <strong>needle</strong> is not found, <code>FALSE</code> will be returned.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>A string first index begins with <code>0</code> not <code>1</code>.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;The quick brown fox&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot; jumped over the lazy dog.&quot;</span><span class="token punctuation">;</span>

  <span class="token variable">$third</span> <span class="token operator">=</span> <span class="token variable">$first</span><span class="token punctuation">;</span>
  <span class="token variable">$third</span> <span class="token operator">.=</span> <span class="token variable">$second</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$third</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;brown&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function gn(mn,fn){const a=i("ExternalLinkIcon");return p(),r("div",null,[c,n("div",u,[n("p",null,[n("a",d,[s('Watch "String Functions" on LinkedIn Learning'),e(a)])])]),n("p",null,[s("PHP has many predefined "),n("a",h,[s("string functions"),e(a)]),s(" that can be used to manipulate strings. The following is a list of string functions provided by PHP. Please refer to "),n("a",k,[s("php.net"),e(a)]),s(" for a full list of string functions.")]),v,n("p",null,[s("The "),n("a",b,[g,e(a)]),s(" function converts all the letter characters of a string to lowercase. The function will take a single string parameter and return a string.")]),m,n("p",null,[s("The "),n("a",f,[_,e(a)]),s(" function converts all the letter characters of a string to uppercase. The function will take a single string parameter and return a string.")]),w,n("p",null,[s("The "),n("a",q,[$,e(a)]),s(" function converts the first character of a string to uppercase. The function will take a single string parameter and return a string.")]),T,n("p",null,[s("The "),n("a",x,[y,e(a)]),s(" function converts the first character of each word in a string to uppercase. The function will take a string parameter and optional delimiters, and it will return a string.")]),F,n("p",null,[s("The "),n("a",j,[E,e(a)]),s(" function returns the length (based on the number of bytes) of a string. The function will return "),z,s(" if the string is empty.")]),N,n("p",null,[s("The "),n("a",A,[L,e(a)]),s(" function removes any whitespace from the beginning and end of the provided string. The function will return the trimmed string.")]),P,n("p",null,[s("The "),n("a",S,[B,e(a)]),s(" function finds the first occurrence of a string within a string. The function requires two parameters a "),I,s(" (the string to search in) and a "),O,s(" (the string to search for). The function also can take an optional third parameter, a boolean, with a default value of "),V,s(".")]),H,n("p",null,[s("The "),n("a",C,[R,e(a)]),s(" function replaces all the occurrences of the "),W,s(" string in the "),D,s(" with the "),M,s(" string. The function requires three parameters, a "),U,s(" string, a "),G,s(" string, the "),J,s(" string. An optional fourth parameter can be provided which will limit the number of replacements that can be made.")]),K,n("p",null,[s("The "),n("a",Q,[X,e(a)]),s(" function returns the provided string repeated the specified number of times. The function takes two arguments the "),Y,s(" string and the number of times to repeat as the "),Z,s(".")]),nn,n("p",null,[s("The "),n("a",sn,[an,e(a)]),s(" function returns the portion of the "),en,s(" that begins with "),tn,s(" index and is of the "),on,s(" characters long. The function takes 3 parameters: the "),pn,s(", the "),rn,s(" index as a number, and the "),ln,s(" as a number.")]),cn,n("p",null,[s("The "),n("a",un,[dn,e(a)]),s(" function finds the position of the first occurrence of a substring in a string. The function requires two parameters: the "),hn,s(" (the string to search in) and a "),kn,s(" (the string to search for). An optional third parameter, "),vn,s(", can be used to change wherein the string the search should begin.")]),bn])}const wn=o(l,[["render",gn],["__file","string-functions.html.vue"]]);export{wn as default};
