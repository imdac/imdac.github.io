import{_ as p,M as o,p as i,q as r,R as n,t as a,N as e,a3 as t}from"./framework-dd056dd6.js";const l={},c=t('<h1 id="php-troubleshooting" tabindex="-1"><a class="header-anchor" href="#php-troubleshooting" aria-hidden="true">#</a> PHP Troubleshooting</h1><p>While some of these coding mistakes are syntax errors and easily identifiable by PHP Lint or Error Reporting, some are logical errors. Logical may not trigger any error or warning, but will still produce an undesirable result. They can also be difficult to find, especially for beginners. Just like with error reporting, the best way to find a logic error is to output information to the HTML page as the code is running.</p><h2 id="output-information" tabindex="-1"><a class="header-anchor" href="#output-information" aria-hidden="true">#</a> Output Information</h2><p>The following is a list of functions that allow us to output information to the page, which can help troubleshoot our PHP code.</p><h3 id="echo" tabindex="-1"><a class="header-anchor" href="#echo" aria-hidden="true">#</a> echo</h3>',5),u={href:"https://www.php.net/manual/en/function.echo.php",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"echo",-1),h=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;I am a string&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$string</span><span class="token punctuation">;</span> <span class="token comment">// I am a string</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, if the variable&#39;s value is an array, the echo statement will not return the values in the array. Instead will either display the string &quot;Array&quot;, which is not all that helpful, or cause a PHP error, which is worse.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;I am an array&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;I have many values&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$array</span> <span class="token comment">// Array</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="print-r" tabindex="-1"><a class="header-anchor" href="#print-r" aria-hidden="true">#</a> print_r</h3>`,4),k={href:"https://www.php.net/manual/en/function.print-r.php",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"print_r()",-1),m=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;I am an array&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;I have many values&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span> <span class="token comment">// Array ([0] =&gt; I am an array [1] =&gt; I have many values)</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By using the <code>print_r()</code> function we can see all the value being stored in the array. When combined with the HTML <code>&lt;pre&gt;</code> tags, the output of the <code>print_r()</code> function when be neatly formatted when displayed.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;I am an array&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;I have many values&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span> <span class="token comment">// Array ([0] =&gt; I am an array [1] =&gt; I have many values)</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="var-dump" tabindex="-1"><a class="header-anchor" href="#var-dump" aria-hidden="true">#</a> var_dump</h3>`,4),g={href:"https://www.php.net/manual/en/function.var-dump.php",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"var_dump()",-1),f=n("code",null,"var_dump()",-1),_=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;I am an array&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;I have many values&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span> <span class="token comment">// array(2) {[0] =&gt; string(13) &quot;I am an array&quot; [1] =&gt; string(18) &quot;I have many values&quot;}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gettype" tabindex="-1"><a class="header-anchor" href="#gettype" aria-hidden="true">#</a> gettype</h3>`,2),y={href:"https://www.php.net/manual/en/function.gettype.php",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"gettype()",-1),q=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$number</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;3&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span> <span class="token comment">// integer</span>
  <span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token comment">// string</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-defined-vars" tabindex="-1"><a class="header-anchor" href="#get-defined-vars" aria-hidden="true">#</a> get_defined_vars</h3>`,2),x={href:"https://www.php.net/manual/en/function.get-defined-vars.php",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"get_defined_vars()",-1),$=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$number</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;3&#39;</span><span class="token punctuation">;</span>
  <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;I am an array&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;I have many values&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_defined_vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="debug-backtrace" tabindex="-1"><a class="header-anchor" href="#debug-backtrace" aria-hidden="true">#</a> debug_backtrace</h3>`,2),T={href:"https://www.php.net/manual/en/function.debug-backtrace.php",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"debug_backtrace()",-1),P=n("code",null,"debug_backtrace()",-1),E=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function-definition function">say_hello_to</span><span class="token punctuation">(</span><span class="token variable">$word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hello <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$word</span><span class="token punctuation">}</span></span>&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">debug_backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">say_hello_to</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Everyone&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="graceful-handling-of-fatal-errors" tabindex="-1"><a class="header-anchor" href="#graceful-handling-of-fatal-errors" aria-hidden="true">#</a> Graceful Handling of Fatal Errors</h2>`,2),L={href:"https://www.php.net/manual/en/function.register-shutdown-function.php",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"register_shutdown_function()",-1),A={href:"https://www.php.net/manual/en/function.error-get-last.php",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"error_get_last()",-1),V=t(`<div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>This technique will not work if there is a syntax error on the page.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token function">register_shutdown_function</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token function">error_get_last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Huston, we have a problem.&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function M(O,R){const s=o("ExternalLinkIcon");return i(),r("div",null,[c,n("p",null,[a("The "),n("a",u,[d,e(s)]),a(" function is a way of displaying strings, numbers and variables to the page.")]),h,n("p",null,[a("The "),n("a",k,[v,e(s)]),a(" function displays human-readable information about a variable, and while it can be use on with strings and number, it more commonly used to display arrays.")]),m,n("p",null,[a("The "),n("a",g,[b,e(s)]),a(" function take print_r to the next level, by providing even more information about variables include they current type (string, number, array, etc) and the size of the variable (number characters in the string, number items in the array). The "),f,a(" function also display arrays in a nice, human readable format.")]),_,n("p",null,[a("The "),n("a",y,[w,e(s)]),a(" function return the variable data type, which can be helpful if we are expecting a number instead of a string.")]),q,n("p",null,[a("The "),n("a",x,[I,e(s)]),a(" function will return an array of all defined variables, even the variable that are pre-defined by PHP.")]),$,n("p",null,[a("The "),n("a",T,[H,e(s)]),a(" function will return an array with a list of function calls that led up to the "),P,a(" function.")]),E,n("p",null,[a("Sometimes it is necessary to let the end user know an error has occurred, without displaying the error reporting messaging. This can be done using the "),n("a",L,[N,e(s)]),a(" and "),n("a",A,[B,e(s)]),a(" functions. Together, these functions can be used to create and display a custom error message, as shown below.")]),V])}const W=p(l,[["render",M],["__file","troubleshooting.html.vue"]]);export{W as default};
