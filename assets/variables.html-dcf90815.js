import{_ as l,M as t,p as r,q as p,N as e,R as n,t as a,a3 as i}from"./framework-dd056dd6.js";const c={},d=n("h1",{id:"php-variables",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-variables","aria-hidden":"true"},"#"),a(" PHP Variables")],-1),u={href:"https://www.php.net/manual/en/language.variables.basics.php",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"naming-variables",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#naming-variables","aria-hidden":"true"},"#"),a(" Naming Variables")],-1),b=n("p",null,"In PHP, when defining a variable, variables must adhere to certain naming conventions. Below are some general rules when naming variables:",-1),h=n("li",null,[a("All variable names must start with a dollar sign ("),n("code",null,"$"),a(")")],-1),m=n("li",null,[a("The dollar sign must be followed by a letter or an underscore ("),n("code",null,"_"),a(")")],-1),k=n("li",null,[a("Variable names can contain letters, numbers, underscores, or dashes ("),n("code",null,"-"),a(")")],-1),g=n("li",null,"Variable names cannot contain spaces",-1),f=n("li",null,"Variable names are case-sensitive",-1),_={href:"https://php.net/manual/en/reserved.php",target:"_blank",rel:"noopener noreferrer"},y=i(`<p>The following example is a list of valid and unique variable names. Each name will create a new variable.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token comment">// valid variable names</span>
  <span class="token variable">$item</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Item 1&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$Item</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Item 2&quot;</span><span class="token punctuation">;</span> 
  <span class="token variable">$ITEM</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Item 3&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$myVariable</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;My first variable&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$my_variable</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;My second variable&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$my_variable3</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;My third variable&quot;</span><span class="token punctuation">;</span>

  <span class="token comment">// valid, but discouraged</span>
  <span class="token variable">$book</span><span class="token operator">-</span>variable <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token variable">$_book</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token variable">$__book</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="naming-conventions" tabindex="-1"><a class="header-anchor" href="#naming-conventions" aria-hidden="true">#</a> Naming conventions</h2><p>While it is possible to create many different names for variables, there are best practice conventions for how variables should be named to avoid confusion and mistakes. Take for instance the example above, notice that the word &#39;item&#39; is used three different times. Because variable names are case-sensitive, each variable is actually a different variable. But it could be confusing when we might one.</p><p>The following is a list of guidelines when naming variables.</p><ol><li><em><strong>Be consistent</strong></em>. Choose a name convention and stick with it.</li><li><em><strong>Be descriptive</strong></em>. A variable name should describe the nature of the value of the variable</li><li><em><strong>Be concise</strong></em>. Long variable names are difficult to write and can lead to errors</li><li><em><strong>Avoid confusing characters</strong></em>. Characters like the dash (<code>-</code>) or underscore (<code>_</code>) can be easily misread.</li></ol><h2 id="using-php-variables" tabindex="-1"><a class="header-anchor" href="#using-php-variables" aria-hidden="true">#</a> Using PHP Variables</h2><p>To retrieve the value stored inside of a PHP Variable, you simply call the variable name.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// gives $var a value</span>
  <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$var</span><span class="token punctuation">;</span> <span class="token comment">// outputs 10</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To change the value of a variable, call the variable name followed by an equal sign (<code>=</code>) and the desired value.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// gives $var a value</span>
  <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$var</span><span class="token punctuation">;</span> <span class="token comment">// outputs 10</span>
 
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  
  <span class="token comment">// gives the $var a new value</span>
  <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$var</span><span class="token punctuation">;</span> <span class="token comment">// outputs 100</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="deleting-a-php-variable" tabindex="-1"><a class="header-anchor" href="#deleting-a-php-variable" aria-hidden="true">#</a> Deleting a PHP Variable</h2><p>If you ever want to delete a variable there is a function called <code>unset()</code> that will let you destroy a variable.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

  <span class="token comment">// deletes $var</span>
  <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$var</span><span class="token punctuation">;</span> <span class="token comment">// notice stating $var is undefined</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),w={class:"try"},q={href:"https://repl.it/@eisenbm/php-variables",target:"_blank",rel:"noopener noreferrer"},$=n("h2",{id:"constants",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#constants","aria-hidden":"true"},"#"),a(" Constants")],-1),x={href:"https://www.php.net/manual/en/language.constants.syntax.php",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"const",-1),V=n("code",null,"define()",-1),C=i(`<p>The <code>const</code> keyword is limited to scalar data types (booleans, numbers, and strings) and must be declared outside of any functions, loops, or conditional statements. The <code>define()</code> function allows a constant to be defined to any expression, may be defined anywhere in the code.</p><p>Other traits of Constants are:</p><ul><li>Constants do not start with a <code>$</code></li><li>Constants are not restricted by rules of Variable Scope</li><li>Constants may not be redefined or undefined once they are set</li><li>Constants are typically written in all-caps</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;COLORS&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),T={class:"try"},I={href:"https://replit.com/@eisenbm/PHP-Constants",target:"_blank",rel:"noopener noreferrer"};function B(H,N){const o=t("Youtube"),s=t("ExternalLinkIcon");return r(),p("div",null,[d,e(o,{id:"DiEfNQsapbc",citation:"This video was created by <a href='https://www.youtube.com/channel/UCzyuZJ8zZ-Lhfnz41DG5qLw'>Dani Krossing</a>"}),n("p",null,[n("a",u,[a("PHP variables"),e(s)]),a(", like JavaScript Variables, are used to store values of different types, like strings, numbers, and booleans. Variables in PHP are loosely typed, which means you not need to set the data type when declaring the variable.")]),v,b,n("ul",null,[h,m,k,g,f,n("li",null,[n("a",_,[a("Reserved words"),e(s)]),a(" cannot be used as variable names")])]),y,n("div",w,[n("p",null,[n("a",q,[a("Try it yourself on Repl.it"),e(s)])])]),$,n("p",null,[a("A constant is a variable that once defined can never be changed. In PHP, "),n("a",x,[a("Constants"),e(s)]),a(" can be defined using the "),P,a(" keyword or the "),V,a(" function.")]),C,n("div",T,[n("p",null,[n("a",I,[a("Try it yourself on Repl.it"),e(s)])])])])}const L=l(c,[["render",B],["__file","variables.html.vue"]]);export{L as default};
