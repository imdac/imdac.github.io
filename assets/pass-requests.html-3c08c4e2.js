import{_ as p,M as o,p as c,q as l,R as n,t as s,N as e,a3 as t}from"./framework-dd056dd6.js";const i={},u=n("h1",{id:"pass-request-through-laravel-routes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pass-request-through-laravel-routes","aria-hidden":"true"},"#"),s(" Pass Request through Laravel Routes")],-1),r={class:"watch"},d={href:"https://laracasts.com/series/laravel-6-from-scratch/episodes/6",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"retrieving-request-data",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#retrieving-request-data","aria-hidden":"true"},"#"),s(" Retrieving Request Data")],-1),h={href:"https://www.php.net/manual/en/reserved.variables.get.php",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"$_GET",-1),v={href:"https://laravel.com/docs/6.x/helpers#method-request",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"request",-1),b=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* /?name=John */</span>
  <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>

  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sending-data-to-the-view" tabindex="-1"><a class="header-anchor" href="#sending-data-to-the-view" aria-hidden="true">#</a> Sending Data to the View</h2>`,2),_={href:"https://laravel.com/docs/6.x/views#passing-data-to-views",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"view",-1),w=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* /?name=John */</span>
  <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>

  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;home&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;name&quot;</span> <span class="token operator">=&gt;</span> <span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Inside the view, each value can be access using its corresponding key. A variable with the same name as the key will be accessible in the view.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello, <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),y={href:"https://laravel.com/docs/6.x/blade#displaying-data",target:"_blank",rel:"noopener noreferrer"},q=t(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello, {{ $name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function x(R,L){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("div",r,[n("p",null,[n("a",d,[s('Watch "Pass Request Data to View" on Laracasts'),e(a)])])]),k,n("p",null,[s("We have previously learned that data passed through the URL or query string is stored by PHP in the "),n("a",h,[g,e(a)]),s(" variable. In Laravel, the "),n("a",v,[m,e(a)]),s(" help function is used instead.")]),b,n("p",null,[s("An array of data may be "),n("a",_,[s("passed to views"),e(a)]),s(". When doing this, the array of data must be an associative array, with key / value pairs. The array is added as the optional argument to the "),f,s(" helper function.")]),w,n("p",null,[s('Of course, "echoing" data directly received from a user is an unsafe practice as could leave your site vulnerable to attack. That is why is better to use Blade to '),n("a",y,[s("display the data"),e(a)]),s(".")]),q])}const $=p(i,[["render",x],["__file","pass-requests.html.vue"]]);export{$ as default};
