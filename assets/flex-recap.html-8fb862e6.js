import{_ as n,M as r,p as l,q as s,R as e,t,N as o,V as h,a3 as a}from"./framework-dd056dd6.js";const c={},f=e("h1",{id:"flexbox-recap",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#flexbox-recap","aria-hidden":"true"},"#"),t(" Flexbox Recap")],-1),m={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox",target:"_blank",rel:"noopener noreferrer"},p=a('<h3 id="terms-and-defaults" tabindex="-1"><a class="header-anchor" href="#terms-and-defaults" aria-hidden="true">#</a> Terms and defaults</h3><p>Before starting to work with the flex-box properties it is important to familiarize with most common terminology.</p><table><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>flex container</td><td>The parent element to which we have added <code>display:flex</code> property</td></tr><tr><td>flex items</td><td>the direct child elements of the flex container</td></tr><tr><td>direction</td><td>the direction in which the flex items are arranged, the default is a row</td></tr><tr><td>main-axis</td><td>the main direction of the flex items, default is left to right in a row</td></tr><tr><td>cross-axis</td><td>the perpendicular axis to the main-axis, in this case vertical from top to bottom</td></tr><tr><td>flex-start</td><td>the starting point of the main-axis, default is on the left hand side</td></tr><tr><td>flex-end</td><td>the ending point of the main-axis, default is on the right hand side</td></tr></tbody></table><h2 id="the-container" tabindex="-1"><a class="header-anchor" href="#the-container" aria-hidden="true">#</a> The container</h2><p>To start working with flexbox we first need to set the flex container by adding <code>display:flex</code> to the parent element of the elements that we want to display in a row or column using flexbox.</p>',5),x=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"display-flex",src:"https://codepen.io/IMD/embed/NWgjeJp?default-tab=css%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/IMD/pen/NWgjeJp">
  display-flex</a> by IMD (<a href="https://codepen.io/IMD">@IMD</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),u=a('<h2 id="direction" tabindex="-1"><a class="header-anchor" href="#direction" aria-hidden="true">#</a> Direction</h2><p>To control the direction of the flex items inside the flex container we can use the <code>flex-direction</code> property on the parent element, with one of the following values <code>row(default)</code>, <code>column</code>, <code>row-reverse</code>, <code>column-reverse</code></p><p>Each property will change the main-axis as follows:</p><table><thead><tr><th>value</th><th style="text-align:center;">main-axis</th><th style="text-align:right;">cross-axis</th></tr></thead><tbody><tr><td>row</td><td style="text-align:center;">left to right ➡️</td><td style="text-align:right;">top to bottom ⬇️</td></tr><tr><td>row-reverse</td><td style="text-align:center;">right to left ⬅️</td><td style="text-align:right;">top to bottom ⬇️</td></tr><tr><td>column</td><td style="text-align:center;">top to bottom ⬇️</td><td style="text-align:right;">left to right ➡️</td></tr><tr><td>column-reverse</td><td style="text-align:center;">bottom to top ⬆️</td><td style="text-align:right;">left to right ➡️</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Based on the main-axis and cross-axis directions the values of flex-start and flex-end are defined. Example: in case of <code>row-reverse</code> with a right to left main-axis flex-start will be on the right side and flex-end will be on the left, this will be reversed in case of a <code>row</code> with left to right main-axis</p></div><h2 id="wrap" tabindex="-1"><a class="header-anchor" href="#wrap" aria-hidden="true">#</a> Wrap</h2><p>The <code>flex-wrap</code> property allows for the items to wrap or not wrap on the next line once there is less than required space available to fit all items in the same row or column. We can use the values <code>wrap</code> or <code>nowrap</code>(default)</p><h2 id="alignment" tabindex="-1"><a class="header-anchor" href="#alignment" aria-hidden="true">#</a> Alignment</h2><p>There are two axis in flex container and we can align items on both axis using different properties. Some properties are added on the flex container and others on flex items.</p><table><thead><tr><th>axis</th><th>property</th><th>values</th><th>added on</th></tr></thead><tbody><tr><td>main</td><td><em>justify-content</em></td><td><em>flex-start</em>(default), <em>flex-end</em>, <em>center</em>, <em>space-between</em>, <em>space-around</em>, <em>space-evenly</em></td><td>flex container</td></tr><tr><td>cross</td><td><em>align-items</em></td><td><em>stretch</em>(default), <em>flex-start</em>, <em>flex-end</em>, <em>center</em>, <em>baseline</em></td><td>flex container</td></tr><tr><td>cross</td><td><em>align-self</em></td><td><em>stretch</em>(default), <em>flex-start</em>, <em>flex-end</em>, <em>center</em>, <em>baseline</em></td><td>flex item</td></tr></tbody></table><h2 id="sizing" tabindex="-1"><a class="header-anchor" href="#sizing" aria-hidden="true">#</a> Sizing</h2><p>To control the size of the flex items we can use the <code>flex-basis</code>, <code>flex-grow</code>, <code>flex-shrink</code></p><table><thead><tr><th>property</th><th>values</th><th>usage</th><th>added on</th></tr></thead><tbody><tr><td><em>flex-basis</em></td><td>numeric value followed by one of the units, px, %, em, rem etc.</td><td>used to define a base width in a row or height in a column value for the flex items</td><td>flex items</td></tr><tr><td><em>flex-grow</em></td><td>numeric value without any unit</td><td>defines the ratio in which a flex-item will grow using the available space in respect to the sibling flex-items</td><td>flex items</td></tr><tr><td><em>flex-shrink</em></td><td>numeric value without any unit</td><td>defines in which ratio the flex-item will shrink in respect to its sibling flex-items when there is no additional space available</td><td>flex items</td></tr></tbody></table><p><strong>Flex Shrink Example</strong></p>',14),b=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"flex-shrink animation",src:"https://codepen.io/abhaysharma/embed/GREmzrN?default-tab=css%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/abhaysharma/pen/GREmzrN">
  flex-shrink animation</a> by Abhay Sharma (<a href="https://codepen.io/abhaysharma">@abhaysharma</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),w=a('<h2 id="order" tabindex="-1"><a class="header-anchor" href="#order" aria-hidden="true">#</a> Order</h2><p>The <code>order</code> property can be added to a flex-item for defining its order in the flex container.</p><ul><li>The default value of <code>order</code> for all items is 0. Hence all the items will display in order they were added to the HTML.</li><li>The default order for row-reverse or column-reverse flex-direction will be reversed from the HTML order.</li><li>Accepted values for the <code>order</code> property are -ve integers, 0, +ve integers.</li><li>Larger the value of order property more towards the end of the main-axis a flex-item will be.</li><li>Smaller the value of order property more towards the start of the main-axis a flex-item will be.</li></ul>',3);function g(y,v){const i=r("RouterLink"),d=r("ExternalLinkIcon");return l(),s("div",null,[f,e("p",null,[t("This is a recap of the "),o(i,{to:"/modules/css/css-flexbox/"},{default:h(()=>[t("CSS flexbox module covered in Web Dev I")]),_:1}),t(".")]),e("p",null,[e("a",m,[t("CSS Flexible Box or Flexbox module"),o(d)]),t(" is a layout module which is mainly used for components that need to be displayed either in a row(horizontal) or column(vertical) format.")]),p,x,u,b,w])}const S=n(c,[["render",g],["__file","flex-recap.html.vue"]]);export{S as default};
