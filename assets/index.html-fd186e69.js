import{_ as i,M as o,p as l,q as c,N as a,R as n,t as s,a3 as t}from"./framework-dd056dd6.js";const r={},u=n("h1",{id:"php-functions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-functions","aria-hidden":"true"},"#"),s(" PHP Functions")],-1),d=t(`<p>A function is a block of code set with an identifier, that can to be executed at some point in the future. PHP has many predefined functions, like <code>is_array()</code>, that allow us to perform a specific task, whenever we need for as many times as we need. That is advantage of using functions. It creates reusable code.</p><h2 id="calling-a-function" tabindex="-1"><a class="header-anchor" href="#calling-a-function" aria-hidden="true">#</a> Calling a function</h2><p>A function will not execute it&#39;s code until it is called. To call a function, write the function&#39;s name followed by a set of parentheses.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>Calling a function that has not been defined will result in an error.</p></div><h2 id="internal-functions" tabindex="-1"><a class="header-anchor" href="#internal-functions" aria-hidden="true">#</a> Internal Functions</h2>`,6),k={href:"https://www.php.net/manual/en/functions.internal.php",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.php.net/manual/en/ref.var.php",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.php.net/manual/en/ref.strings.php",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.php.net/manual/en/ref.array.php",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.php.net/manual/en/ref.math.php",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"The following are some examples of using some internal functions.",-1),f=n("h3",{id:"isset",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#isset","aria-hidden":"true"},"#"),s(" isset")],-1),_={href:"https://www.php.net/manual/en/function.isset.php",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"isset",-1),y=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">;</span> 

<span class="token keyword">echo</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span>
<span class="token keyword">echo</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$fname</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="implode" tabindex="-1"><a class="header-anchor" href="#implode" aria-hidden="true">#</a> implode</h3>`,2),q={href:"https://www.php.net/manual/en/function.implode.php",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"implode",-1),$=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token variable">$colors</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;green&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token variable">$colors</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red,blue,green</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in-array" tabindex="-1"><a class="header-anchor" href="#in-array" aria-hidden="true">#</a> in_array</h3>`,2),T={href:"https://www.php.net/manual/en/function.in-array.php",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"in_array",-1),N=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token variable">$colors</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;green&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token variable">$colors</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">echo</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;black&#39;</span><span class="token punctuation">,</span> <span class="token variable">$colors</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rand" tabindex="-1"><a class="header-anchor" href="#rand" aria-hidden="true">#</a> rand</h3>`,2),V={href:"https://www.php.net/manual/en/function.rand.php",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"rand",-1),D=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token comment">// getting a random integer between 1 and 10 (inclusive)</span>
  <span class="token keyword">echo</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// possible response: 5</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="user-defined-function" tabindex="-1"><a class="header-anchor" href="#user-defined-function" aria-hidden="true">#</a> User-Defined Function</h2>`,2),H={href:"https://www.php.net/manual/en/functions.user-defined.php",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"function",-1),I=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function-definition function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h3>`,2),L={href:"https://www.php.net/manual/en/functions.arguments.php",target:"_blank",rel:"noopener noreferrer"},J=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token keyword">function</span> <span class="token function-definition function">say_hello_to</span><span class="token punctuation">(</span><span class="token variable">$word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hello <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$word</span><span class="token punctuation">}</span></span>!&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;John Doe&quot;</span><span class="token punctuation">;</span>
  <span class="token function">say_hello_to</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello John Doe!</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions can be defined with more than one parameter, and therefore can accept more than one argument. When working with more than one parameter, the same number of arguments must be given, in the same order.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function-definition function">better_hello</span><span class="token punctuation">(</span><span class="token variable">$greeting</span><span class="token punctuation">,</span> <span class="token variable">$target</span><span class="token punctuation">,</span> <span class="token variable">$punct</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$greeting</span><span class="token punctuation">}</span></span> <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$target</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$punct</span><span class="token punctuation">}</span></span>&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;John Doe&quot;</span><span class="token punctuation">;</span>
  <span class="token function">better_hello</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Greetings&quot;</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Greetings John Doe!!! </span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>While the terms <strong>parameter</strong> and <strong>argument</strong> are often used interchangeably, they technically have different meanings. A <strong>parameter</strong> is a variable in the declaration of a function. An <strong>argument</strong> is the actual value of the variable that is passed to the function when it is called.</p></div><h3 id="default-arguments" tabindex="-1"><a class="header-anchor" href="#default-arguments" aria-hidden="true">#</a> Default Arguments</h3>`,5),R={href:"https://www.php.net/manual/en/functions.arguments.php",target:"_blank",rel:"noopener noreferrer"},F=t(`<p>Default values are provided when the function is defined, and the syntax is similar to setting a value to a variable.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token keyword">function</span> <span class="token function-definition function">paint</span><span class="token punctuation">(</span><span class="token variable">$room</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;office&quot;</span><span class="token punctuation">,</span> <span class="token variable">$color</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;red&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;The color of the <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$room</span><span class="token punctuation">}</span></span> is <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$color</span><span class="token punctuation">}</span></span>.&lt;br&gt;&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When calling a function with default arguments, values can be omitted. But values still need to be provided in the correct order.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The default value will only be used if <em>nothing</em> is passed as the argument. Therefore it is necessary that default arguments be placed at the end of the parameter list.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token keyword">function</span> <span class="token function-definition function">paint</span><span class="token punctuation">(</span><span class="token variable">$room</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;office&quot;</span><span class="token punctuation">,</span> <span class="token variable">$color</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;red&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;The color of the <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$room</span><span class="token punctuation">}</span></span> is <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$color</span><span class="token punctuation">}</span></span>.&lt;br&gt;&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>

  <span class="token comment">// calling function using defaults</span>
  <span class="token keyword">echo</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The color of the office is red.</span>

  <span class="token comment">// calling function with provided values</span>
  <span class="token keyword">echo</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;bedroom&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The color of the bedroom is blue.</span>

  <span class="token comment">// calling function with null value</span>
  <span class="token keyword">echo</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;bedroom&quot;</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The color of the bedroom is .</span>

  <span class="token comment">// calling function with only room</span>
  <span class="token keyword">echo</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;bedroom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The color of the bedroom is red.</span>

  <span class="token comment">// calling function with only color</span>
  <span class="token keyword">echo</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The color of the blue is red.</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),O={class:"try"},B={href:"https://repl.it/@eisenbm/PHP-Default-Arguments",target:"_blank",rel:"noopener noreferrer"},U=n("h3",{id:"returning-values",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#returning-values","aria-hidden":"true"},"#"),s(" Returning Values")],-1),W={href:"https://www.php.net/manual/en/functions.returning-values.php",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"return",-1),z={href:"https://www.php.net/manual/en/function.return.php",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"return",-1),S=t(`<div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>Best practice states that all customs should have a <code>return</code> statement. It is also a good idea, not use an <code>echo</code> statement inside a function.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function-definition function">add</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$sum</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$sum</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token variable">$result1</span> <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$result2</span> <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token variable">$result1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$result2</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="variable-scope" tabindex="-1"><a class="header-anchor" href="#variable-scope" aria-hidden="true">#</a> Variable Scope</h2>`,3),Y={href:"https://www.php.net/manual/en/language.variables.scope.php",target:"_blank",rel:"noopener noreferrer"},Z=t(`<p>PHP has two types of scope, <strong>global scope</strong> and <strong>local scope</strong>. Variables defined inside a function are in <strong>local scope</strong> and are only accessible inside the function. Variables defined outside of a function is in <strong>global scope</strong> and are accessible everywhere except inside of a function.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// global scope</span>

  <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment">// local scope</span>
  <span class="token punctuation">}</span>

  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NULL</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If a global variable needs to be used in the a function, the variable must be defined inside the function using the <code>global</code> keyword. This ensure access to the global variable instead of the local one.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// global scope</span>

  <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">global</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment">// global scope</span>

    <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment">// global scope</span>
  <span class="token punctuation">}</span>

  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int(1)</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>Use the <code>global</code> keyword and <em>global variables</em> with caution. It is often better to use parameters than to rely on global variables.</p></div>`,5),j={class:"try"},K={href:"https://repl.it/@eisenbm/PHP-Variable-Scope",target:"_blank",rel:"noopener noreferrer"};function M(Q,X){const p=o("Youtube"),e=o("ExternalLinkIcon");return l(),c("div",null,[u,a(p,{id:"RIPJEgOrVRc",citation:"This video was created by <a href='https://www.youtube.com/channel/UCzyuZJ8zZ-Lhfnz41DG5qLw'>Dani Krossing</a>"}),d,n("p",null,[n("a",k,[s("Internal Functions"),a(e)]),s(", as known as built-in functions, are function that come standard with PHP. PHP has hundreds of the internal functions, including some for "),n("a",h,[s("variables"),a(e)]),s(", "),n("a",m,[s("strings"),a(e)]),s(", "),n("a",v,[s("arrays"),a(e)]),s(", and "),n("a",b,[s("math"),a(e)]),s(".")]),g,f,n("p",null,[s("The "),n("a",_,[w,a(e)]),s(" function is used to determine if a variable is declared and has a value other than NULL.")]),y,n("p",null,[s("The "),n("a",q,[x,a(e)]),s(" function will join array elements into a string.")]),$,n("p",null,[s("The "),n("a",T,[P,a(e)]),s(" function checks if a specified value exists in an array.")]),N,n("p",null,[s("The "),n("a",V,[A,a(e)]),s(" function generates a random integer. An optional minimum and maximum number can be added to limit the pool of numbers.")]),D,n("p",null,[s("A "),n("a",H,[s("user-defined function"),a(e)]),s(" is a custom function that we create. A function is defined using the "),E,s(" keyword, an identifier or name, a set of parentheses, and a set of curly braces. The block of code to be executed goes inside the curly braces.")]),I,n("p",null,[n("a",L,[s("Function arguments"),a(e)]),s(" are data that is passed to a function through comma-separated list.")]),J,n("p",null,[s("Another feature of "),n("a",R,[s("function arguments"),a(e)]),s(" is providing a default value. Default function arguments allow for values to be predefined. When the value of an argument remains the same most of time, providing a predefined value can be beneficial and time-saving.")]),F,n("div",O,[n("p",null,[n("a",B,[s("Try it yourself on Repl.it"),a(e)])])]),U,n("p",null,[n("a",W,[s("Returning values"),a(e)]),s(" from a function is a common and preferred practice. Values can be returned using a "),C,s(" statement.")]),n("p",null,[s("The "),n("a",z,[G,a(e)]),s(" statement immediately ends execution of the current function and returns its argument as the value of the function call.")]),S,n("p",null,[n("a",Y,[s("Variable scope"),a(e)]),s(" refers to the context in which a variable was defined where it is visible.")]),Z,n("div",j,[n("p",null,[n("a",K,[s("Try it yourself on Repl.it"),a(e)])])])])}const sn=i(r,[["render",M],["__file","index.html.vue"]]);export{sn as default};
