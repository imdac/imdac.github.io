import{_ as p,M as c,p as d,q as r,N as t,R as n,t as s,V as a,a3 as o}from"./framework-dd056dd6.js";const u={},_=n("h1",{id:"operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#operators","aria-hidden":"true"},"#"),s(" Operators")],-1),h={href:"https://www.php.net/manual/en/language.operators.php",target:"_blank",rel:"noopener noreferrer"},k=n("ul",null,[n("li",null,"Arithetic Operators"),n("li",null,"Assignment Operators"),n("li",null,"Comparison Operators"),n("li",null,"Logical Operators"),n("li",null,"Incrementing/Decrementing Operators"),n("li",null,"String Operators")],-1),b=n("h2",{id:"arithmetic-operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#arithmetic-operators","aria-hidden":"true"},"#"),s(" Arithmetic Operators")],-1),m={href:"https://www.php.net/manual/en/language.operators.arithmetic.php",target:"_blank",rel:"noopener noreferrer"},v=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"Operator"),n("th",null,"Name"),n("th",{style:{"text-align":"center"}},"Example"),n("th",null,"Result")])],-1),g=n("td",{style:{"text-align":"center"}},[n("code",null,"+")],-1),$=n("td",null,"Addition",-1),f={style:{"text-align":"center"}},y=n("code",null,"$a + $b",-1),x=n("td",null,[s("Sum of "),n("code",null,"$a"),s(" and "),n("code",null,"$b")],-1),w=n("td",{style:{"text-align":"center"}},[n("code",null,"-")],-1),q=n("td",null,"Subtraction",-1),R={style:{"text-align":"center"}},O=n("code",null,"$a - $b",-1),E=n("td",null,[s("Difference of "),n("code",null,"$a"),s(" and "),n("code",null,"$b")],-1),T=n("td",{style:{"text-align":"center"}},[n("code",null,"*")],-1),N=n("td",null,"Multiplication",-1),U={style:{"text-align":"center"}},P=n("code",null,"$a * $b",-1),A=n("td",null,[s("Product of "),n("code",null,"$a"),s(" and "),n("code",null,"$b")],-1),D=n("td",{style:{"text-align":"center"}},[n("code",null,"/")],-1),I=n("td",null,"Division",-1),L={style:{"text-align":"center"}},S=n("code",null,"$a / $b",-1),C=n("td",null,[s("Divides "),n("code",null,"$a"),s(" by "),n("code",null,"$b")],-1),H=n("td",{style:{"text-align":"center"}},[n("code",null,"%")],-1),B=n("td",null,"Modulo",-1),M={style:{"text-align":"center"}},V=n("code",null,"$a % $b",-1),G=n("td",null,[s("Remainder of "),n("code",null,"$a"),s(" divided by "),n("code",null,"$b")],-1),z=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>
  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">-</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">*</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">/</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// 1.3333333333</span>
  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">%</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),W={class:"try"},K={href:"https://repl.it/@eisenbm/PHP-Arithmetic-Operators-II",target:"_blank",rel:"noopener noreferrer"},Y=n("h2",{id:"assignment-operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#assignment-operators","aria-hidden":"true"},"#"),s(" Assignment Operators")],-1),Z={href:"https://www.php.net/manual/en/language.operators.assignment.php",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"=",-1),J=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"Operator"),n("th",null,"Name"),n("th",{style:{"text-align":"center"}},"Example"),n("th",null,"Result"),n("th",null,"Equivalent")])],-1),j=n("td",{style:{"text-align":"center"}},[n("code",null,"=")],-1),Q=n("td",null,"Basic assignment",-1),X={style:{"text-align":"center"}},nn=n("code",null,"$a = $b",-1),sn=n("td",null,[n("code",null,"$a"),s(" will be set to the value of "),n("code",null,"$b")],-1),tn=n("td",null,null,-1),en=n("td",{style:{"text-align":"center"}},[n("code",null,"+=")],-1),an=n("td",null,"Addition assignment",-1),ln={style:{"text-align":"center"}},on=n("code",null,"$a += $b",-1),cn=n("td",null,[n("code",null,"$a"),s(" will be set to the difference of "),n("code",null,"$a"),s(" and "),n("code",null,"$b")],-1),pn=n("code",null,"$a = $a + $b",-1),dn=n("td",{style:{"text-align":"center"}},[n("code",null,"-=")],-1),rn=n("td",null,"Subtration assignment",-1),un={style:{"text-align":"center"}},_n=n("code",null,"$a -= $b",-1),hn=n("td",null,[n("code",null,"$a"),s(" will be set to the sum of "),n("code",null,"$a"),s(" and "),n("code",null,"$b")],-1),kn=n("code",null,"$a = $a - $b",-1),bn=n("td",{style:{"text-align":"center"}},[n("code",null,"*=")],-1),mn=n("td",null,"Multiplication assignment",-1),vn={style:{"text-align":"center"}},gn=n("code",null,"$a *= $b",-1),$n=n("td",null,[n("code",null,"$a"),s(" will be set to the product of "),n("code",null,"$a"),s(" and "),n("code",null,"$b")],-1),fn=n("code",null,"$a = $a * $b",-1),yn=n("td",{style:{"text-align":"center"}},[n("code",null,"/=")],-1),xn=n("td",null,"Division assignment",-1),wn={style:{"text-align":"center"}},qn=n("code",null,"$a /= $b",-1),Rn=n("td",null,[n("code",null,"$a"),s(" will be set to the division of "),n("code",null,"$a"),s(" by "),n("code",null,"$b")],-1),On=n("code",null,"$a = $a / $b",-1),En=n("td",{style:{"text-align":"center"}},[n("code",null,"%=")],-1),Tn=n("td",null,"Modulo assignment",-1),Nn={style:{"text-align":"center"}},Un=n("code",null,"$a %= $b",-1),Pn=n("td",null,[n("code",null,"$a"),s(" will be set to the remainder of "),n("code",null,"$a"),s(" divided by "),n("code",null,"$b")],-1),An=n("code",null,"$a = $a % $b",-1),Dn=n("td",{style:{"text-align":"center"}},[n("code",null,".=")],-1),In=n("td",null,"String concatentation assignment",-1),Ln={style:{"text-align":"center"}},Sn=n("code",null,"$a .= $b",-1),Cn=n("td",null,[n("code",null,"$a"),s(" will be set to the concatenation of "),n("code",null,"$a"),s(" and "),n("code",null,"$b")],-1),Hn=n("code",null,"$a = $a . $b",-1),Bn=n("h2",{id:"comparison-operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#comparison-operators","aria-hidden":"true"},"#"),s(" Comparison Operators")],-1),Mn={href:"https://www.php.net/manual/en/language.operators.comparison.php",target:"_blank",rel:"noopener noreferrer"},Vn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"Operator"),n("th",null,"Name"),n("th",{style:{"text-align":"center"}},"Example"),n("th",null,"Result")])],-1),Gn=n("td",{style:{"text-align":"center"}},[n("code",null,"==")],-1),zn=n("td",null,"Equal",-1),Wn={style:{"text-align":"center"}},Kn=n("code",null,"$a == $b",-1),Yn=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is equal to "),n("code",null,"$b"),s(" in value")],-1),Zn=n("td",{style:{"text-align":"center"}},[n("code",null,"===")],-1),Fn=n("td",null,"Identical",-1),Jn={style:{"text-align":"center"}},jn=n("code",null,"$a === $b",-1),Qn=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is equal to "),n("code",null,"$b"),s(" in value and data type")],-1),Xn=n("td",{style:{"text-align":"center"}},[n("code",null,"!=")],-1),ns=n("td",null,"Not Equal",-1),ss={style:{"text-align":"center"}},ts=n("code",null,"$a != $b",-1),es=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is not equal to "),n("code",null,"$b"),s(" in value")],-1),as=n("td",{style:{"text-align":"center"}},[n("code",null,"!==")],-1),ls=n("td",null,"Not Identical",-1),os={style:{"text-align":"center"}},cs=n("code",null,"$a !== $b",-1),is=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is not equal to "),n("code",null,"$b"),s(" in value and data type")],-1),ps=n("td",{style:{"text-align":"center"}},[n("code",null,"<")],-1),ds=n("td",null,"Less than",-1),rs={style:{"text-align":"center"}},us=n("code",null,"$a < $b",-1),_s=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is less than "),n("code",null,"$b")],-1),hs=n("td",{style:{"text-align":"center"}},[n("code",null,">")],-1),ks=n("td",null,"Greater than",-1),bs={style:{"text-align":"center"}},ms=n("code",null,"$a > $b",-1),vs=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is greater than "),n("code",null,"$b")],-1),gs=n("td",{style:{"text-align":"center"}},[n("code",null,"<=")],-1),$s=n("td",null,"Less than or equal to",-1),fs={style:{"text-align":"center"}},ys=n("code",null,"$a <= $b",-1),xs=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is less than or equal to "),n("code",null,"$b")],-1),ws=n("td",{style:{"text-align":"center"}},[n("code",null,">=")],-1),qs=n("td",null,"Greater than or equal to",-1),Rs={style:{"text-align":"center"}},Os=n("code",null,"$a >= $b",-1),Es=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is greater than equal to "),n("code",null,"$b")],-1),Ts=n("td",{style:{"text-align":"center"}},[n("code",null,"<=>")],-1),Ns=n("td",null,"Spaceship",-1),Us={style:{"text-align":"center"}},Ps=n("code",null,"$a <=> $b",-1),As=n("td",null,[s("Returns "),n("code",null,"0"),s(" if "),n("code",null,"$a"),s(" is equal to "),n("code",null,"$b"),n("br"),n("br"),s("Returns "),n("code",null,"1"),s(" if "),n("code",null,"$a"),s(" is greater than "),n("code",null,"$b"),n("br"),n("br"),s("Returns "),n("code",null,"-1"),s(" if "),n("code",null,"$a"),s(" is less than "),n("code",null,"$b")],-1),Ds=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">==</span> <span class="token string double-quoted-string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">===</span> <span class="token string double-quoted-string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(false)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bool(false)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// bool(false)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// bool(false)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">!==</span> <span class="token string double-quoted-string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(true)</span>

  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">&lt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$d</span> <span class="token operator">&lt;</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bool(false)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$d</span> <span class="token operator">&lt;=</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$d</span> <span class="token operator">&gt;=</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// bool(true)</span>

  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;=&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// int(1)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;=&gt;</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// int(-1)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;=&gt;</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// int(0)</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Is={class:"try"},Ls={href:"https://repl.it/@eisenbm/PHP-Comparison-Operators",target:"_blank",rel:"noopener noreferrer"},Ss=n("h2",{id:"logical-operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#logical-operators","aria-hidden":"true"},"#"),s(" Logical Operators")],-1),Cs={href:"http://php.net/manual/en/language.operators.logical.php",target:"_blank",rel:"noopener noreferrer"},Hs=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"Operator"),n("th",null,"Name"),n("th",{style:{"text-align":"center"}},"Example"),n("th",null,"Result")])],-1),Bs=n("td",{style:{"text-align":"center"}},[n("code",null,"!")],-1),Ms=n("td",null,"Not",-1),Vs={style:{"text-align":"center"}},Gs=n("code",null,"!$a",-1),zs=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is not "),n("code",null,"TRUE")],-1),Ws=n("td",{style:{"text-align":"center"}},[n("code",null,"&&")],-1),Ks=n("td",null,"And",-1),Ys={style:{"text-align":"center"}},Zs=n("code",null,"$a && $b",-1),Fs=n("td",null,[n("code",null,"TRUE"),s(" if both "),n("code",null,"$a"),s(" and "),n("code",null,"$b"),s(" are TRUE.")],-1),Js=n("tr",null,[n("td",{style:{"text-align":"center"}},"`"),n("td"),n("td",{style:{"text-align":"center"}},"`"),n("td",null,"Or")],-1),js=o(`<div class="custom-container warning"><p class="custom-container-title">Caution</p><p>It is also possible to use <code>and</code> and <code>or</code> in place of <code>&amp;&amp;</code> and <code>||</code>. But these operators have different precedence and can result in unexpected results. Review the Logical Operators documentation for more information.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

  <span class="token comment">// this condition will be FALSE</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">&gt;</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is larger than b AND &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;c is larger than d&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>

  <span class="token comment">// this condition will be TRUE</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">&gt;</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is larger than b OR &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;c is larger than d&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>

  <span class="token comment">// setting e if it is not set</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$e</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="incrementing-decrementing-operators" tabindex="-1"><a class="header-anchor" href="#incrementing-decrementing-operators" aria-hidden="true">#</a> Incrementing/Decrementing Operators</h2>`,3),Qs={href:"https://www.php.net/manual/en/language.operators.increment.php",target:"_blank",rel:"noopener noreferrer"},Xs=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"Operator"),n("th",null,"Name"),n("th",{style:{"text-align":"center"}},"Example"),n("th",null,"Result")])],-1),nt=n("td",{style:{"text-align":"center"}},[n("code",null,"++")],-1),st=n("td",null,"Pre-increment",-1),tt={style:{"text-align":"center"}},et=n("code",null,"++$a",-1),at=n("td",null,[s("Increments "),n("code",null,"$a"),s(" by one, then returns "),n("code",null,"$a")],-1),lt=n("td",{style:{"text-align":"center"}},[n("code",null,"++")],-1),ot=n("td",null,"Post-increment",-1),ct={style:{"text-align":"center"}},it=n("code",null,"$a++",-1),pt=n("td",null,[s("Returns "),n("code",null,"$a"),s(", then increments "),n("code",null,"$a"),s(" by one")],-1),dt=n("td",{style:{"text-align":"center"}},[n("code",null,"--")],-1),rt=n("td",null,"Pre-increment",-1),ut={style:{"text-align":"center"}},_t=n("code",null,"--$a",-1),ht=n("td",null,[s("Decrements "),n("code",null,"$a"),s(" by one, then returns "),n("code",null,"$a")],-1),kt=n("td",{style:{"text-align":"center"}},[n("code",null,"--")],-1),bt=n("td",null,"Post-increment",-1),mt={style:{"text-align":"center"}},vt=n("code",null,"$a--",-1),gt=n("td",null,[s("Returns "),n("code",null,"$a"),s(", then decrements "),n("code",null,"$a"),s(" by one")],-1),$t=n("h2",{id:"string-operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#string-operators","aria-hidden":"true"},"#"),s(" String Operators")],-1),ft={href:"https://www.php.net/manual/en/language.operators.string.php",target:"_blank",rel:"noopener noreferrer"},yt=n("code",null,".=",-1),xt=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Hello &quot;</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;World&quot;</span><span class="token punctuation">;</span> 

<span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">.</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// Hello World</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function wt(qt,Rt){const i=c("Youtube"),l=c("ExternalLinkIcon"),e=c("nobr");return d(),r("div",null,[_,t(i,{id:"dx7dO-pkGKg",citation:"This video was created by <a href='https://www.youtube.com/channel/UCzyuZJ8zZ-Lhfnz41DG5qLw'>Dani Krossing</a>"}),n("p",null,[n("a",h,[s("Operators"),t(l)]),s(" are symbols that take one or more values or expression and yields another value. There are many categories of operators, but for now we will cover the following:")]),k,b,n("p",null,[n("a",m,[s("Arithmetic operators"),t(l)]),s(" are used to perform basic arithmetic, including addition, subtraction, multiplication, and division.")]),n("table",null,[v,n("tbody",null,[n("tr",null,[g,$,n("td",f,[t(e,null,{default:a(()=>[y]),_:1})]),x]),n("tr",null,[w,q,n("td",R,[t(e,null,{default:a(()=>[O]),_:1})]),E]),n("tr",null,[T,N,n("td",U,[t(e,null,{default:a(()=>[P]),_:1})]),A]),n("tr",null,[D,I,n("td",L,[t(e,null,{default:a(()=>[S]),_:1})]),C]),n("tr",null,[H,B,n("td",M,[t(e,null,{default:a(()=>[V]),_:1})]),G])])]),z,n("div",W,[n("p",null,[n("a",K,[s("Try it yourself on Repl.it"),t(l)])])]),Y,n("p",null,[n("a",Z,[s("Assignment operators"),t(l)]),s(" are used to assign a value to a variable. The most common assignment operator is the "),F,s(". There are also combined operators which are used to perform arithmetic, array unions, and string concatenations while also assigning the value to a variable.")]),n("table",null,[J,n("tbody",null,[n("tr",null,[j,Q,n("td",X,[t(e,null,{default:a(()=>[nn]),_:1})]),sn,tn]),n("tr",null,[en,an,n("td",ln,[t(e,null,{default:a(()=>[on]),_:1})]),cn,n("td",null,[t(e,null,{default:a(()=>[pn]),_:1})])]),n("tr",null,[dn,rn,n("td",un,[t(e,null,{default:a(()=>[_n]),_:1})]),hn,n("td",null,[t(e,null,{default:a(()=>[kn]),_:1})])]),n("tr",null,[bn,mn,n("td",vn,[t(e,null,{default:a(()=>[gn]),_:1})]),$n,n("td",null,[t(e,null,{default:a(()=>[fn]),_:1})])]),n("tr",null,[yn,xn,n("td",wn,[t(e,null,{default:a(()=>[qn]),_:1})]),Rn,n("td",null,[t(e,null,{default:a(()=>[On]),_:1})])]),n("tr",null,[En,Tn,n("td",Nn,[t(e,null,{default:a(()=>[Un]),_:1})]),Pn,n("td",null,[t(e,null,{default:a(()=>[An]),_:1})])]),n("tr",null,[Dn,In,n("td",Ln,[t(e,null,{default:a(()=>[Sn]),_:1})]),Cn,n("td",null,[t(e,null,{default:a(()=>[Hn]),_:1})])])])]),Bn,n("p",null,[n("a",Mn,[s("Comparison Operators"),t(l)]),s(" are used to compare two values. When comparing values of different data types, for example, a string and a number, PHP will attempt to convert the string to a number first and then do the comparison.")]),n("table",null,[Vn,n("tbody",null,[n("tr",null,[Gn,zn,n("td",Wn,[t(e,null,{default:a(()=>[Kn]),_:1})]),Yn]),n("tr",null,[Zn,Fn,n("td",Jn,[t(e,null,{default:a(()=>[jn]),_:1})]),Qn]),n("tr",null,[Xn,ns,n("td",ss,[t(e,null,{default:a(()=>[ts]),_:1})]),es]),n("tr",null,[as,ls,n("td",os,[t(e,null,{default:a(()=>[cs]),_:1})]),is]),n("tr",null,[ps,ds,n("td",rs,[t(e,null,{default:a(()=>[us]),_:1})]),_s]),n("tr",null,[hs,ks,n("td",bs,[t(e,null,{default:a(()=>[ms]),_:1})]),vs]),n("tr",null,[gs,$s,n("td",fs,[t(e,null,{default:a(()=>[ys]),_:1})]),xs]),n("tr",null,[ws,qs,n("td",Rs,[t(e,null,{default:a(()=>[Os]),_:1})]),Es]),n("tr",null,[Ts,Ns,n("td",Us,[t(e,null,{default:a(()=>[Ps]),_:1})]),As])])]),Ds,n("div",Is,[n("p",null,[n("a",Ls,[s("Try it yourself on Repl.it"),t(l)])])]),Ss,n("p",null,[n("a",Cs,[s("Logical Operators"),t(l)]),s(" are used to combine and make more complex expressions.")]),n("table",null,[Hs,n("tbody",null,[n("tr",null,[Bs,Ms,n("td",Vs,[t(e,null,{default:a(()=>[Gs]),_:1})]),zs]),n("tr",null,[Ws,Ks,n("td",Ys,[t(e,null,{default:a(()=>[Zs]),_:1})]),Fs]),Js])]),js,n("p",null,[n("a",Qs,[s("Incrementing/Decrementing operators"),t(l)]),s(" supports pre- and post-increment and decrement operators.")]),n("table",null,[Xs,n("tbody",null,[n("tr",null,[nt,st,n("td",tt,[t(e,null,{default:a(()=>[et]),_:1})]),at]),n("tr",null,[lt,ot,n("td",ct,[t(e,null,{default:a(()=>[it]),_:1})]),pt]),n("tr",null,[dt,rt,n("td",ut,[t(e,null,{default:a(()=>[_t]),_:1})]),ht]),n("tr",null,[kt,bt,n("td",mt,[t(e,null,{default:a(()=>[vt]),_:1})]),gt])])]),$t,n("p",null,[s("PHP only supports two "),n("a",ft,[s("String Operators"),t(l)]),s(", the concatenating assignment operator ("),yt,s(") mentioned above, and the concatenation operator, which is used to combine strings.")]),xt])}const Et=p(u,[["render",wt],["__file","operators.html.vue"]]);export{Et as default};
