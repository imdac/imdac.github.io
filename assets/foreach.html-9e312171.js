import{_ as t,M as o,p,q as i,R as n,t as s,N as e,a3 as l}from"./framework-dd056dd6.js";const c={},r=n("h1",{id:"php-foreach-loop",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-foreach-loop","aria-hidden":"true"},"#"),s(" PHP foreach Loop")],-1),u={class:"watch"},d={href:"https://www.linkedin.com/learning/php-essential-training-2/foreach-loops",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.php.net/manual/en/control-structures.foreach.php",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"foreach",-1),v=l(`<p>The syntax of the <code>foreach</code> loop is a little different. First, unlike the <code>while</code> and <code>for</code> loops, there is no condition in the <code>foreach</code> loop. The <code>foreach</code> will simply continue through the array until it reaches the end. There is also no incrementing in the <code>foreach</code> loop as this is all handled by PHP.</p><p>The expression of the <code>foreach</code> loop is made up of <em>the array</em>, the keyword <code>as</code>, and <em>the value</em> of each item in the array.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>foreach ($array as $value) {
  statement;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The value of <code>$value</code> will change each time the <code>foreach</code> loop loops, as the next item&#39;s value is stored in it.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$ages</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$ages</span> <span class="token keyword">as</span> <span class="token variable">$age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Age: <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$age</span><span class="token punctuation">}</span></span> &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="working-with-associative-arrays" tabindex="-1"><a class="header-anchor" href="#working-with-associative-arrays" aria-hidden="true">#</a> Working with Associative Arrays</h2><p>The <code>foreach</code> loop can also be used with associative arrays. When working with associative arrays, it is helpful to also have each item&#39;s label or key. This is done with a slight modification to the <code>foreach</code> loop&#39;s syntax.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>foreach ($array as $key =&gt; $value) {
  statement;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Like the <code>$value</code>, the value of <code>$key</code> will change each time the <code>foreach</code> loop loops, and <code>$key</code> will received the next item&#39;s label or key.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The variables for holding the keys and values do <strong>NOT</strong> need to be <code>$key</code> and <code>$value</code>. They can be called whatever you want.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$person</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string double-quoted-string">&quot;first_name&quot;</span>   <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Kevin&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;last_name&quot;</span>   <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Skoglund&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;address&quot;</span>     <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;123 Main Street&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;city&quot;</span>        <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Beverly Hills&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;state&quot;</span>       <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;CA&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;zip_code&quot;</span>    <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;90210&quot;</span> 
  <span class="token punctuation">]</span>

  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$person</span> <span class="token keyword">as</span> <span class="token variable">$attribute</span> <span class="token operator">=&gt;</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$attr_nice</span> <span class="token operator">=</span> <span class="token function">ucwords</span><span class="token punctuation">(</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;_&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token variable">$attribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$attr_nice</span><span class="token punctuation">}</span></span>: <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$data</span><span class="token punctuation">}</span></span>&lt;br&gt;&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function g(b,m){const a=o("ExternalLinkIcon");return p(),i("div",null,[r,n("div",u,[n("p",null,[n("a",d,[s('Watch "Foreach loops" on LinkedIn Learning'),e(a)])])]),n("p",null,[s("The "),n("a",k,[h,e(a)]),s(" loop is the easiest way to iterate over arrays, especially associative arrays.")]),v])}const q=t(c,[["render",g],["__file","foreach.html.vue"]]);export{q as default};
