import{_ as c,M as p,p as i,q as r,R as n,t as s,N as a,V as e,a3 as l}from"./framework-dd056dd6.js";const u={},d=n("h1",{id:"php-operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-operators","aria-hidden":"true"},"#"),s(" PHP Operators")],-1),k={class:"watch"},_={href:"https://www.linkedin.com/learning/php-essential-training-2/logical-operators",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"An operator is a symbol that takes one or more values to yield another value. There many different types of operators including Arithmetic Operators, Comparison Operators, and Logical Operators.",-1),h=n("h2",{id:"arithmetic-operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#arithmetic-operators","aria-hidden":"true"},"#"),s(" Arithmetic Operators")],-1),v={href:"https://www.php.net/manual/en/language.operators.arithmetic.php",target:"_blank",rel:"noopener noreferrer"},m=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"Operator"),n("th",null,"Name"),n("th",{style:{"text-align":"center"}},"Example"),n("th",null,"Result")])],-1),g=n("td",{style:{"text-align":"center"}},[n("code",null,"+")],-1),$=n("td",null,"Addition",-1),f={style:{"text-align":"center"}},y=n("code",null,"$a + $b",-1),x=n("td",null,[s("Sum of "),n("code",null,"$a"),s(" and "),n("code",null,"$b")],-1),q=n("td",{style:{"text-align":"center"}},[n("code",null,"-")],-1),w=n("td",null,"Subtraction",-1),R={style:{"text-align":"center"}},E=n("code",null,"$a - $b",-1),O=n("td",null,[s("Difference of "),n("code",null,"$a"),s(" and "),n("code",null,"$b")],-1),T=n("td",{style:{"text-align":"center"}},[n("code",null,"*")],-1),U=n("td",null,"Multiplication",-1),L={style:{"text-align":"center"}},N=n("code",null,"$a * $b",-1),A=n("td",null,[s("Product of "),n("code",null,"$a"),s(" and "),n("code",null,"$b")],-1),P=n("td",{style:{"text-align":"center"}},[n("code",null,"/")],-1),I=n("td",null,"Division",-1),C={style:{"text-align":"center"}},S=n("code",null,"$a / $b",-1),V=n("td",null,[s("Divides "),n("code",null,"$a"),s(" by "),n("code",null,"$b")],-1),B=n("td",{style:{"text-align":"center"}},[n("code",null,"%")],-1),D=n("td",null,"Modulo",-1),H={style:{"text-align":"center"}},M=n("code",null,"$a % $b",-1),G=n("td",null,[s("Remainder of "),n("code",null,"$a"),s(" divided by "),n("code",null,"$b")],-1),W=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>
  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">-</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">*</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">/</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// 1.3333333333</span>
  <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">%</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),F={class:"try"},j={href:"https://repl.it/@eisenbm/PHP-Arithmetic-Operators-II",target:"_blank",rel:"noopener noreferrer"},z=n("h2",{id:"comparison-operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#comparison-operators","aria-hidden":"true"},"#"),s(" Comparison Operators")],-1),J={href:"https://www.php.net/manual/en/language.operators.comparison.php",target:"_blank",rel:"noopener noreferrer"},K=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"Operator"),n("th",null,"Name"),n("th",{style:{"text-align":"center"}},"Example"),n("th",null,"Result")])],-1),Q=n("td",{style:{"text-align":"center"}},[n("code",null,"==")],-1),X=n("td",null,"Equal",-1),Y={style:{"text-align":"center"}},Z=n("code",null,"$a == $b",-1),nn=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is equal to "),n("code",null,"$b"),s(" in value")],-1),sn=n("td",{style:{"text-align":"center"}},[n("code",null,"===")],-1),an=n("td",null,"Identical",-1),tn={style:{"text-align":"center"}},en=n("code",null,"$a === $b",-1),on=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is equal to "),n("code",null,"$b"),s(" in value and data type")],-1),ln=n("td",{style:{"text-align":"center"}},[n("code",null,"!=")],-1),pn=n("td",null,"Not Equal",-1),cn={style:{"text-align":"center"}},rn=n("code",null,"$a != $b",-1),un=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is not equal to "),n("code",null,"$b"),s(" in value")],-1),dn=n("td",{style:{"text-align":"center"}},[n("code",null,"!==")],-1),kn=n("td",null,"Not Identical",-1),_n={style:{"text-align":"center"}},bn=n("code",null,"$a !== $b",-1),hn=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is not equal to "),n("code",null,"$b"),s(" in value and data type")],-1),vn=n("td",{style:{"text-align":"center"}},[n("code",null,"<")],-1),mn=n("td",null,"Less than",-1),gn={style:{"text-align":"center"}},$n=n("code",null,"$a < $b",-1),fn=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is less than "),n("code",null,"$b")],-1),yn=n("td",{style:{"text-align":"center"}},[n("code",null,">")],-1),xn=n("td",null,"Greater than",-1),qn={style:{"text-align":"center"}},wn=n("code",null,"$a > $b",-1),Rn=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is greater than "),n("code",null,"$b")],-1),En=n("td",{style:{"text-align":"center"}},[n("code",null,"<=")],-1),On=n("td",null,"Less than or equal to",-1),Tn={style:{"text-align":"center"}},Un=n("code",null,"$a <= $b",-1),Ln=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is less than or equal to "),n("code",null,"$b")],-1),Nn=n("td",{style:{"text-align":"center"}},[n("code",null,">=")],-1),An=n("td",null,"Greater than or equal to",-1),Pn={style:{"text-align":"center"}},In=n("code",null,"$a >= $b",-1),Cn=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is greater than equal to "),n("code",null,"$b")],-1),Sn=n("td",{style:{"text-align":"center"}},[n("code",null,"<=>")],-1),Vn=n("td",null,"Spaceship",-1),Bn={style:{"text-align":"center"}},Dn=n("code",null,"$a <=> $b",-1),Hn=n("td",null,[s("Returns "),n("code",null,"0"),s(" if "),n("code",null,"$a"),s(" is equal to "),n("code",null,"$b"),n("br"),n("br"),s("Returns "),n("code",null,"1"),s(" if "),n("code",null,"$a"),s(" is greater than "),n("code",null,"$b"),n("br"),n("br"),s("Returns "),n("code",null,"-1"),s(" if "),n("code",null,"$a"),s(" is less than "),n("code",null,"$b")],-1),Mn=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">==</span> <span class="token string double-quoted-string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">===</span> <span class="token string double-quoted-string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(false)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bool(false)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// bool(false)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// bool(false)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">!==</span> <span class="token string double-quoted-string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(true)</span>

  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">&lt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$d</span> <span class="token operator">&lt;</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bool(false)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$d</span> <span class="token operator">&lt;=</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// bool(true)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$d</span> <span class="token operator">&gt;=</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// bool(true)</span>

  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;=&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// int(1)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;=&gt;</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// int(-1)</span>
  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;=&gt;</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// int(0)</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Gn={class:"try"},Wn={href:"https://repl.it/@eisenbm/PHP-Comparison-Operators",target:"_blank",rel:"noopener noreferrer"},Fn=n("h2",{id:"logical-operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#logical-operators","aria-hidden":"true"},"#"),s(" Logical Operators")],-1),jn={href:"http://php.net/manual/en/language.operators.logical.php",target:"_blank",rel:"noopener noreferrer"},zn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"Operator"),n("th",null,"Name"),n("th",{style:{"text-align":"center"}},"Example"),n("th",null,"Result")])],-1),Jn=n("td",{style:{"text-align":"center"}},[n("code",null,"!")],-1),Kn=n("td",null,"Not",-1),Qn={style:{"text-align":"center"}},Xn=n("code",null,"!$a",-1),Yn=n("td",null,[n("code",null,"TRUE"),s(" if "),n("code",null,"$a"),s(" is not "),n("code",null,"TRUE")],-1),Zn=n("td",{style:{"text-align":"center"}},[n("code",null,"&&")],-1),ns=n("td",null,"And",-1),ss={style:{"text-align":"center"}},as=n("code",null,"$a && $b",-1),ts=n("td",null,[n("code",null,"TRUE"),s(" if both "),n("code",null,"$a"),s(" and "),n("code",null,"$b"),s(" are TRUE.")],-1),es=n("tr",null,[n("td",{style:{"text-align":"center"}},"`"),n("td"),n("td",{style:{"text-align":"center"}},"`"),n("td",null,"Or")],-1),os=l(`<div class="custom-container warning"><p class="custom-container-title">Caution</p><p>It is also possible to use <code>and</code> and <code>or</code> in place of <code>&amp;&amp;</code> and <code>||</code>. But these operators have different precedence and can result in unexpected results. Review the Logical Operators documentation for more information.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

  <span class="token comment">// this condition will be FALSE</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">&gt;</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is larger than b AND &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;c is larger than d&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>

  <span class="token comment">// this condition will be TRUE</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">&gt;</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is larger than b OR &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;c is larger than d&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>

  <span class="token comment">// setting e if it is not set</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$e</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function ls(ps,cs){const o=p("ExternalLinkIcon"),t=p("nobr");return i(),r("div",null,[d,n("div",k,[n("p",null,[n("a",_,[s('Watch "Logical operators" on LinkedIn Learning'),a(o)])])]),b,h,n("p",null,[n("a",v,[s("Arithmetic operators"),a(o)]),s(" are used to perform basic arithmetic, including addition, subtraction, multiplication, and division.")]),n("table",null,[m,n("tbody",null,[n("tr",null,[g,$,n("td",f,[a(t,null,{default:e(()=>[y]),_:1})]),x]),n("tr",null,[q,w,n("td",R,[a(t,null,{default:e(()=>[E]),_:1})]),O]),n("tr",null,[T,U,n("td",L,[a(t,null,{default:e(()=>[N]),_:1})]),A]),n("tr",null,[P,I,n("td",C,[a(t,null,{default:e(()=>[S]),_:1})]),V]),n("tr",null,[B,D,n("td",H,[a(t,null,{default:e(()=>[M]),_:1})]),G])])]),W,n("div",F,[n("p",null,[n("a",j,[s("Try it yourself on Repl.it"),a(o)])])]),z,n("p",null,[n("a",J,[s("Comparison Operators"),a(o)]),s(" are used to compare two values. When comparing values of different data types, for example, a string and a number, PHP will attempt to convert the string to a number first and then do the comparison.")]),n("table",null,[K,n("tbody",null,[n("tr",null,[Q,X,n("td",Y,[a(t,null,{default:e(()=>[Z]),_:1})]),nn]),n("tr",null,[sn,an,n("td",tn,[a(t,null,{default:e(()=>[en]),_:1})]),on]),n("tr",null,[ln,pn,n("td",cn,[a(t,null,{default:e(()=>[rn]),_:1})]),un]),n("tr",null,[dn,kn,n("td",_n,[a(t,null,{default:e(()=>[bn]),_:1})]),hn]),n("tr",null,[vn,mn,n("td",gn,[a(t,null,{default:e(()=>[$n]),_:1})]),fn]),n("tr",null,[yn,xn,n("td",qn,[a(t,null,{default:e(()=>[wn]),_:1})]),Rn]),n("tr",null,[En,On,n("td",Tn,[a(t,null,{default:e(()=>[Un]),_:1})]),Ln]),n("tr",null,[Nn,An,n("td",Pn,[a(t,null,{default:e(()=>[In]),_:1})]),Cn]),n("tr",null,[Sn,Vn,n("td",Bn,[a(t,null,{default:e(()=>[Dn]),_:1})]),Hn])])]),Mn,n("div",Gn,[n("p",null,[n("a",Wn,[s("Try it yourself on Repl.it"),a(o)])])]),Fn,n("p",null,[n("a",jn,[s("Logical Operators"),a(o)]),s(" are used to combine and make more complex expressions.")]),n("table",null,[zn,n("tbody",null,[n("tr",null,[Jn,Kn,n("td",Qn,[a(t,null,{default:e(()=>[Xn]),_:1})]),Yn]),n("tr",null,[Zn,ns,n("td",ss,[a(t,null,{default:e(()=>[as]),_:1})]),ts]),es])]),os])}const rs=c(u,[["render",ls],["__file","operators.html.vue"]]);export{rs as default};
