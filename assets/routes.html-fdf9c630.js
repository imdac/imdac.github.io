import{_ as o,M as p,p as c,q as l,R as s,t as n,N as e,a3 as t}from"./framework-dd056dd6.js";const i={},u=s("h1",{id:"laravel-routes",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#laravel-routes","aria-hidden":"true"},"#"),n(" Laravel Routes")],-1),r={href:"https://laravel.com/docs/8.x/routing",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="route-file" tabindex="-1"><a class="header-anchor" href="#route-file" aria-hidden="true">#</a> Route File</h2><p>For most applications, routes will be defined in the <code>routes/web.php</code> file. Routes defined here may be accessed by entering the defined route&#39;s URL in the browser. For example, for a standard installation of the Laravel, the following route will be defined in <code>routes/web.php</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// routes/web.php</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;welcome&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This route defines what should be displayed when the user visits the website&#39;s root or home page. In this case, it will load the &#39;welcome&#39; view file. We will discuss the view in more detail later on. For now, let break down the route definition.</p><h2 id="route-definition" tabindex="-1"><a class="header-anchor" href="#route-definition" aria-hidden="true">#</a> Route Definition</h2>`,5),k=s("code",null,"Route",-1),h=s("code",null,"get",-1),v=s("code",null,"Route",-1),m={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each <code>Route</code> method takes to arguments, a URI, the path which will be entered in the browser, and a function. The return value of the function will be what will be displayed on the page. This return value could be a simple string, as shown in the following example, or it could point to a view file, which will be discussed in more detail in the next section.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/welcome&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;Hello World&#39;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="route-parameters" tabindex="-1"><a class="header-anchor" href="#route-parameters" aria-hidden="true">#</a> Route Parameters</h2>`,4),g={href:"https://laravel.com/docs/8.x/routing#route-parameters",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"{}",-1),w=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// required route parameter</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/user/{id}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;User <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$id</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// optional route parameter</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/user/{name?}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Guest&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;Hello, <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function _(x,R){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,s("p",null,[s("a",r,[n("Routing"),e(a)]),n(" is a fundamental part of any Laravel project. Routes take the URL provided by the user and determine which view or controller method to invoke.")]),d,s("p",null,[n("All routes start with call to the "),k,n(" class, which is immediately following by a static method. While in most cases, this method will be "),h,n(", the "),v,n(" has several available methods, which respond to a specific "),s("a",m,[n("HTTP request method"),e(a)]),n(". The available methods are as follows:")]),b,s("p",null,[s("a",g,[n("Route Parameters"),e(a)]),n(" allow you to capture segments of the route URI. Route parameters can be either required or optional and are always encased with braces "),f,n(". The value of the route parameter is passed to the routes callback function or the controller's method.")]),w])}const q=o(i,[["render",_],["__file","routes.html.vue"]]);export{q as default};
