import{_ as t,M as e,p as i,q as l,R as a,t as n,N as o,V as p,a3 as c}from"./framework-dd056dd6.js";const r={},d=a("h1",{id:"using-a-template",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#using-a-template","aria-hidden":"true"},"#"),n(" Using a Template")],-1),u=c(`<h2 id="creating-a-template" tabindex="-1"><a class="header-anchor" href="#creating-a-template" aria-hidden="true">#</a> Creating a Template</h2><p>Using template literals, it is possible to create an HTML template, complete with white space, tabs, and carriage returns.</p><p>For example, if we wanted to create an HTML unordered list of animals with a title, we do so with a template literal.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;h2&gt;Animals&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;cat&lt;/li&gt;
  &lt;li&gt;dog&lt;/li&gt;
  &lt;li&gt;mouse&lt;/li&gt;
&lt;/ul&gt;</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creating-a-template-with-variables" tabindex="-1"><a class="header-anchor" href="#creating-a-template-with-variables" aria-hidden="true">#</a> Creating a Template with Variables</h2><p>With the interpolation syntax (<code>\${...}</code>), we can create placeholders in place of the text. Then using variables we can recreate the HTML.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token string">&#39;Animals&#39;</span>
<span class="token keyword">const</span> animal1 <span class="token operator">=</span> <span class="token string">&#39;cat&#39;</span>
<span class="token keyword">const</span> animal2 <span class="token operator">=</span> <span class="token string">&#39;dog&#39;</span>
<span class="token keyword">const</span> animal3 <span class="token operator">=</span> <span class="token string">&#39;mouse&#39;</span>

<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;h2&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>animal1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
  &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>animal2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
  &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>animal3<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
&lt;/ul&gt;</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="insert-the-template" tabindex="-1"><a class="header-anchor" href="#insert-the-template" aria-hidden="true">#</a> Insert the Template</h2><p>Just with a string, we can insert a template using either <code>innerHTML</code> or <code>insertAdjacentHTML()</code> depending on the situation.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token string">&#39;Animals&#39;</span>
<span class="token keyword">const</span> animal1 <span class="token operator">=</span> <span class="token string">&#39;cat&#39;</span>
<span class="token keyword">const</span> animal2 <span class="token operator">=</span> <span class="token string">&#39;dog&#39;</span>
<span class="token keyword">const</span> animal3 <span class="token operator">=</span> <span class="token string">&#39;mouse&#39;</span>

<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;h2&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>animal1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
  &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>animal2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
  &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>animal3<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
&lt;/ul&gt;</span><span class="token template-punctuation string">\`</span></span>

<span class="token keyword">const</span> $list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">)</span>
$list<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),m=a("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"HTML Creation - Using a Template",src:"https://codepen.io/IMD/embed/eYZRYPK?height=265&theme-id=light&default-tab=result",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/eYZRYPK'>HTML Creation - Using a Template</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1);function g(k,v){const s=e("RouterLink");return i(),l("div",null,[d,a("p",null,[n("With the introduction of "),o(s,{to:"/modules/js/js-variables/strings.html#template-literals"},{default:p(()=>[n("Template Literals")]),_:1}),n(", creating HTML has become much easier for novice developers, because Template Literals allow the developer to create HTML in JavaScript that looks and feels like writing in an HTML file.")]),u,m])}const b=t(r,[["render",g],["__file","using-a-template.html.vue"]]);export{b as default};
