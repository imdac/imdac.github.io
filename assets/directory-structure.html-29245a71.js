import{_ as t,M as i,p as o,q as a,R as e,t as s,N as n,a3 as d}from"./framework-dd056dd6.js";const c={},h=d(`<h1 id="directory-structure" tabindex="-1"><a class="header-anchor" href="#directory-structure" aria-hidden="true">#</a> Directory Structure</h1><p>After Vue CLI, successfully generates the project, the project folder should have a directory structure that looks similar to this:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- node_modules
- public
  |- favicon.ico
  |- index.html
- src
  |- assets
  |- components
    |- HelloWorld.vue
  |- router
    |- index.js
  |- views
    |- About.vue
    |- Home.vue
  |- App.vue
  |- main.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>Your may directory structure may look slightly different depending on which dependencies and plugins you have included with your project.</p></div><p>Having all these files and directories can seem a little overwhelming at first, but each directory has its purpose and we will walk through each one.</p><h2 id="the-node-modules-directory" tabindex="-1"><a class="header-anchor" href="#the-node-modules-directory" aria-hidden="true">#</a> The node_modules Directory</h2><p>The <code>node_modules</code> directory contains all of the npm packages needed for your application to run. Every time you run the command<code> npm install some-package</code>; the package <code>some-package</code> will download and be stored in this folder. From here, you can <code>import</code> dependencies into your Vue.js project or reference them manually in an HTML page.</p><h2 id="the-public-directory" tabindex="-1"><a class="header-anchor" href="#the-public-directory" aria-hidden="true">#</a> The public Directory</h2><p>The <code>public</code> directory is the public facing part of your site and is what the user will have access to when they visit your site. By default, this directory will contains your <code>index.html</code> file. The <code>index.html</code> is, like on most other web page, is the default starting point for the your Vue application and every part of your Vue app gets bootstrapped and injected into it. The <code>public</code> directory may also contain the <code>favicon.ico</code> image.</p><h2 id="the-src-directory" tabindex="-1"><a class="header-anchor" href="#the-src-directory" aria-hidden="true">#</a> The src Directory</h2><p>The <code>src</code> directory is the most important directory in the whole project. This directory will contain a majority of your files that makes up your project. This includes single file components, stylesheets, assets and more. From the diagram above, we also know that the <code>src</code> directory contains directories of its own. We will look at those directories now.</p><h3 id="the-assets-directory" tabindex="-1"><a class="header-anchor" href="#the-assets-directory" aria-hidden="true">#</a> The assets Directory</h3><p>The <code>src/assets</code> directory is used to store your application&#39;s assets like images and stylesheets. Such assets could be placed in the <code>public</code> directory, but there are benefits to keeping them in the <code>src/assets</code> directory.</p><h3 id="the-components-directory" tabindex="-1"><a class="header-anchor" href="#the-components-directory" aria-hidden="true">#</a> The components Directory</h3><p>The <code>src/components</code> directory is where the your application&#39;s component files will be stored. Component files are single <code>.vue</code> files which contain all the of code including HTML template, JavaScript and CSS necessary for the component.</p><h3 id="the-router-directory" tabindex="-1"><a class="header-anchor" href="#the-router-directory" aria-hidden="true">#</a> The router Directory</h3><p>The <code>router</code> directory is for router files. These files define your URL routes and which component gets loaded when the URL address is visited.</p><h3 id="the-store-directory" tabindex="-1"><a class="header-anchor" href="#the-store-directory" aria-hidden="true">#</a> The store Directory</h3><p>The <code>store</code> directory is for Vuex stores.</p><h3 id="the-views-directory" tabindex="-1"><a class="header-anchor" href="#the-views-directory" aria-hidden="true">#</a> The views Directory</h3><p>The <code>views</code> directory, as the name suggests, will contain view files, which single file components that act as &quot;pages&quot; or containers that structure their child components.</p><h3 id="app-vue" tabindex="-1"><a class="header-anchor" href="#app-vue" aria-hidden="true">#</a> App.vue</h3><p>The <code>App.vue</code> file is a single component in which all other views and components get injected into. This is a great place to add global components that should be shared across the app like <code>Header.vue</code> and <code>Footer.vue</code>.</p><h3 id="main-js" tabindex="-1"><a class="header-anchor" href="#main-js" aria-hidden="true">#</a> Main.js</h3><p>The <code>main.js</code> file is your single Vue Instance in which the App.vue, routes, and all their components get injected into.</p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2>`,26),l={href:"https://www.oreilly.com/library/view/vuejs-understanding-its/9781939902597/",target:"_blank",rel:"noopener noreferrer"};function u(p,m){const r=i("ExternalLinkIcon");return o(),a("div",null,[h,e("ul",null,[e("li",null,[e("a",l,[s("Vue.js: Understanding its Tools and Ecosystem"),n(r)])])])])}const v=t(c,[["render",u],["__file","directory-structure.html.vue"]]);export{v as default};
