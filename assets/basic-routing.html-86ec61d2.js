import{_ as o,M as i,p,q as c,R as n,t as s,N as e,a3 as t}from"./framework-dd056dd6.js";const l={},u=n("h1",{id:"laravel-basic-routing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#laravel-basic-routing","aria-hidden":"true"},"#"),s(" Laravel Basic Routing")],-1),r={class:"watch"},d={href:"https://laracasts.com/series/laravel-6-from-scratch/episodes/5",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>For most applications, routes will be defined in the <code>routes/web.php</code> file. Routes defined here may be accessed by entering the defined route&#39;s URL in the browser. A standard installation of the Laravel the following route will defined in <code>routes/web.php</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// routes/web.php</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;welcome&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What this route is doing is defining what should displayed when the user visit the web site root or home page. In this case will load the &#39;welcome&#39; view file. We will discuss view in more detail later on. For now, let break down the route definition.</p><h2 id="route-definition" tabindex="-1"><a class="header-anchor" href="#route-definition" aria-hidden="true">#</a> Route Definition</h2>`,4),k=n("code",null,"Route",-1),v=n("code",null,"get",-1),m=n("code",null,"Route",-1),b={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each <code>Route</code> method takes to arguments, a URI, the path the which will be enter in the browser, and a function. The return value of the function will be what will be displayed on the page. This return value could be a simple string, as shown in the following example or it could point to a view file, which will be discussed in more detail in the next section.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/welcome&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;Hello World&#39;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="routes-to-a-view" tabindex="-1"><a class="header-anchor" href="#routes-to-a-view" aria-hidden="true">#</a> Routes to a View</h2>`,4),w={href:"https://laravel.com/docs/6.x/views",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"resources/views",-1),_=n("code",null,".blade.php",-1),x=n("code",null,"view",-1),R={href:"https://laravel.com/docs/6.x/helpers#method-view",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"view",-1),T=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/welcome&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;welcome&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),$={href:"https://laravel.com/docs/6.x/routing#view-routes",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"view",-1),L=n("code",null,"Route",-1),W=n("code",null,"view",-1),B=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/welcome&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;welcome&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Both of the examples above produce the same result.</p>`,2);function I(V,N){const a=i("ExternalLinkIcon");return p(),c("div",null,[u,n("div",r,[n("p",null,[n("a",d,[s('Watch "Basic Routing and Views" on Laracasts'),e(a)])])]),h,n("p",null,[s("All routes start with call to the "),k,s(" class, which is immediately following by a static method. While in most cases, this method will be "),v,s(", the "),m,s(" has several available methods, which respond to a specific "),n("a",b,[s("HTTP request method"),e(a)]),s(". The available methods are as follows:")]),g,n("p",null,[n("a",w,[s("Views"),e(a)]),s(" are a separate file that contain the HTML that will be displayed on the page. These files can be found in the "),f,s(" directory. Traditionally, views are Blade files ("),_,s("), which is Laravel's templating engine. We will discuss views in more details later on in this course.")]),n("p",null,[s("Routes can be set to point directly to a view. This can be done using the "),x,s(" helper function inside of the callback function. The "),n("a",R,[y,e(a)]),s(" helper function is used to retrieve a view instance. It takes the name of the view as its first argument and an optional second argument as the data array.")]),T,n("p",null,[s("Another approach for loading a view is to use the "),n("a",$,[q,e(a)]),s(" method of the "),L,s(" class. The "),W,s(" method accepts a URI as its first argument and a view name as its second argument. In addition, an optional third argument may be used to pass data to the view. We will discuss feature on the next page.")]),B])}const H=o(l,[["render",I],["__file","basic-routing.html.vue"]]);export{H as default};
