import{_ as o,M as r,p as i,q as l,R as e,t as a,N as n,a3 as s}from"./framework-dd056dd6.js";const d={},c=s(`<h1 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> HTML</h1><p>HyperText Markup Language provides the foundation of the web by giving structure and meaning to the content it describes. The information presented to you in a browser is contained in HTML documents.</p><p>HTML uses markup in the form of elements or tags to represent structure and meaning. A collection of elements in a file forms a page that is rendered in a browser.</p><p>In other words, HTML documents are plain text documents that can be created using any text editor. The text is marked up using elements or tags to present different type of content such as <code>&lt;p&gt;&lt;/p&gt;</code> for paragraphs, <code>&lt;h1&gt;&lt;/h1&gt;</code>, <code>&lt;h2&gt;&lt;/h2&gt;</code>, <code>&lt;h3&gt;&lt;/h3&gt;</code> for headings and more. These elements or tags are read by the browser and then displayed accordingly.</p><ul><li>HTML is used to give logical structure to a document&#39;s content</li><li>HTML comprises of various standard tags, these tags only provide structure to the content and does not style it</li><li>Each tag is interpreted by the browser and the content of the tags are styled accordingly</li><li>HTML Documents are saved using .html extension</li></ul><h2 id="what-is-a-tag" tabindex="-1"><a class="header-anchor" href="#what-is-a-tag" aria-hidden="true">#</a> What is a tag ?</h2><p>HTML tags have the following structure: less than “&lt;”, some text “p”, greater than “&gt;” <code>&lt;p&gt;</code> - this is called a p tag or paragraph tag.</p><h3 id="types-of-tags" tabindex="-1"><a class="header-anchor" href="#types-of-tags" aria-hidden="true">#</a> Types of Tags</h3><p>There are two main types of tags, Paired and Singular</p><h4 id="paired" tabindex="-1"><a class="header-anchor" href="#paired" aria-hidden="true">#</a> Paired</h4><p>Has an opening tag <code>&lt;p&gt;</code> and a closing tag <code>&lt;/p&gt;</code> and the content is added in between the opening and closing tags</p><p>Note: Closing tag has a forward-slash <code>/</code> in the tag before the tag name</p><p>Example: paragraph <code>&lt;p&gt;Paragraph of text&lt;/p&gt;</code>, important text <code>&lt;strong&gt;Text here&lt;/strong&gt;</code></p><p>In Correct : <code>&lt;p&gt;&lt;/p&gt;Paragraph of text</code> Since the text is not contained in between the opening and closing tags</p><p><strong>Closing Order</strong> If we have tags inside other tags, we close them in the opposite order of opening them. From the example above we can have a paragraph that contains the important text:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
  This is normal text in the paragraph. 
  Also, we want to say this is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>important text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you notice in the example we open the tags and close them in reverse order <code>&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;</code></p><h4 id="singular" tabindex="-1"><a class="header-anchor" href="#singular" aria-hidden="true">#</a> Singular</h4><p>The Singular tags are the once that does not need to be closed, they are also referred to as self closing tags.</p><p>These tags to not have any content.</p><p>Example: line break <code>&lt;br&gt;</code>, horizontal rule <code>&lt;hr&gt;</code></p><p>Example: Structure of an HTML page</p>`,22),p={href:"https://developer.mozilla.org/en-US/docs/Web/HTML",target:"_blank",rel:"noopener noreferrer"},h=e("br",null,null,-1),g={href:"https://www.w3.org/standards/webdesign/htmlcss",target:"_blank",rel:"noopener noreferrer"},u=s(`<h2 id="space-in-html-documents" tabindex="-1"><a class="header-anchor" href="#space-in-html-documents" aria-hidden="true">#</a> Space in HTML Documents</h2><p>HTML renders any additional space to one single space. Is we add multiple spaces in between words or multiple line breaks all the space will be converted into a single space when the page is rendered in the browser.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello             World!



This is HTML.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The output of the above will be <code>Hello World! This is HTML.</code></p>`,4);function m(f,b){const t=r("ExternalLinkIcon");return i(),l("div",null,[c,e("p",null,[e("a",p,[a("HTML Basics on MDN"),n(t)]),h,e("a",g,[a("W3C What is"),n(t)])]),u])}const x=o(d,[["render",m],["__file","index.html.vue"]]);export{x as default};
