import{_ as t,M as o,p,q as i,R as n,t as s,N as e,a3 as l}from"./framework-dd056dd6.js";const c={},r=n("h1",{id:"php-variable-scope",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-variable-scope","aria-hidden":"true"},"#"),s(" PHP Variable Scope")],-1),d={class:"watch"},u={href:"https://www.linkedin.com/learning/php-essential-training-2/scope-and-global-variables",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.php.net/manual/en/language.variables.scope.php",target:"_blank",rel:"noopener noreferrer"},b=l(`<p>PHP has two types of scope, <strong>global scope</strong> and <strong>local scope</strong>. Variables defined inside a function are in <strong>local scope</strong> and are only accessible inside the function. Variables defined outside of a function is in <strong>global scope</strong> and are accessible everywhere except inside of a function.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// global scope</span>

  <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment">// local scope</span>
  <span class="token punctuation">}</span>

  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NULL</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If a global variable needs to be used in the a function, the variable must be defined inside the function using the <code>global</code> keyword. This ensure access to the global variable instead of the local one.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// global scope</span>

  <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">global</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment">// global scope</span>

    <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment">// global scope</span>
  <span class="token punctuation">}</span>

  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int(1)</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>Use the <code>global</code> keyword and <em>global variables</em> with caution. It is often better to use parameters than to rely on global variables.</p></div>`,5),k={class:"try"},m={href:"https://repl.it/@eisenbm/PHP-Variable-Scope",target:"_blank",rel:"noopener noreferrer"};function h(g,f){const a=o("ExternalLinkIcon");return p(),i("div",null,[r,n("div",d,[n("p",null,[n("a",u,[s('Watch "Scope and global variables" on LinkedIn Learning'),e(a)])])]),n("p",null,[s("Now that we are working with functions, there is a concept that must discussed, variable scope. "),n("a",v,[s("Variable scope"),e(a)]),s(" refers to the context in which a variable was defined where it is visible.")]),b,n("div",k,[n("p",null,[n("a",m,[s("Try it yourself on Repl.it"),e(a)])])])])}const w=t(c,[["render",h],["__file","scope.html.vue"]]);export{w as default};
