import{_ as r,M as a,p as s,q as l,R as e,t,N as n}from"./framework-dd056dd6.js";const i={},h=e("h1",{id:"overflow",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overflow","aria-hidden":"true"},"#"),t(" Overflow")],-1),d={href:"https://css-tricks.com/almanac/properties/o/overflow/",target:"_blank",rel:"noopener noreferrer"},c=e("p",null,"By default, our elements naturally expand to the heights of all nested elements. The .content-container element here is centered at the screen with a maximum width of the image. It's got a big red border around it and surrounds both the content and the image inside.",-1),f=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"CSS Overflow",src:"//codepen.io/IMD/embed/VjwXBW/?height=265&theme-id=0&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/VjwXBW/'>CSS Overflow</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),p=e("p",null,"If we want the container to only take up the height of the image, we can set a fixed height on the .content-container. This doesn't quite work, .content-container element's height is 332px, but the paragraph inside breaks outside of that height.",-1),w=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"CSS Overflow",src:"//codepen.io/IMD/embed/RRwMYj/?height=265&theme-id=0&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/RRwMYj/'>CSS Overflow</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),u=e("p",null,"Now that we have a fixed height on the .content-container but, the content of the container is overflowing we can control the display of this overflowing content.",-1),m=e("h2",{id:"overflow-hidden",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overflow-hidden","aria-hidden":"true"},"#"),t(" Overflow: hidden")],-1),b={href:"https://css-tricks.com/almanac/properties/o/overflow/",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"overflow: hidden;",-1),v=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"CSS Overflow",src:"//codepen.io/IMD/embed/PzoRye/?height=265&theme-id=0&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/PzoRye/'>CSS Overflow</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),g=e("h2",{id:"overflow-scroll",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overflow-scroll","aria-hidden":"true"},"#"),t(" Overflow: Scroll")],-1),y=e("p",null,"We can set scroll bars for the overflowing content. This is a helpful technique for limited space.",-1),I=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"CSS Overflow",src:"//codepen.io/IMD/embed/WxNzaL/?height=265&theme-id=0&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/WxNzaL/'>CSS Overflow</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),x=e("h2",{id:"overflow-y-scroll",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overflow-y-scroll","aria-hidden":"true"},"#"),t(" Overflow-y: scroll")],-1),M=e("p",null,"Even though the width of the content fits inside our .content-container element a disabled scroll bar is attached for left and right. The overflow: scroll style assigns scroll bars to both top and bottom and left and right. We can specifically set a scroll-bar to only the top and bottom.",-1),D=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"CSS Overflow",src:"//codepen.io/IMD/embed/ZOExZY/?height=265&theme-id=0&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/ZOExZY/'>CSS Overflow</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),S=e("h2",{id:"overflow-x-scroll",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overflow-x-scroll","aria-hidden":"true"},"#"),t(" Overflow-x: scroll")],-1),O=e("p",null,"Vice versa to the top/bottom scroll bar with overflow-y, we can set a scroll bar and for left/right. In this example we've assembled a variety of slides inside a content-container and we can scroll left and right between the elements.",-1),C=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"Overflow-x",src:"//codepen.io/IMD/embed/JKjLVE/?height=265&theme-id=0&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/JKjLVE/'>Overflow-x</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),P=e("h2",{id:"example-overflow-with-position",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#example-overflow-with-position","aria-hidden":"true"},"#"),t(" Example: Overflow with Position")],-1),k=e("p",null,"In this example we are using position to move the grey box out of the containing element and then brining it back in the containing element on hover. CSS Transition property is used for smooth transition of the position left value.",-1),E=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"Overflow and Position",src:"https://codepen.io/IMD/embed/vYKXaYa?height=265&theme-id=dark&default-tab=css,result",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/vYKXaYa'>Overflow and Position</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1);function T(V,Y){const o=a("ExternalLinkIcon");return s(),l("div",null,[h,e("p",null,[e("a",d,[t("CSS Overflow"),n(o)]),t(" is a flexible CSS property that allows us to assign scroll bars to content and visibly hide elements outside of fixed widths. This is useful for sliders, embed-able feeds of content, and neat parallax effects.")]),c,f,p,w,u,m,e("p",null,[t("To hide the overflowing content, or any other content below our fixed height, we can set the "),e("a",b,[t("css overflow property"),n(o)]),t(" to hidden. "),_]),v,g,y,I,x,M,D,S,O,C,P,k,E])}const R=r(i,[["render",T],["__file","index.html.vue"]]);export{R as default};
