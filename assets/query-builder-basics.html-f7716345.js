import{_ as o,M as i,p,q as c,R as s,t as n,N as e,a3 as t}from"./framework-dd056dd6.js";const l={},r=s("h1",{id:"query-builder-basics",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#query-builder-basics","aria-hidden":"true"},"#"),n(" Query Builder Basics")],-1),d={class:"watch"},u={href:"https://laracasts.com/series/laravel-6-from-scratch/episodes/9",target:"_blank",rel:"noopener noreferrer"},h=s("h2",{id:"connecting-to-a-database",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#connecting-to-a-database","aria-hidden":"true"},"#"),n(" Connecting to a Database")],-1),k={href:"https://laravel.com/docs/6.x/configuration#environment-configuration",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>To update the database settings, open the <code>.env</code> file in the root directory of your Laravel project, and then find and update the following lines with your specific database settings:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="query-builder" tabindex="-1"><a class="header-anchor" href="#query-builder" aria-hidden="true">#</a> Query Builder</h2>`,3),b={href:"https://laravel.com/docs/6.x/queries",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.php.net/manual/en/book.pdo.php",target:"_blank",rel:"noopener noreferrer"},g=s("h3",{id:"adding-the-db-facade",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#adding-the-db-facade","aria-hidden":"true"},"#"),n(" Adding the DB facade")],-1),f=s("code",null,"DB",-1),_={href:"https://laravel.com/docs/6.x/facades",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"use",-1),w=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>DB</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="retrieving-results" tabindex="-1"><a class="header-anchor" href="#retrieving-results" aria-hidden="true">#</a> Retrieving results</h3><h4 id="retrieving-all-rows" tabindex="-1"><a class="header-anchor" href="#retrieving-all-rows" aria-hidden="true">#</a> Retrieving all rows</h4>`,3),x={href:"https://laravel.com/docs/6.x/queries#retrieving-results",target:"_blank",rel:"noopener noreferrer"},B=s("code",null,"table",-1),q=s("code",null,"table",-1),D=s("code",null,"get",-1),T=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>DB</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Show a list of all of the application&#39;s users.
     *
     * <span class="token keyword">@return</span> <span class="token class-name">Response</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user.index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;users&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$users</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>get</code> method returns a <strong>collection</strong> containing the results as objects. Each column of each row is a property of the object.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$users</span> <span class="token keyword">as</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="retrieve-a-single-row" tabindex="-1"><a class="header-anchor" href="#retrieve-a-single-row" aria-hidden="true">#</a> Retrieve a single row</h4><p>To retrieve just a single row, the <code>first</code> method may be used instead of the the <code>get</code> method. The <code>first</code> method will return a single row object.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To retrieve a single row by its <code>id</code>, use the <code>find</code> method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function C(S,N){const a=i("ExternalLinkIcon");return p(),c("div",null,[r,s("div",d,[s("p",null,[s("a",u,[n('Watch "Setup a Database Connection" on Laracasts'),e(a)])])]),h,s("p",null,[n("Laravel simplifies the connection to a database by including the connection out of the box. The configuration setting for the database can be viewed and updated in the "),s("a",k,[n("environment configuration"),e(a)]),n(" file.")]),v,s("p",null,[n("Laravel's "),s("a",b,[n("query builder"),e(a)]),n(" is a convenient way to create and run database queries. Built off of the "),s("a",m,[n("PDO interface"),e(a)]),n(", query builder has all the power you would expect, but with an even simpler interface.")]),g,s("p",null,[n("Query builder uses the "),f,n(),s("a",_,[n("facade"),e(a)]),n(" for many of its commands. Laravel does not make facades available by default, so we do need to add it to the page before we can use it. That is accomplished using the "),y,n(" statement.")]),w,s("p",null,[n("To "),s("a",x,[n("retrieve results"),e(a)]),n(" using query builder, you may use the "),B,n(" method. The "),q,n(" method returns an instance of the specified table in which constraints can be applied. The "),D,n(" method is use to retrieve the final results.")]),T])}const A=o(l,[["render",C],["__file","query-builder-basics.html.vue"]]);export{A as default};
