import{_ as i,M as o,p as l,q as c,N as a,R as n,t as s,a3 as t}from"./framework-dd056dd6.js";const r={},u=n("h1",{id:"php-loops",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-loops","aria-hidden":"true"},"#"),s(" PHP Loops")],-1),d=n("p",null,"Loops are used to carry out repetitive tasks or to repeat a block code until a specific number of times or until conditional has been met. Loops can be an effective way to make your code more efficient, less error-prone, and easier to maintain.",-1),k=n("p",null,"In PHP, there are the following loops:",-1),h=n("ul",null,[n("li",null,"while"),n("li",null,"do while"),n("li",null,"for"),n("li",null,"foreach")],-1),m={href:"https://www.php.net/manual/en/control-structures.for.php",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"for",-1),b={href:"https://www.php.net/manual/en/control-structures.foreach.php",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"foreach",-1),f={href:"https://www.php.net/manual/en/control-structures.while.php",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"while",-1),y=n("p",null,"The type of loop that you use will depend on the task that you are trying to complete. Often you can use more than one kind of loop without any performance difference. However, there is usually a better choice as to which kind of loop you use.",-1),_=n("h2",{id:"while",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#while","aria-hidden":"true"},"#"),s(" while")],-1),q={href:"https://www.php.net/manual/en/control-structures.while.php",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"while",-1),$=n("code",null,"while",-1),T=n("code",null,"if",-1),P=n("em",null,"while",-1),N=n("code",null,"TRUE",-1),H=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token comment">// output 1 to 10</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$count</span><span class="token punctuation">}</span></span>, &quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$count</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// increment by 1</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, there are two important parts of the loop. The first is that a loop must have a condition and two, something about that condition has to change during the course of the loop. If it does not, then the result will be an infinite loop.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token comment">// This will create an infinite loop</span>
  <span class="token comment">// because $count will always be less than 10</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token variable">$count</span></span> &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">NOTE</p><p>While it will not create an error, an infinite loop will cause your program to get stuck and eventually fail. It is important to avoid infinite loops.</p></div><p>The <code>while</code> loop typically used when the number of iteration is unknown or random. For example, flipping a coin until you get heads may take only 1 try or it might take 100 tries. The number of tries is unknown.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$coin</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token comment">// keep looping until $coin === 0</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$coin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// randomly choose a number between 0 and 1</span>
    <span class="token variable">$coin</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$coin</span><span class="token punctuation">}</span></span> &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>While loops are also often used in conjunction with reading a recordset from a database query or reading the contents of a text file. As long as PHP is able to continue fetching records from the recordset or reading lines from the text file then the loop continues. As soon as the function fails then the loop stops. You can also put a <code>break</code> command inside the loop, wrapped in an if statement. The <code>break</code> command will force PHP to exit from the loop.</p><h2 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h2>`,8),L={href:"https://www.php.net/manual/en/control-structures.for.php",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"for",-1),I=t(`<p>The three expressions are as follows:</p><ol><li>The <em><strong>initialization</strong></em> of the iterator</li><li>The <em><strong>condition</strong></em>, which is checked before each loop to see if the loop should continue</li><li>The <em><strong>iteration</strong></em> of the iterator</li></ol><p>The statement is enclosed in a set of curly braces (<code>{}</code>) and is executed each the statement loops as long as the <em><strong>condition</strong></em> evaluates to true.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>for (initialization; condition; iteration) {
  statement;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The structure of the <code>for</code> loop is similar to the example used when discussing the <code>while</code> loop. In the following example, a <code>while</code> loop is used to output 1 to 10.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// initialization </span>

  <span class="token comment">// output 1 to 10</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// condition</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$count</span><span class="token punctuation">}</span></span>, &quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$count</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// iteration</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This same task can be done using the the <code>for</code> loop</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// output 1 to 10</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$count</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$count</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$count</span><span class="token punctuation">}</span></span>, &quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>for</code> loop can be used to iterate over an indexed array. This is accomplished by initializing the variable to serve as the array index, and the condition will be as long as the index is less than the number of items in the array. The <code>count()</code> function can be used to get the number of items in an array.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$ages</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$numOfItems</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$ages</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$index</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$index</span> <span class="token operator">&lt;</span> <span class="token variable">$numOfItems</span><span class="token punctuation">;</span> <span class="token variable">$index</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$ages</span><span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The above example only works with indexed arrays. For associative arrays, use the <code>foreach</code> loop.</p></div><h2 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> foreach</h2>`,12),E={href:"https://www.php.net/manual/en/control-structures.foreach.php",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"foreach",-1),A=t(`<p>The syntax of the <code>foreach</code> loop is a little different. First, unlike the <code>while</code> and <code>for</code> loops, there is no condition in the <code>foreach</code> loop. The <code>foreach</code> will simply continue through the array until it reaches the end. There is also no incrementing in the <code>foreach</code> loop as this is all handled by PHP.</p><p>The expression of the <code>foreach</code> loop is made up of <em>the array</em>, the keyword <code>as</code>, and <em>the value</em> of each item in the array.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>foreach ($array as $value) {
  statement;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The value of <code>$value</code> will change each time the <code>foreach</code> loop loops, as the next item&#39;s value is stored in it.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$ages</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$ages</span> <span class="token keyword">as</span> <span class="token variable">$age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Age: <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$age</span><span class="token punctuation">}</span></span> &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>foreach</code> loop can also be used with associative arrays. When working with associative arrays, it is helpful to also have each item&#39;s label or key. This is done with a slight modification to the <code>foreach</code> loop&#39;s syntax.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>foreach ($array as $key =&gt; $value) {
  statement;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Like the <code>$value</code>, the value of <code>$key</code> will change each time the <code>foreach</code> loop loops, and <code>$key</code> will received the next item&#39;s label or key.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The variables for holding the keys and values do <strong>NOT</strong> need to be <code>$key</code> and <code>$value</code>. They can be called whatever you want.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$person</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string double-quoted-string">&quot;first_name&quot;</span>   <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Kevin&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;last_name&quot;</span>   <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Skoglund&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;address&quot;</span>     <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;123 Main Street&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;city&quot;</span>        <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Beverly Hills&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;state&quot;</span>       <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;CA&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;zip_code&quot;</span>    <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;90210&quot;</span> 
  <span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$person</span> <span class="token keyword">as</span> <span class="token variable">$attribute</span> <span class="token operator">=&gt;</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$attr_nice</span> <span class="token operator">=</span> <span class="token function">ucwords</span><span class="token punctuation">(</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;_&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token variable">$attribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$attr_nice</span><span class="token punctuation">}</span></span>: <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$data</span><span class="token punctuation">}</span></span>&lt;br&gt;&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function B(V,C){const p=o("Youtube"),e=o("ExternalLinkIcon");return l(),c("div",null,[u,a(p,{id:"nGLvamg0efM",citation:"This video was created by <a href='https://www.youtube.com/channel/UCzyuZJ8zZ-Lhfnz41DG5qLw'>Dani Krossing</a>"}),d,k,h,n("p",null,[n("a",m,[v,a(e)]),s(" loop, the "),n("a",b,[g,a(e)]),s(" loop, and the "),n("a",f,[w,a(e)]),s(" loop.")]),y,_,n("p",null,[s("The "),n("a",q,[x,a(e)]),s(" loop is the simplest type of loop in PHP. The "),$,s(" loop, like an "),T,s(" statement, is made up of a condition and a block of code. Now, "),P,s(" the condition is "),N,s(" the loop will continue to execute the block of code.")]),H,n("p",null,[s("The "),n("a",L,[z,a(e)]),s(" loop is the most complex loop in PHP. The loop consists of three expressions separated by semi-colons and enclosed in parentheses and statements.")]),I,n("p",null,[s("The "),n("a",E,[O,a(e)]),s(" loop is the easiest way to iterate over arrays, especially associative arrays.")]),A])}const M=i(r,[["render",B],["__file","index.html.vue"]]);export{M as default};
