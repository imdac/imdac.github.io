import{_ as p,M as o,p as l,q as i,N as n,R as s,t as a,a3 as e}from"./framework-dd056dd6.js";const r={},d=s("h1",{id:"group-by-clause",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#group-by-clause","aria-hidden":"true"},"#"),a(" GROUP BY Clause")],-1),u=e('<p>The <code>GROUP BY</code> clause can be used with Aggregate Functions to group the result by one or more columns. The effect of using the <code>GROUP BY</code> clause on the results of an Aggregate Function will include a separate row for each group with the aggregate calculation occurring only for the data related to that group.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Get the total number of movies for each year</span>\n<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">`</span>total<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span>\n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span>\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),k={class:"try"},m={href:"https://www.db-fiddle.com/f/9aHVRFHBmuc7eAg3Vt2ySQ/0",target:"_blank",rel:"noopener noreferrer"},g=e(`<p>It is possible to group rows across multiple tables using the <code>INNER JOIN</code> clause with the <code>GROUP BY</code> clause.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Get the total number of movies for each genre title</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>movie_id<span class="token punctuation">)</span> <span class="token keyword">as</span> total<span class="token punctuation">,</span> g<span class="token punctuation">.</span>genre_title
<span class="token keyword">FROM</span> movies <span class="token keyword">AS</span> m <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> genres <span class="token keyword">AS</span> g
<span class="token keyword">ON</span> m<span class="token punctuation">.</span>genre_id <span class="token operator">=</span> g<span class="token punctuation">.</span>genre_id
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> g<span class="token punctuation">.</span>genre_title<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),v={class:"try"},h={href:"https://www.db-fiddle.com/f/9aHVRFHBmuc7eAg3Vt2ySQ/1",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>When using aggregate functions, for every column that you wish to display beyond the aggregate column, it must also be added as a <code>GROUP BY</code> column. It is also possible to filter the results by using the <code>WHERE</code> clause.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Get the total number of movies before the year 2000 </span>
<span class="token comment">-- for each genre title and directors ordered by the total number of movies</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>movie_id<span class="token punctuation">)</span> <span class="token keyword">as</span> total<span class="token punctuation">,</span> g<span class="token punctuation">.</span>genre_title<span class="token punctuation">,</span> m<span class="token punctuation">.</span>director
<span class="token keyword">FROM</span> movies <span class="token keyword">AS</span> m <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> genres <span class="token keyword">AS</span> g
<span class="token keyword">ON</span> m<span class="token punctuation">.</span>genre_id <span class="token operator">=</span> g<span class="token punctuation">.</span>genre_id
<span class="token keyword">WHERE</span> m<span class="token punctuation">.</span><span class="token keyword">year</span> <span class="token operator">&lt;</span> <span class="token number">2000</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> g<span class="token punctuation">.</span>genre_title<span class="token punctuation">,</span> m<span class="token punctuation">.</span>director
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> total <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b={class:"try"},f={href:"https://www.db-fiddle.com/f/9aHVRFHBmuc7eAg3Vt2ySQ/2",target:"_blank",rel:"noopener noreferrer"},w=e(`<h2 id="having-clause" tabindex="-1"><a class="header-anchor" href="#having-clause" aria-hidden="true">#</a> HAVING Clause</h2><p>The <code>WHERE</code> clause is used to filter results BEFORE any grouping occurs. As such, the <code>WHERE</code> clause cannot be used with aggregate functions. Instead, the <code>HAVING</code> clause should be used. The <code>HAVING</code> clause also filter results, but does AFTER grouping occurs and can be used with aggregate functions.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Total number of movies by year</span>
<span class="token comment">-- for years having more than 1 movie</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> total<span class="token punctuation">,</span> <span class="token keyword">year</span>
<span class="token keyword">FROM</span> movies 
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">year</span>
<span class="token keyword">HAVING</span> total <span class="token operator">&gt;</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function _(R,E){const c=o("Youtube"),t=o("ExternalLinkIcon");return l(),i("div",null,[d,n(c,{id:"cW2MLIZ5CaU",citation:"griffith"}),u,s("div",k,[s("p",null,[s("a",m,[a("Try it yourself on DB Fiddle"),n(t)])])]),g,s("div",v,[s("p",null,[s("a",h,[a("Try it yourself on DB Fiddle"),n(t)])])]),y,s("div",b,[s("p",null,[s("a",f,[a("Try it yourself on DB Fiddle"),n(t)])])]),w])}const O=p(r,[["render",_],["__file","group-by.html.vue"]]);export{O as default};
