import{_ as o,M as i,p as l,q as p,R as n,t as s,N as e,a3 as t}from"./framework-dd056dd6.js";const c={},d=n("h1",{id:"eloquent-basics",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#eloquent-basics","aria-hidden":"true"},"#"),s(" Eloquent Basics")],-1),r={class:"watch"},u={href:"https://laracasts.com/series/laravel-6-from-scratch/episodes/10",target:"_blank",rel:"noopener noreferrer"},m={href:"https://laravel.com/docs/6.x/eloquent",target:"_blank",rel:"noopener noreferrer"},v={href:"https://en.wikipedia.org/wiki/Active_record_pattern",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="defining-models" tabindex="-1"><a class="header-anchor" href="#defining-models" aria-hidden="true">#</a> Defining Models</h2><p>Before we can start using Eloquent, an Eloquent model must be defined. Models are stored in the <code>app</code> directory of the Laravel project, and while it is possible to create these files manually, the easiest way is to use the <code>artisan</code> <code>make:model</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:model Movie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This command will create a file in the <code>app</code> directory the name <code>Movie.php</code>. It would look something like this:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Movie</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>It is common convention to name the model as a singular version of the table name. For example, the <code>categories</code> database table, we would create a <code>Category</code> Model.</p></div><h2 id="eloquent-conventions" tabindex="-1"><a class="header-anchor" href="#eloquent-conventions" aria-hidden="true">#</a> Eloquent Conventions</h2>`,7),h={href:"https://laravel.com/docs/6.x/eloquent#eloquent-model-conventions",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="table-names" tabindex="-1"><a class="header-anchor" href="#table-names" aria-hidden="true">#</a> Table Names</h3><p>By default, Eloquent will assume the database table name will be plural version of the model name. So, in the example above, the <code>Movie</code> model will interact with the <code>movies</code> table.</p><p>This default can be overridden using the <code>$table</code> property.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Movie</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * The table associated with the model.
     *
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">string</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;my_movies&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="primary-keys" tabindex="-1"><a class="header-anchor" href="#primary-keys" aria-hidden="true">#</a> Primary Keys</h3><p>By default, Eloquent will assume the primary key of the table is the <code>id</code> column. The can be modified using the <code>$primaryKey</code> property.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Movie</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * The table associated with the model.
     *
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">string</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token variable">$primaryKey</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;movie_id&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timestamps" tabindex="-1"><a class="header-anchor" href="#timestamps" aria-hidden="true">#</a> Timestamps</h3><p>By default, Eloquent expects <code>created_at</code> and <code>updated_at</code> columns to exist on the table. These columns are used to keep track when changes occur to the table rows and is automatically handled by Eloquent. However, this behavior can be turned off by setting the <code>$timestamp</code> property to <code>false</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Movie</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * The table associated with the model.
     *
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">string</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token variable">$timestamps</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="retrieving-data" tabindex="-1"><a class="header-anchor" href="#retrieving-data" aria-hidden="true">#</a> Retrieving Data</h2><p>With the model and database table created, it is not possible ot retrieve data using Eloquent. Remember the Eloquent is the layer on top of query builder, with a direct reference to a specific table, and query builder is just built on PDO. So, Eloquent has all the power you would need in a much simpler interface.</p><p>For example, to retrieve all the rows from the <code>movies</code> table, the Eloquent <code>all</code> method can be used.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$movies</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Movie</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$movies</span> <span class="token keyword">as</span> <span class="token variable">$movie</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token variable">$movie</span><span class="token operator">-&gt;</span><span class="token property">movie_title</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, all of the query builder methods can be used with Eloquent, so you may add constraints to queries and then use the <code>get</code> method to retrieve the results:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$movies</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Movie</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;genre_id&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;year&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="not-found-exceptions" tabindex="-1"><a class="header-anchor" href="#not-found-exceptions" aria-hidden="true">#</a> Not Found Exceptions</h2><p>Sometimes it is necessary return a <code>404</code> page if no results are found in the database. Eloquent has made this really easy with the <code>findOrFail</code> and <code>firstOrFail</code> methods.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$movie</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Movie</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19);function g(f,y){const a=i("ExternalLinkIcon");return l(),p("div",null,[d,n("div",r,[n("p",null,[n("a",u,[s('Watch "Hello Eloquent" on Laracasts'),e(a)])])]),n("p",null,[n("a",m,[s("Eloquent"),e(a)]),s(" is a "),n("a",v,[s("ActiveRecord"),e(a)]),s(' implementation of query builder. Each database table has a corresponding "Model" class, which is used to interact with the table.')]),k,n("p",null,[s("Eloquent has several "),n("a",h,[s("conventions"),e(a)]),s(" when it comes to the table and column names as well as expected columns.")]),b])}const q=o(c,[["render",g],["__file","eloquent-basics.html.vue"]]);export{q as default};
