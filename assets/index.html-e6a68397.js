import{_ as i,M as o,p as r,q as l,R as n,t as s,N as a,a3 as t}from"./framework-dd056dd6.js";const p={},c=n("h1",{id:"php-strings",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-strings","aria-hidden":"true"},"#"),s(" PHP Strings")],-1),d={class:"watch"},u={href:"https://www.linkedin.com/learning/php-essential-training-2/strings",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.php.net/manual/en/language.types.string.php",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.single",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>Strings can be used with echo statements to display the strings in the browser.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token comment">// echo a string with double quotes</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hello World &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  
  <span class="token comment">// echo a string with single quotes</span>
  <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;Hello World &lt;br&gt;&#39;</span><span class="token punctuation">;</span> 
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Strings can also be used with variables.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// setting the variables to strings</span>
  <span class="token variable">$greeting</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
  <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;World&quot;</span><span class="token punctuation">;</span>

  <span class="token comment">// combine variables together with a string</span>
  <span class="token variable">$phrase</span> <span class="token operator">=</span> <span class="token variable">$greeting</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot; &quot;</span> <span class="token operator">.</span> <span class="token variable">$target</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$phrase</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),m={class:"try"},k={href:"https://repl.it/@eisenbm/php-strings",target:"_blank",rel:"noopener noreferrer"},_=t(`<h2 id="variable-substitution" tabindex="-1"><a class="header-anchor" href="#variable-substitution" aria-hidden="true">#</a> Variable Substitution</h2><p>In the previous example, the period was used to concatenate or combine the strings together. But PHP allows for variable replacement or variable substitution, which will output variables that are embedded into string literals.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>Variable substitution only works with double-quotes. It does not work with single quotes.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// using variable substitution</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token variable">$phrase</span></span> Again &lt;br&gt;&quot;</span><span class="token punctuation">;</span>

  <span class="token comment">// try it with single quotes</span>
  <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;$phrase Again &lt;br&gt;&#39;</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When using variable substitution, it is encouraged to wrap the variable in a set of curly braces (<code>{ }</code>). This will let PHP know where the variable starts and stops.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// using variable substitution with curly braces</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$phrase</span><span class="token punctuation">}</span></span>Again &lt;br&gt;&quot;</span><span class="token punctuation">;</span> 
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),w={class:"try"},q={href:"https://repl.it/@eisenbm/php-strings",target:"_blank",rel:"noopener noreferrer"};function f(y,x){const e=o("ExternalLinkIcon");return r(),l("div",null,[c,n("div",d,[n("p",null,[n("a",u,[s('Watch "Strings" on LinkedIn Learning'),a(e)])])]),n("p",null,[s("A "),n("a",h,[s("string"),a(e)]),s(" is a series of characters, surrounded by quotes or special syntax. A string can be created using "),n("a",g,[s("single quotes"),a(e)]),s(" or "),n("a",b,[s("double quotes"),a(e)]),s(".")]),v,n("div",m,[n("p",null,[n("a",k,[s("Try it yourself on Repl.it"),a(e)])])]),_,n("div",w,[n("p",null,[n("a",q,[s("Try it yourself on Repl.it"),a(e)])])])])}const H=i(p,[["render",f],["__file","index.html.vue"]]);export{H as default};
