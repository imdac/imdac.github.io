import{_ as o,M as s,p as l,q as c,N as t,R as a,t as n,a3 as i}from"./framework-dd056dd6.js";const u={},r=a("h1",{id:"post",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#post","aria-hidden":"true"},"#"),n(" $_POST")],-1),d={href:"https://www.php.net/manual/en/reserved.variables.post.php",target:"_blank",rel:"noopener noreferrer"},m=a("code",null,"$_POST",-1),k=i(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token comment">// </span>
  <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;Hello, &#39;</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Assuming the following form was submitted:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>World<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above example will output something similar to:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello, World
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5);function v(h,g){const e=s("Youtube"),p=s("ExternalLinkIcon");return l(),c("div",null,[r,t(e,{id:"RJ3p9KvZpEI",citation:"griffith"}),a("p",null,[n("The "),a("a",d,[m,t(p)]),n(" variable is an associative array of variables passed to the current script via the HTTP POST method when receiving data from a form.")]),k])}const b=o(u,[["render",v],["__file","post.html.vue"]]);export{b as default};
