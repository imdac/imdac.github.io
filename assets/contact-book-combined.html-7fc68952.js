import{_ as o,a as s}from"./laragon-url-fix-2-af7990a7.js";import{_ as r,M as l,p as d,q as c,R as t,t as e,N as i,a3 as a}from"./framework-dd056dd6.js";const h={},p=a('<h1 id="contact-book-combined" tabindex="-1"><a class="header-anchor" href="#contact-book-combined" aria-hidden="true">#</a> Contact Book - Combined</h1><div class="custom-container danger"><p class="custom-container-title">Warning</p><p>This assignment is only for students enrolled in <strong>Server-Side Web Development</strong> and <strong>Web Applications</strong> and are choosing to do the combined version of the Contact Book assignment.</p></div><h2 id="objective" tabindex="-1"><a class="header-anchor" href="#objective" aria-hidden="true">#</a> Objective</h2><p>Use what you learned about React, React Router, and Laravel to create a contact book web application, which allows a user to see and search through all contacts, add new contacts, and edit and delete existing contacts.</p><h2 id="project-setup" tabindex="-1"><a class="header-anchor" href="#project-setup" aria-hidden="true">#</a> Project Setup</h2><h3 id="_1-clone-the-repository" tabindex="-1"><a class="header-anchor" href="#_1-clone-the-repository" aria-hidden="true">#</a> 1. Clone the Repository</h3><p>Clone this repository from GitHub and use the provided file to complete the assignment.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>If you are using Valet, save your repository in the <code>Sites</code> directory</p></div><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>If you are using Laragon, save your repository in the <code>{laragon}/www</code> directory.</p></div><h3 id="_2-create-a-database" tabindex="-1"><a class="header-anchor" href="#_2-create-a-database" aria-hidden="true">#</a> 2. Create a Database</h3><p>To create a database using phpMyAdmin, complete the following instructions.</p>',11),u={href:"http://phpmyadmin.test",target:"_blank",rel:"noopener noreferrer"},m={href:"http://localhost/phpmyadmin",target:"_blank",rel:"noopener noreferrer"},b=a("<li>Log in to phpMyAdmin using the root username and password</li><li>Click the <strong>Databases</strong> tab</li><li>In the <strong>Create database</strong> form, enter <code>contact_book</code> for the database name.</li><li>Click the <strong>Create</strong> button</li>",4),g=a(`<h3 id="_3-install-laravel-dependencies" tabindex="-1"><a class="header-anchor" href="#_3-install-laravel-dependencies" aria-hidden="true">#</a> 3. Install Laravel Dependencies</h3><p>Install Laravel dependencies using composer</p><p>Using the terminal, navigate to the cloned repository directory and enter the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-create-environment-file" tabindex="-1"><a class="header-anchor" href="#_4-create-environment-file" aria-hidden="true">#</a> 4. Create Environment File</h3><p>In the project, find the <code>.env.example</code> file. Rename the file to be <code>.env</code>. Update the <code>.env</code> file to point to the <code>contact_book</code> database.</p><p>Save the file.</p><h3 id="_5-generate-key" tabindex="-1"><a class="header-anchor" href="#_5-generate-key" aria-hidden="true">#</a> 5. Generate Key</h3><p>Using the terminal, enter the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan key:generate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-test-the-site" tabindex="-1"><a class="header-anchor" href="#_6-test-the-site" aria-hidden="true">#</a> 6. Test the site</h3><p>In the browser, go to: http://contact-book-<em>username</em>.test</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>If you are using Laragon, you will need to click the <strong>reload</strong> button in the Laragon window. This should automatically create a friendly URL for your Laravel project.</p></div><div class="custom-container danger"><p class="custom-container-title">NOTE</p><p>If you are using Laragon and your friendly URL is not working, the following solution may work for you.</p><p>In the Laragon window, go to Menu &gt; Apache &gt; sites-enabled &gt; <em>your current laravel site</em></p><p><img src="`+o+'" alt="Laragon window - Apache Enabled Sites"></p><p>This will open a file in Notes++. From there, you will need to changes two lines, the <code>DocumentRoot</code> (line 2) and the <code>&lt;Directory&gt;</code> (line 5). In both lines, update the URL to include <code>/public/</code> at the end.</p><p><img src="'+s+`" alt="Notes++ - Site Config"></p></div><h3 id="_7-run-the-migration-files" tabindex="-1"><a class="header-anchor" href="#_7-run-the-migration-files" aria-hidden="true">#</a> 7. Run the Migration Files</h3><p>Use the provided migration files to create the database tables for the project.</p><p>In the terminal, enter the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>While this will create several tables, only the <code>contacts</code> table will be used.</p><h3 id="_8-create-models-and-controllers" tabindex="-1"><a class="header-anchor" href="#_8-create-models-and-controllers" aria-hidden="true">#</a> 8. Create Models and Controllers</h3><p>A Model and Controller will need to be created for the new table added in the previous step.</p><p>To create a Model and Controller, run the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:model Contact <span class="token parameter variable">-c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-setup-react" tabindex="-1"><a class="header-anchor" href="#_9-setup-react" aria-hidden="true">#</a> 9. Setup React</h3><p>A Vite project has been pre-installed into the repository and can be found in the <code>frontend</code> directory. The project only includes a base Vite project for React. So additional libraries, like React Router and Bootstrap, will need to be installed.</p><p>To install the dependencies and complete the setup of Vite, run the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> frontend
<span class="token function">npm</span> run <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>To install React Router, run the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> react-router-dom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To install Bootstrap, run the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> bootstrap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_10-start-vite-server" tabindex="-1"><a class="header-anchor" href="#_10-start-vite-server" aria-hidden="true">#</a> 10. Start Vite Server</h3><p>During development, React and Laravel will run on different servers, and the Vite server will need to be started manually.</p><p>To start the Vite server, run the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h2><ol><li>Create a contact book web application that uses the React framework and the React Router extension for the frontend using the Laravel Framework and a MySQL database as a RESTful API.</li><li>On the contact book&#39;s start view, contacts should be displayed alphabetically by the last name.</li><li>A search box should be available to filter contacts by their first and last name.</li><li>Clicking on a contact&#39;s name should display the contact&#39;s details view. The view should display all the information about the contact.</li><li>A new contact form should be available. Submitting the form should create a new contact in the web application and the MySQL database. When the operation is complete, the application should display the contact&#39;s details view.</li><li>An edit contact form should be available. Submitting the form should update a contact in the web application and the MySQL database. When the operation is complete, the application should display the contact&#39;s details view.</li><li>A delete contact button should be available. Clicking the button should remove the contact in the web application and the MySQL database. When the operation is complete, the application should display the contact book&#39;s start view.</li><li>The contact book application should be intuitive and easy to use and visually appealing. Students may use any open-source framework or library to assist in the UI of the application.</li></ol><h2 id="rubric" tabindex="-1"><a class="header-anchor" href="#rubric" aria-hidden="true">#</a> Rubric</h2><table><thead><tr><th>Criteria</th><th style="text-align:center;">Pts</th></tr></thead><tbody><tr><td>Successfully display contacts alphabetically by last name</td><td style="text-align:center;">5</td></tr><tr><td>Successfully implement search functionality</td><td style="text-align:center;">5</td></tr><tr><td>Successfully display a contact&#39;s details when contact&#39;s name is clicked</td><td style="text-align:center;">5</td></tr><tr><td>Successfully adds a new contact when the new contact form is submitted</td><td style="text-align:center;">5</td></tr><tr><td>Successfully updates a contact when the edit contact form is submitted</td><td style="text-align:center;">5</td></tr><tr><td>Successfully remove a contact when the delete button is clicked</td><td style="text-align:center;">5</td></tr><tr><td>Successfully implements React Router</td><td style="text-align:center;">5</td></tr><tr><td>Provides an appealing and intuitive user experience</td><td style="text-align:center;">15</td></tr><tr><td><strong>Total</strong></td><td style="text-align:center;"><strong>50</strong></td></tr></tbody></table>`,39);function v(f,y){const n=l("ExternalLinkIcon");return d(),c("div",null,[p,t("ol",null,[t("li",null,[e("Open phpMyAdmin at "),t("a",u,[e("http://phpmyadmin.test"),i(n)]),e(" (macOS) or "),t("a",m,[e("http://localhost/phpmyadmin"),i(n)]),e(" (Windows)")]),b]),g])}const k=r(h,[["render",v],["__file","contact-book-combined.html.vue"]]);export{k as default};
