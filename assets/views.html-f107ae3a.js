import{_ as e,M as t,p as o,q as p,R as s,t as n,N as i,a3 as c}from"./framework-dd056dd6.js";const l={},r=s("h1",{id:"laravel-views",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#laravel-views","aria-hidden":"true"},"#"),n(" Laravel Views")],-1),d={href:"https://laravel.com/docs/8.x/views",target:"_blank",rel:"noopener noreferrer"},u=s("code",null,"resources/views",-1),v=c(`<h2 id="view-routes" tabindex="-1"><a class="header-anchor" href="#view-routes" aria-hidden="true">#</a> View Routes</h2><p>Routes can be set to point directly to a view. This can be done using the <code>view</code> helper function inside of the callback function. The <code>view</code> helper function is used to retrieve a view instance. It takes the name of the view as its first argument and an array as a second optional argument.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/welcome&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;welcome&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the route only needs to return a view, the <code>Route::view</code> method may be used.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/welcome&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;welcome&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="passing-data-to-views" tabindex="-1"><a class="header-anchor" href="#passing-data-to-views" aria-hidden="true">#</a> Passing Data to Views</h2><p>An array of data may be passed to the <code>view</code> helper function. This will make the data available to the view.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/welcome&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;welcome&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>// /resources/views/welcome.blade.php
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="include-resources" tabindex="-1"><a class="header-anchor" href="#include-resources" aria-hidden="true">#</a> Include Resources</h2><p>Views will accept external CSS and JavaScript files in the same way as any HTML file would. For simple Laravel projects, the CSS and JavaScript files should be stored in the <code>/public</code> directory. A view will have access to the <code>/public</code> directory using the <code>/</code> path.</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* /public/app.css */</span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>link ref<span class="token operator">=</span><span class="token string double-quoted-string">&quot;stylesheet&quot;</span> href<span class="token operator">=</span><span class="token string double-quoted-string">&quot;/app.css&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function k(h,g){const a=t("ExternalLinkIcon");return o(),p("div",null,[r,s("p",null,[s("a",d,[n("Views"),i(a)]),n(" are a convenient way to display what the end-user will see in the browser. They also serve as a way to separate your application logic from your presentation logic. In Laravel, views can be either PHP or Blade files and are stored in the "),u,n(" directory.")]),v])}const b=e(l,[["render",k],["__file","views.html.vue"]]);export{b as default};
