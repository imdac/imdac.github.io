import{_ as n,M as r,p as l,q as d,N as t,a3 as s,R as e,t as o}from"./framework-dd056dd6.js";const h="/images/mtm6404-scramble-1.png",c="/images/mtm6404-scramble-2.png",p={},m=s('<h1 id="scramble" tabindex="-1"><a class="header-anchor" href="#scramble" aria-hidden="true">#</a> Scramble</h1><h2 id="objective" tabindex="-1"><a class="header-anchor" href="#objective" aria-hidden="true">#</a> Objective</h2><p>Using the Vue Framework, create an interactive version of the game Scramble.</p><h2 id="game-play" tabindex="-1"><a class="header-anchor" href="#game-play" aria-hidden="true">#</a> Game Play</h2><p>When the game begins, the player will be presented with a word that has been scrambled. The player will guess by typing into the provided textbox.</p><p>If the guess is correct, the player will earn a point, and a new scrambled word will appear. If the guess is incorrect, the player will receive a strike, and the scrambled word will remain.</p><p>A pass button will allow the player to skip on a word and receive a new scrambled word. The player will only have a limited number of passes.</p><p>Each time a word is guessed correctly or is passed, the word is removed from the game list and will not appear again during that specific game.</p><p>The game is over when the player went through all of the words in the game list, OR the player has received the maximum number of strikes. At which time, the player should be presented with an option to play again.</p><h2 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h2><p>The following requirements must be met to complete the assignment successfully:</p><ol><li>The repository containing the starter files must be cloned from GitHub. The repository will contain an <code>index.html</code> file, <code>styles.css</code> file, and a <code>scramble.js</code> file. You may change any of the files as necessary.</li><li>An array of words must be created. The words should not include spaces or special characters. There must be at least 10 words in the array.</li><li>The game should be persistent. The player&#39;s progress should be tracked throughout the game and stored to localStorage.</li><li>The player must be able to guess by typing into a textbox and hitting enter. Once a guess has been made, correct or incorrect, the textbox should be cleared. Making a guess should <strong>NOT</strong> cause a page refresh.</li><li>If the guess is correct, a new scrambled word should appear.</li><li>If the guess is incorrect, the current scrambled word should remain.</li><li>After each guess, the player should receive a response telling whether the guess was correct or incorrect.</li><li>After each guess, the number of points or strikes should be updated and displayed for the player.</li><li>If the player clicks on the pass button, and the player has at least pass remaining, the current word should be removed, and the next scrambled word should be displayed.</li><li>If the player makes it through the entire list of words <em>OR</em> receives the maximum number of strikes, the game should end and give the player the option to play again.</li><li>If the player chooses to play again, the game should restart the game, clearing all previous points, strikes, or used passes. The restart should be accomplished without a page refresh.</li></ol><h2 id="tips" tabindex="-1"><a class="header-anchor" href="#tips" aria-hidden="true">#</a> Tips</h2><ol><li>The provided <code>shuffle()</code> function can be used to shuffle the words array and scramble the individual words.</li><li>The use of frameworks or libraries to enhance user experience is allowed.</li></ol><h2 id="shuffle-function" tabindex="-1"><a class="header-anchor" href="#shuffle-function" aria-hidden="true">#</a> Shuffle Function</h2><p>The following screencast shows how to use the provided <code>shuffle()</code> function.</p>',16),u=e("h2",{id:"example",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#example","aria-hidden":"true"},"#"),o(" Example")],-1),g=e("div",{class:"custom-container warning"},[e("p",{class:"custom-container-title"},"NOTE"),e("p",null,"The example below does not demonstrate the use of the localStorage.")],-1),f=e("h2",{id:"breakdown",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#breakdown","aria-hidden":"true"},"#"),o(" Breakdown")],-1),b=s('<h2 id="hints" tabindex="-1"><a class="header-anchor" href="#hints" aria-hidden="true">#</a> Hints</h2><p>Getting started with Scramble can be difficult, so the following are some hints to help you start.</p><h3 id="_1-getting-a-list-of-data-points" tabindex="-1"><a class="header-anchor" href="#_1-getting-a-list-of-data-points" aria-hidden="true">#</a> 1. Getting a list of data points</h3><p>Vue is a data-oriented framework. So it is important to know what data properties are needed. The following screenshot points out some of the more important data properties needed for the game, but you may want to include more.</p><p><img src="'+h+'" alt="What data do we need?"></p><h3 id="_2-listening-for-events" tabindex="-1"><a class="header-anchor" href="#_2-listening-for-events" aria-hidden="true">#</a> 2. Listening for events</h3><p>Scramble is an interactive game. So, you will need to listen for interactions from the user. The following screenshot shows which UI elements will need to use Vue directives to track the user&#39;s actions.</p><p><img src="'+c+'" alt="What event listeners do we need?"></p><h3 id="_3-saving-to-local-storage" tabindex="-1"><a class="header-anchor" href="#_3-saving-to-local-storage" aria-hidden="true">#</a> 3. Saving to Local Storage</h3><p>When storing complex values, like objects and arrays, the <code>JSON.stringify()</code> method is required. Furthermore too limit the number of items being stored in Local Storage, create a <code>game</code> object inside the Vue <code>data</code> property, which would contain all of the data related to a specific game, including <em>points</em>, <em>strikes</em>, <em>remaining passes</em>, <em>current words</em>, and <em>list of words</em>. Only the <code>game</code> object would need to be stored to the Local Storage. Remember that you must use <code>JSON.parse()</code> when retrieving the data from Local Storage.</p><h2 id="rubric" tabindex="-1"><a class="header-anchor" href="#rubric" aria-hidden="true">#</a> Rubric</h2><table><thead><tr><th>Task</th><th style="text-align:center;">Points</th></tr></thead><tbody><tr><td>Properly implement the guess functionality</td><td style="text-align:center;">10</td></tr><tr><td>Properly track and display points and strikes</td><td style="text-align:center;">5</td></tr><tr><td>Properly implement the pass functionality</td><td style="text-align:center;">10</td></tr><tr><td>Properly implement localStorage for a persistent gameplay</td><td style="text-align:center;">10</td></tr><tr><td>Properly implement game restart</td><td style="text-align:center;">5</td></tr><tr><td>Provide an effective and appealing user experience</td><td style="text-align:center;">10</td></tr><tr><td><strong>Total</strong></td><td style="text-align:center;"><strong>50</strong></td></tr></tbody></table>',12);function w(y,x){const i=r("Scrimba"),a=r("Youtube");return l(),d("div",null,[m,t(i,{id:"/c/cR3EJaTk"}),u,g,t(a,{id:"ePDqM5SFopQ"}),f,t(a,{id:"dnyImDGT3Aw"}),b])}const _=n(p,[["render",w],["__file","scramble.html.vue"]]);export{_ as default};
