import{_ as e,M as t,p as o,q as i,R as n,t as s,N as p,a3 as l}from"./framework-dd056dd6.js";const c={},r=n("h1",{id:"form-validation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#form-validation","aria-hidden":"true"},"#"),s(" Form Validation")],-1),u={class:"watch"},d={href:"https://laracasts.com/series/laravel-6-from-scratch/episodes/25",target:"_blank",rel:"noopener noreferrer"},k=l(`<p>It is never a good idea to save user-submitted data to a database without first validating it. Even honest users can make mistakes. Fortunately, Laravel has made it easy to incorporate form validation into our application.</p><p>The <code>validate()</code> method allows for rules to be applied to any field. The method will compare the user&#39;s response with the rules and if there is a failure will redirect back to the form.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// validate data</span>
  <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token string single-quoted-string">&#39;movie_title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span>
      <span class="token string single-quoted-string">&#39;director&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span>
      <span class="token string single-quoted-string">&#39;year&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;required&#39;</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// Does not continue unless all data is valid.</span>

  <span class="token comment">// add a new movie</span>
  <span class="token variable">$movie</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Movie</span><span class="token punctuation">;</span>
  <span class="token variable">$movie</span><span class="token operator">-&gt;</span><span class="token property">movie_title</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;movie_title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$movie</span><span class="token operator">-&gt;</span><span class="token property">director</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;director&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$movie</span><span class="token operator">-&gt;</span><span class="token property">year</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;year&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$movie</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// returns to movies page</span>
  <span class="token keyword">return</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function v(m,g){const a=t("ExternalLinkIcon");return o(),i("div",null,[r,n("div",u,[n("p",null,[n("a",d,[s('Watch "Form Validation Essentials" on Laracasts'),p(a)])])]),k])}const f=e(c,[["render",v],["__file","form-validation.html.vue"]]);export{f as default};
