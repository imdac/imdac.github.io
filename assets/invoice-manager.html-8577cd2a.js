import{_ as s,M as i,p as o,q as r,N as t,a3 as n,R as e,t as c}from"./framework-dd056dd6.js";const l={},d=n(`<h1 id="invoice-manager" tabindex="-1"><a class="header-anchor" href="#invoice-manager" aria-hidden="true">#</a> Invoice Manager</h1><h2 id="objective" tabindex="-1"><a class="header-anchor" href="#objective" aria-hidden="true">#</a> Objective</h2><p>Use Vue, Vue Components, local storage, and the provided invoice data to create an invoice manager web application. The manager will allow the user to view, filter, create, edit, and delete invoices.</p><h2 id="invoice-data" tabindex="-1"><a class="header-anchor" href="#invoice-data" aria-hidden="true">#</a> Invoice Data</h2><p>The invoice data can be found in <code>invoices.js</code>. The invoice data is an array of objects, with each object representing a single invoice. An invoice will contain the following data:</p><ul><li>number: A unique identifier for the invoice</li><li>client: The name of the client</li><li>amount: The dollar amount for the invoice</li><li>status: The status of the invoice. The status will be either &#39;Draft&#39;, &#39;Pending&#39;, or &#39;Paid&#39;</li></ul><p>The data found in the <code>invoices.js</code> should not be altered.</p><h2 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h2><ol><li>The web application must consist of a single HTML file.</li><li>The web application must use local storage to keep the data persistent and up to date as the user makes changes to the invoices.</li><li>The web application must use the provided invoice data when no local storage data is available.</li><li>A Vue component should be created to render and display each invoice.</li><li>The web application must display all invoices, and all invoice data, when the page loads.</li><li>The user should be able to filter invoices by their status.</li><li>The user should be able to add new invoices by providing the client&#39;s name, invoice amount, and status. The application should automatically generate the number of the invoice. See <a href="#serial-number-generator">Serial Number Generator</a>.</li><li>The user should be able to edit existing invoices by changing the client&#39;s name, invoice amount, and/or status.</li><li>The user should be able to delete existing invoices.</li><li>The web application must use at least one custom event.</li><li>The web application must use at least one Vue transition.</li><li>The web application should cause no page refreshes.</li><li>The web application may use any public CSS framework or library, such as Bootstrap or Animate.css.</li></ol><h2 id="serial-number-generator" tabindex="-1"><a class="header-anchor" href="#serial-number-generator" aria-hidden="true">#</a> Serial Number Generator</h2><p>Each invoice has a unique number which is used to identify the invoice. New invoices should also have a unique number and should be generated automatically when the user creates a new invoice. Below is a Serial Number generator function that can be used for this project. The function receives a number and returns an alpha serial number with that number of characters.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">serialNumber</span> <span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> randomNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">92</span> <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">65</span>
    numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>randomNumber<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> numbers<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),p=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Serial Number Generator",src:"https://codepen.io/IMD/embed/qBmWGKE?defaultTab=js%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/IMD/pen/qBmWGKE">
  Serial Number Generator</a> by IMD (<a href="https://codepen.io/IMD">@IMD</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),u=n('<h2 id="hints" tabindex="-1"><a class="header-anchor" href="#hints" aria-hidden="true">#</a> Hints</h2><ul><li>Create an array containing the different invoice status options: [&#39;Draft&#39;, &#39;Pending&#39;, &#39;Paid&#39;]</li><li>Use a select box to display the different invoice status options. The user can use the select box to change how the invoices can be filtered.</li><li>Use multiple props to pass invoice data to the invoice component. Do not pass the entire invoice object.</li><li>Create a copy of the invoice data inside the invoice component. This will prevent any unintended manipulation of the root data.</li><li>Include the invoice edit form as part of the invoice component.</li><li>Use custom events to change invoice data from the invoice component.</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2>',3),h=e("h2",{id:"breakdown",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#breakdown","aria-hidden":"true"},"#"),c(" Breakdown")],-1),m=n('<h2 id="rubric" tabindex="-1"><a class="header-anchor" href="#rubric" aria-hidden="true">#</a> Rubric</h2><table><thead><tr><th>Task</th><th style="text-align:center;">Points</th></tr></thead><tbody><tr><td>Creates and uses an invoice component to display each invoice</td><td style="text-align:center;">5</td></tr><tr><td>Updates the invoice data in the root component and local storage when the user makes changes to an invoice data</td><td style="text-align:center;">4</td></tr><tr><td>Deletes the invoice data in the root component and local storage when the user deletes an invoice</td><td style="text-align:center;">4</td></tr><tr><td>Adds a new invoice the invoice data in the root component and local storage, when the user adds an invoice</td><td style="text-align:center;">2</td></tr><tr><td>Filters invoices by their status, when the user updates the filter value</td><td style="text-align:center;">2</td></tr><tr><td>Uses local storage to keep the invoice data persistent across browser sessions.</td><td style="text-align:center;">2</td></tr><tr><td>Uses at least one Vue transition to add an animated transition.</td><td style="text-align:center;">1</td></tr><tr><td><strong>Total</strong></td><td style="text-align:center;"><strong>20</strong></td></tr></tbody></table>',2);function b(v,k){const a=i("Youtube");return o(),r("div",null,[d,p,u,t(a,{id:"83ICzosAzzg"}),h,t(a,{id:"xDICoq8E_2Y"}),m])}const g=s(l,[["render",b],["__file","invoice-manager.html.vue"]]);export{g as default};
