import{_ as l,M as o,p,q as c,N as a,R as n,t as s,a3 as t}from"./framework-dd056dd6.js";const r={},d=n("h1",{id:"php-conditional-statements",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-conditional-statements","aria-hidden":"true"},"#"),s(" PHP Conditional Statements")],-1),u=n("p",null,"Conditional statements control the flow of a program by executing code only when certain conditions are met. Therefore, they are a fundamental part of a program's control flow.",-1),h=n("p",null,"The control flow is the order in which a computer executes statements in a script. When code is run, each statement is executed from top to bottom, unless there statements that alter the control flow, like conditionals statements or loops.",-1),k=n("p",null,[s("PHP has two main conditional statements, the "),n("code",null,"if"),s(" statement and the "),n("code",null,"switch"),s(" statement.")],-1),m=n("h2",{id:"if",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#if","aria-hidden":"true"},"#"),s(" if")],-1),v=n("code",null,"if",-1),b={href:"https://www.php.net/manual/en/control-structures.if.php",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"if",-1),f=n("code",null,"TRUE",-1),g=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

  <span class="token comment">// check if a is greater than b</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is greater than b&quot;</span><span class="token punctuation">;</span> <span class="token comment">// this will execute</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// check if a is less than b</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is less than b&quot;</span><span class="token punctuation">;</span> <span class="token comment">// this will not execute</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="else" tabindex="-1"><a class="header-anchor" href="#else" aria-hidden="true">#</a> else</h2>`,2),w={href:"https://www.php.net/manual/en/control-structures.else.php",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"else",-1),y=n("code",null,"if",-1),x=n("code",null,"if",-1),$=n("code",null,"false",-1),T=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

  <span class="token comment">// check if a is less than b</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is less than b&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is not less than b&quot;</span><span class="token punctuation">;</span> <span class="token comment">// this will execute</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="elseif" tabindex="-1"><a class="header-anchor" href="#elseif" aria-hidden="true">#</a> elseif</h2>`,2),E={href:"https://www.php.net/manual/en/control-structures.elseif.php",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"elseif",-1),N=n("code",null,"if",-1),I=n("code",null,"if",-1),P=n("code",null,"FALSE",-1),V=n("code",null,"elseif",-1),z=n("code",null,"if",-1),C=n("code",null,"elseif",-1),S=n("code",null,"else",-1),B=t(`<div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>In an <code>if / elseif / else</code> structure, conditions are only evaluated if the previous condition was <code>FALSE</code>.</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

  <span class="token comment">// comparing a to b</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is larger than b&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is smaller than b&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is equal to b&quot;</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h2>`,3),H={href:"https://www.php.net/manual/en/control-structures.switch.php",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"switch",-1),W=n("code",null,"if",-1),A=n("code",null,"switch",-1),D=t(`<p>When a <code>switch</code> statement finds a case that matches, it will execute that case&#39;s statement and then &quot;fallthrough&quot; all the remaining cases until it reaches the end of the <code>switch</code> block OR it finds a <code>break</code> statement. This is why in almost all cases, it is important to add a <code>break</code> at the end of each case.</p><p>The <code>default</code> case is to match anything that wasn&#39;t matched by other cases. It is the equivalent of the <code>else</code> statement.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> 

  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>
      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a equals 0 &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a equals 1 &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a equals 2 &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a equals 3 &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a is not 0, 1, 2, or 3 &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function F(O,U){const i=o("Youtube"),e=o("ExternalLinkIcon");return p(),c("div",null,[d,a(i,{id:"VcQpzTPHbys",citation:"This video was created by <a href='https://www.youtube.com/channel/UCzyuZJ8zZ-Lhfnz41DG5qLw'>Dani Krossing</a>"}),u,h,k,m,n("p",null,[s("The most common and most used conditional statement is the "),v,s(" statement. The "),n("a",b,[_,a(e)]),s(" statement determines whether or not to execute a block of code, by evaluating an expression. If the expression evaluates to "),f,s(" the block of code will execute, otherwise, it will not.")]),g,n("p",null,[s("The "),n("a",w,[q,a(e)]),s(" statement extends the "),y,s(" to execute a statement when the expression of the "),x,s(" statement evalutates to "),$,s(".")]),T,n("p",null,[s("The "),n("a",E,[L,a(e)]),s(" statement ig used in conjunction with an "),N,s(" statement to provide an alternative path if the "),I,s(" statement's condition evaluated to "),P,s(". The "),V,s(" statement is tied to a specified condition, similar to the "),z,s(" statement, and will only execute if the condition evaluates to true. There is no limit to the number of "),C,s(" statement, but the "),S,s(" statement must always be the last in the line.")]),B,n("p",null,[s("The "),n("a",H,[R,a(e)]),s(" statement is an alternative to an "),W,s(" statement. With the "),A,s(" statement you take a single variable or expression and compare it against a list of possible values, checking if they are equal.")]),D])}const Z=l(r,[["render",F],["__file","index.html.vue"]]);export{Z as default};
