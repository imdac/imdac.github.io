import{_ as i,M as o,p,q as l,N as a,R as n,t as s,a3 as t}from"./framework-dd056dd6.js";const r={},u=n("h1",{id:"aggregate-functions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#aggregate-functions","aria-hidden":"true"},"#"),s(" Aggregate Functions")],-1),d={href:"https://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"COUNT()",-1),m=n("code",null,"SUM()",-1),h=n("code",null,"AVG()",-1),f=t('<div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>When using aggregate functions without a <code>GROUP BY</code> clause, only one column can be requested. If multiple columns are requested an error will occur.</p></div><h2 id="count-function" tabindex="-1"><a class="header-anchor" href="#count-function" aria-hidden="true">#</a> COUNT() Function</h2><p>The <code>COUNT()</code> function is used to count the number of non-NULL rows for a specific column. If the <code>*</code> is used in place of the column it will count every row returned.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Count all the rows with a movie id</span>\n<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">-- Count all the rows in the table</span>\n<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),v={class:"try"},g={href:"https://www.db-fiddle.com/f/r2qfwEBTMfLrNF4P7nkjdJ/0",target:"_blank",rel:"noopener noreferrer"},w=t('<h2 id="sum-function" tabindex="-1"><a class="header-anchor" href="#sum-function" aria-hidden="true">#</a> SUM() Function</h2><p>The <code>SUM()</code> function returns the sum of all the matched rows of the provided column.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The <code>SUM()</code> function only works with columns with a number datatype.</p></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Getting the sum total of the year column for every movie </span>\n<span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',4),_={class:"try"},b={href:"https://www.db-fiddle.com/f/r2qfwEBTMfLrNF4P7nkjdJ/1",target:"_blank",rel:"noopener noreferrer"},y=t('<h2 id="avg-function" tabindex="-1"><a class="header-anchor" href="#avg-function" aria-hidden="true">#</a> AVG() Function</h2><p>The <code>AVG()</code> function will return the mean average of the values of the given column.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The <code>AVG()</code> function only works with columns with a number datatype.</p></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Getting the average year for all movies </span>\n<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',4),T={class:"try"},E={href:"https://www.db-fiddle.com/f/r2qfwEBTMfLrNF4P7nkjdJ/2",target:"_blank",rel:"noopener noreferrer"},M=t('<h2 id="min-and-max-functions" tabindex="-1"><a class="header-anchor" href="#min-and-max-functions" aria-hidden="true">#</a> MIN() and MAX() Functions</h2><p>The <code>MIN()</code> and <code>MAX()</code> functions are used to get the minimum or maximum values of the provided column.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>These functions can be used with string values.</p></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- The oldest movie in the movies table</span>\n<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">`</span>Oldest<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">-- The newest movie in the movies table</span>\n<span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">`</span>Newest<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),F={class:"try"},N={href:"https://www.db-fiddle.com/f/r2qfwEBTMfLrNF4P7nkjdJ/3",target:"_blank",rel:"noopener noreferrer"},q=t('<h2 id="where-clause" tabindex="-1"><a class="header-anchor" href="#where-clause" aria-hidden="true">#</a> WHERE Clause</h2><p>The <code>WHERE</code> clause can be used with aggregate functions to filter the results.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- The newest movie with the genre &#39;Sci-Fi&#39;</span>\n<span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">`</span>Newest<span class="token punctuation">`</span></span>\n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span>\n<span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>genre_id<span class="token punctuation">`</span></span> <span class="token operator">=</span> \n  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>genre_id<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>genres<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>genre_title<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;Sci-Fi&#39;</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),x={class:"try"},O={href:"https://www.db-fiddle.com/f/r2qfwEBTMfLrNF4P7nkjdJ/4",target:"_blank",rel:"noopener noreferrer"};function S(L,C){const c=o("Youtube"),e=o("ExternalLinkIcon");return p(),l("div",null,[u,a(c,{id:"PaEpDMSScxw",citation:"griffith"}),n("p",null,[n("a",d,[s("Aggregate functions"),a(e)]),s(" are use to perform calculation on a multiples rows of a single column. Some common aggregate functions include: "),k,s(", "),m,s(", and "),h,s(".")]),f,n("div",v,[n("p",null,[n("a",g,[s("Try it yourself on DB Fiddle"),a(e)])])]),w,n("div",_,[n("p",null,[n("a",b,[s("Try it yourself on DB Fiddle"),a(e)])])]),y,n("div",T,[n("p",null,[n("a",E,[s("Try it yourself on DB Fiddle"),a(e)])])]),M,n("div",F,[n("p",null,[n("a",N,[s("Try it yourself on DB Fiddle"),a(e)])])]),q,n("div",x,[n("p",null,[n("a",O,[s("Try it yourself on DB Fiddle"),a(e)])])])])}const R=i(r,[["render",S],["__file","aggregate-functions.html.vue"]]);export{R as default};
