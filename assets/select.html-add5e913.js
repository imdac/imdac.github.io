import{_ as p,M as o,p as c,q as l,N as a,R as n,t as s,a3 as t}from"./framework-dd056dd6.js";const r={},d=n("h1",{id:"select-statements",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#select-statements","aria-hidden":"true"},"#"),s(" SELECT Statements")],-1),u=t('<h2 id="basic-select-statements" tabindex="-1"><a class="header-anchor" href="#basic-select-statements" aria-hidden="true">#</a> Basic SELECT Statements</h2><p>The <code>SELECT</code> statement is used to retrieve information from one or more database tables. It starts with the <code>SELECT</code> keyword followed by a list of columns to return from the specified table or tables. Columns are separate by a comma. The asterisk (<code>*</code>) can be used to return all columns from the specified table or tables.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>SQL is a case-insensitive language, meaning all keywords, statements and clause maybe in any casing. However, it is common practice to write them in all caps.</p></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># Getting all movies with all columns</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment"># Getting all movies with `movie_title` and `director` columns</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),k={class:"try"},m={href:"https://www.db-fiddle.com/f/iC7jVSPkMXafZyXhhqwCte/0",target:"_blank",rel:"noopener noreferrer"},v=t('<h2 id="filtering-select-statements" tabindex="-1"><a class="header-anchor" href="#filtering-select-statements" aria-hidden="true">#</a> Filtering SELECT Statements</h2><p>It is often the case that we will want to retrieve a specific row or rows from a table.</p><p>This filtered result can be accomplished using the <code>WHERE</code> clause. The <code>WHERE</code> clause is followed by a condition that is tested against each row. If the row meets that condition, it will be returned.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># Getting all movies with an `movie_id` greater than 10</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> \n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span> \n<span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n<span class="token comment"># Getting the movie with a `movie_id` of 17</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> \n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span> \n<span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>\n\n<span class="token comment"># Getting the movie with the `movie_title` of &quot;Labyrinth&quot;</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> \n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span> \n<span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&quot;Labyrinth&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),h={class:"try"},f={href:"https://www.db-fiddle.com/f/iC7jVSPkMXafZyXhhqwCte/1",target:"_blank",rel:"noopener noreferrer"},b=t('<h2 id="using-wildcards-and-like" tabindex="-1"><a class="header-anchor" href="#using-wildcards-and-like" aria-hidden="true">#</a> Using Wildcards and LIKE</h2><p>It is possible to search for only part of a string using wildcards and the <code>LIKE</code> operator. A wildcard serves as a placeholder for one or more characters in a string. The following are the</p><table><thead><tr><th style="text-align:center;">Symbol</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td style="text-align:center;"><code>%</code></td><td>Represents zero or more characters</td><td>h%t finds hot, hat, hit and heat</td></tr><tr><td style="text-align:center;"><code>_</code></td><td>Represents a single character</td><td>h_t finds hot, hat, hit, but not heat</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># Getting all movies whose `movie_title` contains the letter &#39;a&#39;</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> \n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span> \n<span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span> <span class="token operator">LIKE</span> <span class="token string">&quot;%a%&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment"># Getting all movies whose `movie_title` starts with the letter &#39;G&#39;</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> \n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span> \n<span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span> <span class="token operator">LIKE</span> <span class="token string">&quot;G%&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment"># Getting all movies whose `movie_title` ends with the letter &#39;t&#39;</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> \n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span> \n<span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span> <span class="token operator">LIKE</span> <span class="token string">&quot;%t&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),w={class:"try"},_={href:"https://www.db-fiddle.com/f/iC7jVSPkMXafZyXhhqwCte/2",target:"_blank",rel:"noopener noreferrer"},y=t('<h2 id="using-multiple-filters" tabindex="-1"><a class="header-anchor" href="#using-multiple-filters" aria-hidden="true">#</a> Using Multiple Filters</h2><p>The <code>AND</code> and <code>OR</code> operators are used to filter records based on more than one condition. The <code>AND</code> operator displays a record if all the conditions separated by <code>AND</code> are <code>TRUE</code>. The <code>OR</code> operator displays a record if any of the conditions separated by <code>OR</code> is <code>TRUE</code>.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># Getting all movies whose `movie_title` ends with the letter &#39;t&#39; </span>\n<span class="token comment"># AND  `director` starts with &quot;Luc&quot;</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> \n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span> \n<span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span> <span class="token operator">LIKE</span> <span class="token string">&quot;%t&quot;</span>\n<span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> <span class="token operator">LIKE</span> <span class="token string">&quot;Luc%&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment"># Getting all movies whose `director` starts with &quot;Luc&quot; OR &quot;Dean&quot;</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> \n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span> \n<span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> <span class="token operator">LIKE</span> <span class="token string">&quot;Luc%&quot;</span>\n<span class="token operator">OR</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span> <span class="token operator">LIKE</span> <span class="token string">&quot;Dean%&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),g={class:"try"},E={href:"https://www.db-fiddle.com/f/iC7jVSPkMXafZyXhhqwCte/3",target:"_blank",rel:"noopener noreferrer"},q=t('<h2 id="sorting-select-statements" tabindex="-1"><a class="header-anchor" href="#sorting-select-statements" aria-hidden="true">#</a> Sorting SELECT Statements</h2><p>It is possible to sort the results using the <code>ORDER BY</code> clause. The <code>ORDER BY</code> clause is followed by the list of columns to sort. Columns can be sorted in ascending (<code>ASC</code>) or descending order (<code>DESC</code>) with ascending being the default.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># Getting all movies sorted by the `year`</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span>\n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span> \n<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment"># Getting all movies sorted by `movie_title` in reverse alphabetical</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span>\n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span> \n<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To sort multiple columns, place a comma between each column. The rows will be sorted in the order of the columns.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># Getting all movies sorted by the `year`, then by movie_title</span>\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>movie_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>director<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span>\n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>movies<span class="token punctuation">`</span></span> \n<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>movie_title<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),R={class:"try"},T={href:"https://www.db-fiddle.com/f/iC7jVSPkMXafZyXhhqwCte/4",target:"_blank",rel:"noopener noreferrer"},L={class:"footer"},S=n("h4",null,"Additional Resources",-1),C={href:"https://www.w3schools.com/sql/sql_wildcards.asp",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.w3schools.com/sql/sql_and_or.asp",target:"_blank",rel:"noopener noreferrer"};function x(D,F){const i=o("Youtube"),e=o("ExternalLinkIcon");return c(),l("div",null,[d,a(i,{id:"Hw8xkeAyk_0",citation:"griffith"}),u,n("div",k,[n("p",null,[n("a",m,[s("Try it yourself on DB Fiddle"),a(e)])])]),v,n("div",h,[n("p",null,[n("a",f,[s("Try it yourself on DB Fiddle"),a(e)])])]),b,n("div",w,[n("p",null,[n("a",_,[s("Try it yourself on DB Fiddle"),a(e)])])]),y,n("div",g,[n("p",null,[n("a",E,[s("Try it yourself on DB Fiddle"),a(e)])])]),q,n("div",R,[n("p",null,[n("a",T,[s("Try it yourself on DB Fiddle"),a(e)])])]),n("footer",L,[S,n("blockquote",null,[n("p",null,[n("a",C,[s("SQL Wildcards"),a(e)]),s(", "),n("a",O,[s("SQL AND, OR, and NOT operators"),a(e)])])])])])}const I=p(r,[["render",x],["__file","select.html.vue"]]);export{I as default};
