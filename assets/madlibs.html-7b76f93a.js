import{_ as p,M as i,p as c,q as d,R as e,t,N as s,V as o,a3 as n}from"./framework-dd056dd6.js";const u="/images/mtm6302-mad-libs-1.png",h="/images/mtm6302-mad-libs-2.png",m="/images/mtm6302-mad-libs-3.png",b="/images/mtm6302-mad-libs-4.png",v={},k=n('<h1 id="mad-libs-web-app" tabindex="-1"><a class="header-anchor" href="#mad-libs-web-app" aria-hidden="true">#</a> Mad Libs Web App</h1><h2 id="objective" tabindex="-1"><a class="header-anchor" href="#objective" aria-hidden="true">#</a> Objective</h2><p>Create a Mad Libs web application that lets a visitor choose a story, input words, and read the completed story.</p><h2 id="app-overview" tabindex="-1"><a class="header-anchor" href="#app-overview" aria-hidden="true">#</a> App Overview</h2><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The examples below are only meant to help explain the functionality of the Mad Libs assignment. Your application does not need to look like screenshots.</p></div><p>When the visitor comes to the site, they will be presented with a list of story titles. How the story titles are presented will be a matter of preference (a list of links, buttons, a select box, etc).</p><p><img src="'+u+'" alt="First screen of the Mad Libs app"></p><p>After the visitor has selected a story, a form will appear with a text input for each word in the selected story&#39;s words array.</p><p><img src="'+h+'" alt="Screen of the uncompleted form of the Mad Libs app"></p><p>After the visitor has provided words and submitted the form, the completed story will appear.</p><p><img src="'+m+'" alt="Screen of the completed form of the Mad Libs app"></p><p><img src="'+b+'" alt="Screen of the completed story"></p><p>There should be an option for the visitor to create a new story.</p><h2 id="starter-files" tabindex="-1"><a class="header-anchor" href="#starter-files" aria-hidden="true">#</a> Starter Files</h2><p>The <code>stories.js</code> file will contain the <code>stories</code> variable, which is an array of objects. Each object represents a story and contains a title, an array of required words, and an <code>output</code> function. The <code>words</code> array contains the types of words the visitor must provide. The words array should be used to create the form after the visitor selects a story. The <code>output</code> function will accept an object of words and will return the completed story. Each provided word is wrapped in a <code>&lt;span&gt;</code> tag with the class of <code>word</code>.</p><h2 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h2><p>Your assignment must adhere to the following requirements:</p>',17),g={href:"https://github.com/imdac/mtm6302-mad-libs",target:"_blank",rel:"noopener noreferrer"},y=e("strong",null,"mtm6302-midterm",-1),f=n("<li>Add one HTML (<strong>index.html</strong>), CSS (<strong>style.css</strong>), and JavaScript (<strong>script.js</strong>) file, each located at the root of the repository.</li><li>Your JavaScript code must go in <strong>script.js</strong>.</li><li>Feel free to use a modern CSS Framework like Bootstrap or Foundation, or a CSS reset (<strong>reset.css</strong>).</li><li>The web application should be responsive.</li><li>You may not use inline events. All DOM events must be handled using Event Listeners.</li><li>You may not declare variables with <code>var</code>. Use either <code>const</code> or <code>let</code>.</li><li>The web application should not experience any page refreshes.</li><li>The <code>stories</code> array found in the <code>stories.js</code> file must be used and remain unchanged.</li><li>The stories presented to the visitor must be added to the page dynamically.</li><li>Selecting a story should dynamically present a form containing inputs for the words of the selected story.</li><li>Submitting the form should not cause a page refresh, but present the selected story with the provided words.</li><li>On the completed story screen there should be an option to create a new story, which will return the visitor to the story options.</li>",12),w=e("h2",{id:"hints",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hints","aria-hidden":"true"},"#"),t(" Hints")],-1),_=e("code",null,"stories",-1),x=e("code",null,"for",-1),j=e("code",null,"for...of",-1),T=e("li",null,[e("p",null,"A story's object properties can be accessed by using two sets notation. The first to access the story object within the stories array and the second to access the properties within the object.")],-1),q=n(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// example</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stories<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token comment">// Mission Statement</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stories<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token comment">// Weather Report</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),S=e("code",null,"stories",-1),A=e("li",null,[e("p",null,[t("For each word in a story's "),e("code",null,"words"),t(" array, an text input should be created. The word type can be used as the input's label, name, or placeholder.")])],-1),L=n('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// example</span>\n<span class="token keyword">const</span> word <span class="token operator">=</span> stories<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// Adjective</span>\n<span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;input type=&quot;text&quot; name=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>word<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; placeholder=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>word<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// &lt;input type=&quot;text&quot; name=&quot;Adjective&quot; placeholder=&quot;Adjective&quot;&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),M=e("code",null,"children",-1),N=e("code",null,"<form>",-1),E=e("li",null,[e("p",null,[t("A story's "),e("code",null,"output"),t(" function requires an object of words to be passed to it. The properties of the object should have a key that is a word type and a value that is the word itself.")])],-1),O=n(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// example</span>
<span class="token keyword">const</span> story <span class="token operator">=</span> stories<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;Adjective&#39;</span><span class="token operator">:</span> <span class="token string">&#39;obedient&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;Verb 1&#39;</span><span class="token operator">:</span> <span class="token string">&#39;cook&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;Verb 2&#39;</span><span class="token operator">:</span> <span class="token string">&#39;strike&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;Plural Noun 1&#39;</span><span class="token operator">:</span> <span class="token string">&#39;birds&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;Plural Noun 2&#39;</span><span class="token operator">:</span> <span class="token string">&#39;winners&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;Plural Noun 3&#39;</span><span class="token operator">:</span> <span class="token string">&#39;politics&#39;</span>
<span class="token punctuation">}</span>

story<span class="token punctuation">.</span><span class="token function">ouput</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2>`,2),R=n('<div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The above example is only meant to demonstrate the functionality of the Mad Libs assignment. Your project may look very different.</p></div><h2 id="rubric" tabindex="-1"><a class="header-anchor" href="#rubric" aria-hidden="true">#</a> Rubric</h2><p>Submissions will be graded based on the following criteria:</p><table><thead><tr><th>Requirement</th><th style="text-align:center;">Marks</th></tr></thead><tbody><tr><td>Repository and files are named and structured correctly</td><td style="text-align:center;">2</td></tr><tr><td>Starter code is utilized correctly and unchanged</td><td style="text-align:center;">2</td></tr><tr><td>The three story options are presented dynamically</td><td style="text-align:center;">3</td></tr><tr><td>Once a story is selected, an appropriate form is presented</td><td style="text-align:center;">4</td></tr><tr><td>On form submission, a story is generated using the input words</td><td style="text-align:center;">4</td></tr><tr><td>An option is given to create a new story</td><td style="text-align:center;">3</td></tr><tr><td>The UI is responsive and well designed</td><td style="text-align:center;">7</td></tr><tr><td><strong>Total</strong></td><td style="text-align:center;"><strong>25</strong></td></tr></tbody></table>',4);function Y(V,C){const r=i("ExternalLinkIcon"),a=i("RouterLink"),l=i("Youtube");return c(),d("div",null,[k,e("ol",null,[e("li",null,[t("Naviagate to the "),e("a",g,[t("starter code"),s(r)]),t(' and click "Use this template" to copy the starter code to a new repository on your GitHub account. Name the repository '),y,t(".")]),f]),w,e("ul",null,[e("li",null,[e("p",null,[t("When using the "),_,t(" array the "),s(a,{to:"/modules/js/js-loops/for.html"},{default:o(()=>[x,t(" loop")]),_:1}),t(" or a "),s(a,{to:"/modules/js/js-loops/for...of.html"},{default:o(()=>[j,t(" loop")]),_:1}),t(" may be used to iterate over each story object.")])]),T]),q,e("ul",null,[e("li",null,[e("p",null,[t("The selected story can be identified by storing its index in the "),S,t(" array in a "),s(a,{to:"/modules/js/custom-data-attributes/"},{default:o(()=>[t("custom data attribute")]),_:1}),t(".")])]),A]),L,e("ul",null,[e("li",null,[e("p",null,[t("The "),s(a,{to:"/modules/js/js-dom/traversing-the-dom.html#children"},{default:o(()=>[M,t(" property")]),_:1}),t(" can be used to access the inputs from a "),N,t(" element.")])]),E]),O,s(l,{id:"UgeGkZlhSJ8"}),R])}const B=p(v,[["render",Y],["__file","madlibs.html.vue"]]);export{B as default};
