import{_ as a,p as n,q as s,a3 as e}from"./framework-dd056dd6.js";const t={},o=e(`<h1 id="php-simple-arrays" tabindex="-1"><a class="header-anchor" href="#php-simple-arrays" aria-hidden="true">#</a> PHP Simple Arrays</h1><h2 id="what-is-a-simple-array" tabindex="-1"><a class="header-anchor" href="#what-is-a-simple-array" aria-hidden="true">#</a> What is a Simple Array</h2><p>Simple arrays are arrays that are indexed using numbers and is the default behavior for arrays in PHP.</p><h2 id="declaring-an-array" tabindex="-1"><a class="header-anchor" href="#declaring-an-array" aria-hidden="true">#</a> Declaring an Array</h2><p>There are two way to declare an array in PHP, with the array function OR using the array literal.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$names</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$names</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Both methods create an empty array so that you can place items inside of it. If you want, you can create a simple array that contains items by added a comma-separated list, using either the array function or the array literal.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$names</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Oscar&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Brent&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Davis&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Hank&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$names</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;Oscar&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Brent&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Davis&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Hank&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Both examples will create an array with the four initial names but can still have more added afterwards.</p><h2 id="retrieving-array-values" tabindex="-1"><a class="header-anchor" href="#retrieving-array-values" aria-hidden="true">#</a> Retrieving Array Values</h2><p>The items inside the array are numbered from zero to three. We could write these items out like this:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token variable">$names</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Oscar</span>
<span class="token keyword">echo</span> <span class="token variable">$names</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Hank</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="retrieving-array-length" tabindex="-1"><a class="header-anchor" href="#retrieving-array-length" aria-hidden="true">#</a> Retrieving Array Length</h2><p>If you want to find out how many items are inside an array, you can use either the <code>sizeof()</code> OR <code>count()</code> function. NOTE: Both functions are exactly the same, as <code>sizeof()</code> is simply an alias of <code>count()</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">sizeof</span><span class="token punctuation">(</span> <span class="token variable">$names</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//outputs 4</span>
<span class="token keyword">echo</span> <span class="token function">count</span><span class="token punctuation">(</span> <span class="token variable">$names</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//outputs 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="updating-array-values" tabindex="-1"><a class="header-anchor" href="#updating-array-values" aria-hidden="true">#</a> Updating Array Values</h2><p>If you want to update an item in an existing array, use the same syntax to retrieve followed by the assignment operator and the new value.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$names</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Fitzy&quot;</span><span class="token punctuation">;</span> <span class="token comment">// $names = [&quot;Oscar&quot;, &quot;Fitzy&quot;, &quot;Davis&quot;, &quot;Hank&quot;]</span>
<span class="token variable">$names</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Bob&quot;</span><span class="token punctuation">;</span> <span class="token comment">// $names = [&quot;Oscar&quot;, &quot;Fitzy&quot;, &quot;Davis&quot;, &quot;Bob&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This will replace the name &quot;Brent&quot; with the name &quot;Fitzy&quot; and the name &quot;Hank&quot; with the name &quot;Bob&quot;</p><h2 id="adding-a-new-item-to-an-array" tabindex="-1"><a class="header-anchor" href="#adding-a-new-item-to-an-array" aria-hidden="true">#</a> Adding a New Item to an Array</h2><p>If you want to add a new item to an existing simple array then we use a similar syntax to the update. We add the square brackets after the array name but we leave them empty.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$names</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Bill&quot;</span><span class="token punctuation">;</span> <span class="token comment">// $names = [&quot;Oscar&quot;, &quot;Fitzy&quot;, &quot;Davis&quot;, &quot;Bob&quot;, &quot;Bill&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will add the name &quot;Bill&quot; to the end of the array.</p>`,23),p=[o];function i(r,u){return n(),s("div",null,p)}const l=a(t,[["render",i],["__file","php-simple-arrays.html.vue"]]);export{l as default};
