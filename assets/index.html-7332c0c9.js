import{_ as o,M as p,p as i,q as l,R as n,t as e,N as t,a3 as a}from"./framework-dd056dd6.js";const c={},r=n("h1",{id:"laravel-blade",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#laravel-blade","aria-hidden":"true"},"#"),e(" Laravel Blade")],-1),d={href:"https://laravel.com/docs/8.x/blade",target:"_blank",rel:"noopener noreferrer"},u=a(`<p>Blade template files use the <code>.blade.php</code> extension and are typically stored in the <code>resources/views</code> directory.</p><h2 id="rendering-blade-files" tabindex="-1"><a class="header-anchor" href="#rendering-blade-files" aria-hidden="true">#</a> Rendering Blade Files</h2><p>Like other view files, Routes can display Blade view files using the <code>view</code> helper function.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/greetings&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// renders /resources/views/greetings.blade.php</span>
  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;greetings&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>Remember that only the base name is required. Laravel will know to look for <code>.blade.php</code>.</p></div><p>Data can also be passed to a Blade view file by adding an array to the <code>view</code> helper function.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/greetings&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;greetings&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="display-data" tabindex="-1"><a class="header-anchor" href="#display-data" aria-hidden="true">#</a> Display Data</h2>`,8),h={href:"https://laravel.com/docs/8.x/blade#displaying-data",target:"_blank",rel:"noopener noreferrer"},k=n("span",{style:{"white-space":"nowrap"}},[n("code",{"v-pre":""},"{{ }}")],-1),m=a(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$name</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),v=n("p",null,[e("The Blade "),n("span",{style:{"white-space":"nowrap"}},[n("code",{"v-pre":""},"{{ }}")]),e(" statement is automatically sent through PHP's "),n("code",null,"htmlspecialchars"),e(" function to prevent XSS attacks. However, if you do need to display raw HTML, it can be done using the "),n("code",null,"{!! !!}"),e(" statement.")],-1),g=a(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">!</span><span class="token operator">!</span> <span class="token variable">$name</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),b={href:"https://v3.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"@",-1),f=n("span",{style:{"white-space":"nowrap"}},[n("code",{"v-pre":""},"{{ }}")],-1),w=n("code",null,"@",-1),y=n("span",{style:{"white-space":"nowrap"}},[n("code",{"v-pre":""},"{{ }}")],-1),x=a(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>Hello<span class="token punctuation">,</span> @<span class="token punctuation">{</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">.</span> <span class="token comment">// rendered as: Hello {{ name }}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1);function B(H,q){const s=p("ExternalLinkIcon");return i(),l("div",null,[r,n("p",null,[n("a",d,[e("Blade"),t(s)]),e(" is a simple but powerful templating engine included with Laravel. Blade has a collection of directives, which makes templates easier to read and create. It also has a sophisticated component system used to modularize a web application and build template layouts. Finally, unlike other templating engines, Blade uses plain PHP code inside the templates and is converted to plain PHP when the template is compiled. This means Blade is simpler and more powerful than plain PHP and yet adds zero overhead to a web application.")]),u,n("p",null,[n("a",h,[e("Displaying Data"),t(s)]),e(" in a Blade file can be accomplished by wrapping the variable in double curly braces "),k,e(". This is sometimes known as moustache syntax.")]),m,v,g,n("p",null,[e("Sometimes, it may be necessary to prevent the Blade engine from rendering the moustache syntax. For example, if you were also working with the "),n("a",b,[e("Vue"),t(s)]),e(" framework. In this case, the "),_,e(" can be placed in front of the "),f,e(". When the Blade template is rendered, the "),w,e(" will be removed, but the "),y,e(" will remain.")]),x])}const L=o(c,[["render",B],["__file","index.html.vue"]]);export{L as default};
