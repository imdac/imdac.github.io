import{_ as r,M as o,p as i,q as c,N as s,R as e,t as n,a3 as p}from"./framework-dd056dd6.js";const l={},d=e("h1",{id:"arithmetic-operators",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#arithmetic-operators","aria-hidden":"true"},"#"),n(" Arithmetic Operators")],-1),u={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"+",-1),v=e("code",null,"-",-1),k=e("code",null,"*",-1),b=e("code",null,"/",-1),h=p(`<p>When working with arithmetic operators, typically two numbers, variables, or expressions are required.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">5</span>

<span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">50</span> <span class="token comment">// 150</span>
<span class="token keyword">const</span> multiply <span class="token operator">=</span> a <span class="token operator">*</span> b <span class="token comment">// 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, these operations can be part of a larger expression</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">5</span>

<span class="token keyword">const</span> expression <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">*</span> a <span class="token comment">// 450</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>When working with multiple arithmetic operators in JavaScript, the orders of operation (PEMDAS) will be followed.</p><p><strong>P</strong>arentheses, <strong>E</strong>xponents, <strong>M</strong>ultiplication and <strong>D</strong>ivision, and <strong>A</strong>ddition and <strong>S</strong>ubtraction</p></div><h2 id="the-modulus-operator" tabindex="-1"><a class="header-anchor" href="#the-modulus-operator" aria-hidden="true">#</a> The Modulus Operator</h2><p>The modulus operator (<code>%</code>) returns the division remainder.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">5</span>

<span class="token keyword">const</span> modulus <span class="token operator">=</span> b <span class="token operator">%</span> a <span class="token comment">// 2 - 3 goes into 5 one time with a reminder of 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="incrementing-and-decrementing" tabindex="-1"><a class="header-anchor" href="#incrementing-and-decrementing" aria-hidden="true">#</a> Incrementing and Decrementing</h2><p>The need increment a number by 1 or decrement a number by 1 occur so often in programming that there are special operators for those tasks.</p><p>The increment operator (<code>++</code>) increments numbers by 1</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">// Note: let is used here because the value of a will change</span>
a<span class="token operator">++</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The decrement operator (<code>--</code>) decrements numbers by 1.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// Note: let is used here because the value of b will change</span>
b<span class="token operator">--</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The increment and decrement operators can be used in two forms <strong>postfix</strong> and <strong>prefix</strong>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span>
a<span class="token operator">++</span> <span class="token comment">// postfix</span>
<span class="token operator">++</span>a <span class="token comment">// prefix</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both forms will increment or decrement the value of the variable, but value returned maybe different.</p><p>The postfix form returns the original value of the variable before the increment or decrement occurs.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The prefix form returns the value after the increment or decrement occurs.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),g={class:"footer"},f=e("h4",null,"Additional Resources",-1),_={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.w3schools.com/js/js_arithmetic.asp",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.purplemath.com/modules/orderops.htm",target:"_blank",rel:"noopener noreferrer"},j={href:"https://hackernoon.com/javascript-back-to-basics-prefix-vs-postfix-8da5256223d2",target:"_blank",rel:"noopener noreferrer"};function y(S,T){const t=o("Scrimba"),a=o("ExternalLinkIcon");return i(),c("div",null,[d,s(t,{id:"/p/pPPeCy/cBQw3sJ",citation:"israel"}),e("p",null,[n("As the name suggests, "),e("a",u,[n("arithmetic operators"),s(a)]),n(" perform arithmetic on numbers or variable assigned a number. Common JavaScript operators includes addition ("),m,n("), subtraction ("),v,n("), multiplication ("),k,n(") and division ("),b,n(").")]),h,e("footer",g,[f,e("ul",null,[e("li",null,[e("a",_,[n("Arithmetic operators"),s(a)])])]),e("blockquote",null,[e("p",null,[e("a",w,[n("JavaScript Arithmetic"),s(a)]),n(", "),e("a",x,[n("The Order of Operation: PEMDAS"),s(a)]),n(", "),e("a",j,[n("JavaScript — Back to Basics: Prefix vs. Postfix"),s(a)])])])])])}const O=r(l,[["render",y],["__file","arithmetic-operators.html.vue"]]);export{O as default};
