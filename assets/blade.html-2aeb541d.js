import{_ as o,M as p,p as l,q as r,R as s,t as a,N as e,a3 as t}from"./framework-dd056dd6.js";const c={},i=s("h1",{id:"laravel-blade",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#laravel-blade","aria-hidden":"true"},"#"),a(" Laravel Blade")],-1),d={href:"https://laravel.com/docs/6.x/blade",target:"_blank",rel:"noopener noreferrer"},u=s("h2",{id:"display-data",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#display-data","aria-hidden":"true"},"#"),a(" Display Data")],-1),k={href:"https://laravel.com/docs/6.x/blade#displaying-data",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"{{ }}",-1),h=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$name</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You are not limited to displaying the contents of the variables passed to the view. You may also echo the results of any PHP function.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$name</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>The current time is <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;H:i&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Blade <code>{{ }}</code> statements are automatically sent through PHP&#39;s <code>htmlspecialchars</code> function to prevent XSS attacks. However, if you do need to display raw HTML, it can be done using the <code>{!! !!}</code> statement.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">!</span><span class="token operator">!</span> <span class="token variable">$name</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">}</span><span class="token operator">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="control-structures" tabindex="-1"><a class="header-anchor" href="#control-structures" aria-hidden="true">#</a> Control Structures</h2>`,6),m={href:"https://laravel.com/docs/6.x/blade#control-structures",target:"_blank",rel:"noopener noreferrer"},b=s("h3",{id:"if-statements",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#if-statements","aria-hidden":"true"},"#"),a(" if statements")],-1),g={href:"https://laravel.com/docs/6.x/blade#if-statements",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"@if",-1),_=s("code",null,"@elseif",-1),y=s("code",null,"@else",-1),w=s("code",null,"@endif",-1),x=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    @<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$name</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
    @<span class="token keyword">else</span> 
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> Guest<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
    @<span class="token keyword">endif</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loops" tabindex="-1"><a class="header-anchor" href="#loops" aria-hidden="true">#</a> Loops</h3><p>Blades provides directive for working with PHP loop structures, which, again, function identically to their PHP counterparts.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    @<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>The current value is <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$i</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
    @<span class="token keyword">endfor</span>
    
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
      @<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span>
        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token variable">$item</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      @<span class="token keyword">endforeach</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function H(P,$){const n=p("ExternalLinkIcon");return l(),r("div",null,[i,s("p",null,[s("a",d,[a("Blade"),e(n)]),a(" is the templating engine that was created by and included with Laravel. Blade has many capabilities which makes creating view templates fast and powerful. Blade templates can contain PHP tags, and will, in fact, be compiled down to plain PHP.")]),u,s("p",null,[a("We can "),s("a",k,[a("display data"),e(n)]),a(" in Blade using the double curly braces "),v,a(".")]),h,s("p",null,[a("Blade also provides convenient shortcuts for common PHP "),s("a",m,[a("control structures"),e(n)]),a(", such as conditional statements and loops.")]),b,s("p",null,[a("You may construct "),s("a",g,[a("if statements"),e(n)]),a(" using the "),f,a(", "),_,a(", "),y,a(", and "),w,a(" directives, which function identically to their PHP counterparts:")]),x])}const L=o(c,[["render",H],["__file","blade.html.vue"]]);export{L as default};
