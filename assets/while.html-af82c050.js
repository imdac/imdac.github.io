import{_ as t,M as o,p as i,q as p,R as n,t as s,N as e,a3 as l}from"./framework-dd056dd6.js";const c={},r=n("h1",{id:"php-while-loop",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-while-loop","aria-hidden":"true"},"#"),s(" PHP while Loop")],-1),u={class:"watch"},d={href:"https://www.linkedin.com/learning/php-essential-training-2/while-loops",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.php.net/manual/en/control-structures.while.php",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"while",-1),k=n("code",null,"while",-1),v=n("code",null,"if",-1),b=n("em",null,"while",-1),w=n("code",null,"TRUE",-1),g=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token comment">// output 1 to 10</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$count</span><span class="token punctuation">}</span></span>, &quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$count</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// increment by 1</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, there are two important parts of the loop. The first is that a loop must have a condition and two, something about that condition has to change during the course of the loop. If it does not, then the result will be an infinite loop.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token comment">// This will create an infinite loop</span>
  <span class="token comment">// because $count will always be less than 10</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token variable">$count</span></span> &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">NOTE</p><p>While it will not create an error, an infinite loop will cause your program to get stuck and eventually fail. It is important to avoid infinite loops.</p></div><h2 id="when-to-use-while-loops" tabindex="-1"><a class="header-anchor" href="#when-to-use-while-loops" aria-hidden="true">#</a> When to use while Loops</h2><p>The <code>while</code> loop typically used when the number of iteration is unknown or random. For example, flipping a coin until you get heads may take only 1 try or it might take 100 tries. The number of tries is unknown.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$coin</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token comment">// keep looping until $coin === 0</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$coin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// randomly choose a number between 0 and 1</span>
    <span class="token variable">$coin</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$coin</span><span class="token punctuation">}</span></span> &lt;br&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>While loops are also often used in conjunction with reading a recordset from a database query or reading the contents of a text file. As long as PHP is able to continue fetching records from the recordset or reading lines from the text file then the loop continues. As soon as the function fails then the loop stops. You can also put a <code>break</code> command inside the loop, wrapped in an if statement. The <code>break</code> command will force PHP to exit from the loop.</p>`,8);function f(_,y){const a=o("ExternalLinkIcon");return i(),p("div",null,[r,n("div",u,[n("p",null,[n("a",d,[s('Watch "While loops" on LinkedIn Learning'),e(a)])])]),n("p",null,[s("The "),n("a",h,[m,e(a)]),s(" loop is the simplest type of loop in PHP. The "),k,s(" loop, like an "),v,s(" statement, is made up of a condition and a block of code. Now, "),b,s(" the condition is "),w,s(" the loop will continue to execute the block of code.")]),g])}const $=t(c,[["render",f],["__file","while.html.vue"]]);export{$ as default};
