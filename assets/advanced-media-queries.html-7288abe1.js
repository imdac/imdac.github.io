import{_ as t,M as a,p as s,q as c,R as i,N as d,V as l,t as e,a3 as o}from"./framework-dd056dd6.js";const h={},u=o(`<h1 id="media-queries" tabindex="-1"><a class="header-anchor" href="#media-queries" aria-hidden="true">#</a> Media Queries</h1><p>Media queries are the rules in CSS that allow us to write targeted styles for different screen sizes, resolutions, orientation, and more.</p><h2 id="html-meta-tags" tabindex="-1"><a class="header-anchor" href="#html-meta-tags" aria-hidden="true">#</a> HTML <code>meta</code> tags</h2><p>Before we start using the media queries in our CSS we need to set the responsive <code>meta</code> tags in <code>head</code> of our HTML for cross browser support.</p><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>&lt;head&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;
&lt;/head&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This <code>meta</code> tag sets the information for different browser on how to render the content of this page.</p><ul><li><code>width=device-width</code> width of this website should be set to the width of the device</li><li><code>initial-scale=1</code> the website should not be zoomed in or out</li></ul><h2 id="media-queries-recap" tabindex="-1"><a class="header-anchor" href="#media-queries-recap" aria-hidden="true">#</a> Media Queries Recap</h2>`,8),m=o(`<ol><li>The media queries are added in our CSS using the <code>@media</code> rule</li><li>We define the type of media following the <code>@media</code> rule such as <code>screen</code></li><li>We can add multiple conditions separated by <code>and</code></li><li>We can define conditions using <code>()</code></li><li>Each <code>@media</code> rule statement is followed by <code>{}</code> which contain the styles to be applied when the respective rule is true</li></ol><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media screen and (min-width: 960px){
  /* Styles to be applied at 960px and above */
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the media query above we are saying that if the <code>media</code> on which this web page is displayed is a <code>screen</code> and the <code>min-width</code> of the screen is <code>960px</code> then apply the styles defined inside the <code>{}</code></p><p>Similar to the min-width we can also use max-width to apply styles only to a maximum width of the screen.</p><p>We can think of it as min-width is the starting point of the styles and max-width is the ending point.</p><p>So in the example above with <code>min-width:960px</code> we are saying the styles will be applied at the minimum width 960px and above.</p><p>If we write <code>max-width:960px</code> this will mean the styles will be applied only until the maximum width of 960px and below that.</p><h2 id="using-em-unit" tabindex="-1"><a class="header-anchor" href="#using-em-unit" aria-hidden="true">#</a> Using <code>em</code> Unit</h2><p>It is valid and common to use <code>px</code> unit for defining the width in our media queries, however when it comes to accessibility using <code>em</code> as the width unit in media query is much better. This helps to adjust the media query in case the user changes the size of text for their browser.</p><p>Calculating the <code>em</code> from <code>px</code> value is simple. We can divide the desired <code>px</code> width with <code>16</code> given <code>16px</code> is the default font size of our browser.</p><p>If our media query is <code>min-width:960px</code> we can use the following <code>960 / 16 = 60</code> which could be written as <code>min-width:60em</code></p><h2 id="more-than-device-width" tabindex="-1"><a class="header-anchor" href="#more-than-device-width" aria-hidden="true">#</a> More than Device Width</h2><p>With the more advanced options available in modern browsers users can set many options to their preference. We can use some of the advance media query parameters to further enhance user experience and accessibility of our website in these modern browsers.</p><h3 id="preferred-colour" tabindex="-1"><a class="header-anchor" href="#preferred-colour" aria-hidden="true">#</a> Preferred Colour</h3><p>The <code>prefers-color-scheme</code> parameter in our media query can help us to change the colours of our website to light or dark theme based on user preference set in their browsers.</p><p>The <code>prefers-color-scheme</code> accepts two values <code>light</code> or <code>dark</code></p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media (prefers-color-scheme: dark) {
  /* Styles */
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A common practice for dark colour themes us to reduce the opacity of images so they are not fully bright.</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media (prefers-color-scheme: dark) {
  /* Styles */
  img{
    opacity: .9;
  }
  img:hover{
    opacity: 1;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="motion-preference" tabindex="-1"><a class="header-anchor" href="#motion-preference" aria-hidden="true">#</a> Motion preference</h3><p>While animations are a fun way to attract and engage our users for some it can be distracting, cause discomfort or even seizures. We can check for a users preference for motion by using the <code>prefers-reduced-motion</code> parameter in our media query which accepts two parameters <code>no-preference</code> or <code>reduce</code></p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media (prefers-reduced-motion: reduce){
  /* styles for reducing the motion */
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hover-or-not" tabindex="-1"><a class="header-anchor" href="#hover-or-not" aria-hidden="true">#</a> Hover or not</h3><p>Many times we depend on hover to style an element for either displaying additional information or simply show change of state, but there are cases where hover is not an option like in a smartphone or hover is not fully functioning.</p><p>We can have our webpage deliver an alternative for users that do not have hover as an input.</p><p>Using the <code>hover</code> parameter which accepts two values <code>none</code> for no hover and <code>hover</code> for when hover is possible.</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media (hover: none) {
  /* styles */
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="further-reading" tabindex="-1"><a class="header-anchor" href="#further-reading" aria-hidden="true">#</a> Further Reading</h2>`,28),p={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@media",target:"_blank",rel:"noopener noreferrer"};function v(f,b){const r=a("RouterLink"),n=a("ExternalLinkIcon");return s(),c("div",null,[u,i("p",null,[d(r,{to:"/modules/css/css-media-queries/"},{default:l(()=>[e("In the previous chapters")]),_:1}),e(" we have focused on screen size based Media Queries. Here is a quick summary of what we have learned:")]),m,i("p",null,[e("While we have covered some of the advanced options for media queries and their usage there are more options available and will be added as browsers support increases. It is good to review the "),i("a",p,[e("@media documentation on Mozilla Developer Network"),d(n)]),e(" for further advancements.")])])}const g=t(h,[["render",v],["__file","advanced-media-queries.html.vue"]]);export{g as default};
