import{_ as e,M as t,p as o,q as p,R as n,t as s,N as i,a3 as c}from"./framework-dd056dd6.js";const l={},d=n("h1",{id:"restful-controllers",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#restful-controllers","aria-hidden":"true"},"#"),s(" Restful Controllers")],-1),u={class:"watch"},r={href:"https://laracasts.com/series/laravel-6-from-scratch/episodes/21",target:"_blank",rel:"noopener noreferrer"},k=c(`<p>Similar to the C.R.U.D. for databases, most Laravel application will consist of the seven restful controller actions. These are the methods of the controller class and consist of the following: <code>index</code>, <code>show</code>, <code>create</code>, <code>store</code>, <code>edit</code>, <code>update</code> and <code>destroy</code>.</p><h2 id="index" tabindex="-1"><a class="header-anchor" href="#index" aria-hidden="true">#</a> index</h2><p>The <code>index</code> action is used to display a list of items. For example, if we were creating a movie site, and we wanted to display all of the movies, we would use the <code>index</code> action.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$movies</span> <span class="token operator">=</span> <span class="token class-name static-context">Movie</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;home&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;movies&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$movies</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="show" tabindex="-1"><a class="header-anchor" href="#show" aria-hidden="true">#</a> show</h2><p>The <code>show</code> action is used to display a specific item. Back to our movie site, when displaying the details of a single movie we would use the <code>show</code> action.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$movie</span> <span class="token operator">=</span> <span class="token class-name static-context">Movie</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;details&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;movie&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$movie</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> create</h2><p>The <code>create</code> action is used to display pages that request information to be added to the database. In the case of our movie site, this means the form page to add a new movie.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">create</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;create&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="store" tabindex="-1"><a class="header-anchor" href="#store" aria-hidden="true">#</a> store</h2><p>The <code>store</code> action is used to do that actual &quot;storing&quot; of the data received from the create form.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">store</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$movie</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Movie</span><span class="token punctuation">;</span> 
  <span class="token variable">$movie</span><span class="token operator">-&gt;</span><span class="token property">movie_title</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;movie_title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$movie</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="edit" tabindex="-1"><a class="header-anchor" href="#edit" aria-hidden="true">#</a> edit</h2><p>Like the <code>create</code> action, the <code>edit</code> action is used to display pages that provide the user an opportunity to change the data for a single item.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">edit</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$movie</span> <span class="token operator">=</span> <span class="token class-name static-context">Movie</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;edit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;movie&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$movie</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> update</h2><p>The <code>update</code> action is used to process the <code>edit</code> form and update the database for a single item.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$movie</span> <span class="token operator">=</span> <span class="token class-name static-context">Movie</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$movie</span><span class="token operator">-&gt;</span><span class="token property">movie_title</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;movie_title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$movie</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy</h2><p>The final action, <code>destroy</code> is used to remove or delete items from a database. Laravel has two levels of deleting items from a database, <strong>soft delete</strong> and <strong>permanent delete</strong>.</p><p>With <strong>soft delete</strong> the item will remain in the database, but the <code>deleted_at</code> column will be updated. This will allow for a rollback of delete command. To use <strong>soft delete</strong>, it must be enabled into the Model and the <code>deleted_at</code> column needs to be added column to the database table.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Movie</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
  <span class="token keyword">use</span> <span class="token package">SoftDeletes</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once <strong>soft delete</strong> is enabled, the <code>delete</code> method can be used.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">destroy</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$movie</span> <span class="token operator">=</span> <span class="token class-name static-context">Movie</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$movie</span><span class="token operator">-&gt;</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For a <strong>permanent delete</strong>, the <code>forceDelete</code> method should be used.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">destroy</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$movie</span> <span class="token operator">=</span> <span class="token class-name static-context">Movie</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$movie</span><span class="token operator">-&gt;</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27);function v(h,m){const a=t("ExternalLinkIcon");return o(),p("div",null,[d,n("div",u,[n("p",null,[n("a",r,[s('Watch "The Seven Restful Controller Actions" on Laracasts'),i(a)])])]),k])}const f=e(l,[["render",v],["__file","restful-controllers.html.vue"]]);export{f as default};
