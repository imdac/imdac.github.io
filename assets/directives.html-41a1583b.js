import{_ as o,M as p,p as i,q as c,R as n,t as s,N as e,a3 as t}from"./framework-dd056dd6.js";const l={},r=n("h1",{id:"blade-directives",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#blade-directives","aria-hidden":"true"},"#"),s(" Blade Directives")],-1),d={href:"https://laravel.com/docs/8.x/blade#blade-directives",target:"_blank",rel:"noopener noreferrer"},u=t(`<h2 id="if-statements" tabindex="-1"><a class="header-anchor" href="#if-statements" aria-hidden="true">#</a> If Statements</h2><p>You may construct <code>if</code> statements using the <code>@if</code>, <code>@elseif</code>, <code>@else</code>, and <code>@endif</code> directives. These directives function identically to their PHP counterparts:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>@<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$records</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token constant">I</span> have one record<span class="token operator">!</span>
@<span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$records</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token constant">I</span> have multiple records<span class="token operator">!</span>
@<span class="token keyword">else</span>
    <span class="token constant">I</span> don&#39;t have any records<span class="token operator">!</span>
@<span class="token keyword">endif</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition to the conditional directives, the <code>@isset</code> and <code>@empty</code> directives may be used as convenient shortcuts for their respective PHP functions:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>@<span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$records</span><span class="token punctuation">)</span>
    <span class="token comment">// $records is defined and is not null...</span>
@endisset

@<span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$records</span><span class="token punctuation">)</span>
    <span class="token comment">// $records is &quot;empty&quot;...</span>
@endempty
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loops" tabindex="-1"><a class="header-anchor" href="#loops" aria-hidden="true">#</a> Loops</h2><p>Blade provides simple directives for working with PHP&#39;s loop structures. Again, each of these directives functions identically to their PHP counterparts:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>@<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>
    The current value is <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$i</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
@<span class="token keyword">endfor</span>

@<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$users</span> <span class="token keyword">as</span> <span class="token variable">$user</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>This is user <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$user</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
@<span class="token keyword">endforeach</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),k=n("code",null,"$loop",-1),v={href:"https://laravel.com/docs/8.x/blade#the-loop-variable",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>@<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$users</span> <span class="token keyword">as</span> <span class="token variable">$user</span><span class="token punctuation">)</span>
    @<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$loop</span><span class="token operator">-&gt;</span><span class="token property">first</span><span class="token punctuation">)</span>
        This is the first iteration<span class="token operator">.</span>
    @<span class="token keyword">endif</span>

    @<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$loop</span><span class="token operator">-&gt;</span><span class="token property">last</span><span class="token punctuation">)</span>
        This is the last iteration<span class="token operator">.</span>
    @<span class="token keyword">endif</span>

    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$loop</span><span class="token operator">-&gt;</span><span class="token property">index</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$user</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
@<span class="token keyword">endforeach</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h2><p>Blade also allows you to define comments in your views. However, unlike HTML comments, Blade comments are not included in the HTML returned by your application:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">--</span> This comment will not be present in the rendered <span class="token constant">HTML</span> <span class="token operator">--</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4);function m(b,f){const a=p("ExternalLinkIcon");return i(),c("div",null,[r,n("p",null,[n("a",d,[s("Blade Directives"),e(a)]),s(" are shortcuts for common PHP control structures. These shortcuts provide a clean way of adding display logic to a view.")]),u,n("p",null,[s("When looping, a "),k,s(" variable will be available inside of the loop. The "),n("a",v,[s("loop variable"),e(a)]),s(" provides access to some useful bits of information such as the current loop index and whether this is the first or last iteration through the loop:")]),h])}const y=o(l,[["render",m],["__file","directives.html.vue"]]);export{y as default};
