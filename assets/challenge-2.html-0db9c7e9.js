import{_ as l,M as t,p as c,q as p,R as a,t as n,N as s,a3 as i}from"./framework-dd056dd6.js";const r={},u=a("h1",{id:"challenge-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#challenge-2","aria-hidden":"true"},"#"),n(" Challenge 2")],-1),d=a("p",null,"Challenges are an opportunity to test what you have learned by interacting directly with live code.",-1),m=a("code",null,"alert-box",-1),g={href:"https://getbootstrap.com/docs/5.2/components/alerts/",target:"_blank",rel:"noopener noreferrer"},h=a("div",{class:"custom-container warning"},[a("p",{class:"custom-container-title"},"NOTE"),a("p",null,"For this challenge, you will need to edit the HTML and JavaScript. The Bootstrap framework has already been added.")],-1),k=i(`<details class="solution"><summary><h3 style="display:inline-block;">Solution</h3></summary><p>From the Bootstrap documentation, we can conclude the component&#39;s template will require a slot for the customizable text and a <code>variant</code> prop to specify the alert&#39;s style.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>alert alert-[variant prop]<span class="token punctuation">&quot;</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>alert<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- slot output --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For this challenge, we can use global registration to create the <code>alert-box</code> component. We declare that the <code>variant</code> attribute should be used as a prop using the <code>props</code> property. The template will contain a dynamic <code>class</code> attribute to set the alert&#39;s style using the <code>variant</code> prop. The <code>&lt;slot&gt;</code> element will be placed between the <code>&lt;div&gt;</code> tags to allow for custom content.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;alert-box&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;variant&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  &lt;div class=&quot;alert&quot; :class=&quot;&#39;alert-&#39; + variant&quot; role=&quot;alert&quot;&gt;
      &lt;slot&gt;&lt;/slot&gt;
  &lt;/div&gt;
  </span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the HTML, we will use the <code>alert-box</code> component by calling the <code>&lt;alert-box&gt;</code> custom element and adding the <code>variant</code> attribute and content between the <code>&lt;alert-box&gt;</code> tags.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span> <span class="token attr-name">variant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>success<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>Yes!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span> I did it.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,1);function v(b,_){const e=t("ExternalLinkIcon"),o=t("Challenge");return c(),p("div",null,[u,d,a("p",null,[n("For this challenge, you will create an "),m,n(" component with a customizable style and text using slots and props. The alert box component should be based on the "),a("a",g,[n("Bootstrap Alerts component"),s(e)]),n(".")]),h,s(o,{id:"NWXQwEb",title:"Vue Components: Challenge 2",tabs:"js result"}),k])}const x=l(r,[["render",v],["__file","challenge-2.html.vue"]]);export{x as default};
