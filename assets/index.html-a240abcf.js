import{_ as d,M as s,p as m,q as p,R as e,t as a,N as t,V as n,a3 as o}from"./framework-dd056dd6.js";const l="/images/mobile-desktop.jpg",h={},c=o(`<h1 id="css-media-queries" tabindex="-1"><a class="header-anchor" href="#css-media-queries" aria-hidden="true">#</a> CSS Media Queries</h1><p>CSS Media Queries have a variety of uses. They can serve specific styles to different screen sizes, orientation, pixel density and even special printer styles.</p><p>Media query is a declaration we write to tell the browser about the aspects of the media we want to select for applying certain styles.</p><p>Media Query rule is written starting with the <code>@media</code> rule</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media screen and (min-width: 650px){
  body{
    font-size: 1.25rem;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code above we are saying that we want to use the <code>@media</code> rule on <code>screen</code> with a minimum width of 650px or above to apply the styles enclosed in the <code>{}</code>.</p><div class="custom-container warning"><p class="custom-container-title">Note</p><p>There are two closing brackets at the end, one for the body tag styles and one for media rules</p></div><h2 id="device-widths" tabindex="-1"><a class="header-anchor" href="#device-widths" aria-hidden="true">#</a> Device Widths</h2><p>We use the following four properties in the media-queries to determine the device width or range for which we want the styles to be applied.</p><ol><li>min-width</li><li>max-width</li></ol><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media screen and (min-width: 650px){
  /* Styles applied for minimum width of 650px and over */
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media screen and (max-width: 900px){
  /* Styles applied below width of 900px */
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media screen and (min-width: 400px) and (max-width: 1000px){
  /* Styles applied between 400px and 1000px */
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="css-cascade-and-media-queries" tabindex="-1"><a class="header-anchor" href="#css-cascade-and-media-queries" aria-hidden="true">#</a> CSS Cascade and Media Queries</h2><p>As we start exploring media queries and learn more about web development, we&#39;re going to to always aim for a mobile up approach. We&#39;re going to create our websites with mobile styles first and extend our designs as more space allows them to grow.</p><p>Leveraging the cascade of CSS when we style the our web applications with mobile first in mind, this helps send only whats needed to the devices rendering them, and will also make our overall CSS architecture easier to work with.</p><p>What we will notice is that the <code>min-width</code> media query will be our primary query. We add our default styles without any media query first and then as the screen size increases we make adjustments to the styles for larger and larger screen sizes.</p><p>The styles applied inside a <code>min-width</code> media query are inherited and cascaded to larger screens so we do not have to repeat our styles.</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>h1{
  font-size: 1.5em;
}
@media screen and (min-width: 600px){
  h1{
    font-size: 2.5em;
  }
}
@media screen and (min-width: 900px){
  h1{
    color: coral;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="print-styles" tabindex="-1"><a class="header-anchor" href="#print-styles" aria-hidden="true">#</a> Print Styles</h2><p>We can use the media query to add specific styles for printing. Mainly this is useful when we want to use the styles for hiding images, or displaying links next to the anchor tags.</p><p>For writing the print styles we use the following media query</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media print{
  /* Styles for the print of the page */
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hiding-images-from-print" tabindex="-1"><a class="header-anchor" href="#hiding-images-from-print" aria-hidden="true">#</a> Hiding images from print</h3><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media print{
  img{
    display: none;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="showing-links-next-to-anchors" tabindex="-1"><a class="header-anchor" href="#showing-links-next-to-anchors" aria-hidden="true">#</a> Showing links next to anchors</h3><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>@media print{
  a::after{
    content: &quot; &lt;&quot; attr(href) &quot;&gt;&quot;;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="larger-text-for-larger-displays" tabindex="-1"><a class="header-anchor" href="#larger-text-for-larger-displays" aria-hidden="true">#</a> Larger text for larger displays</h2>`,28),u=e("iframe",{style:{width:"100%"},src:"//codepen.io/IMD/embed/aNBdmd/?height=468&theme-id=0&default-tab=result",width:"300",height:"468",allowfullscreen:"allowfullscreen"},'See the Pen &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="http://codepen.io/IMD/pen/aNBdmd/"&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;CSS min-width media query&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; by IMD (&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="http://codepen.io/IMD"&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;@IMD&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;) on &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="http://codepen.io"&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;CodePen&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;.',-1),g=e("h2",{id:"flexible-designs-at-different-breakpoints",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#flexible-designs-at-different-breakpoints","aria-hidden":"true"},"#"),a(" Flexible designs at different breakpoints")],-1),f=e("p",null,"We're not limited to text, we can apply any styles at any breakpoint, like this square, where we change its shape, colour, and size.",-1),b=e("iframe",{style:{width:"100%"},src:"//codepen.io/IMD/embed/BKqYmR/?height=266&theme-id=0&default-tab=result",width:"300",height:"266",allowfullscreen:"allowfullscreen"},'See the Pen &amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="http://codepen.io/IMD/pen/BKqYmR/"&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;CSS min-width media query shapes and colours&amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; by IMD (&amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="http://codepen.io/IMD"&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;@IMD&amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;) on &amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="http://codepen.io"&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;CodePen&amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;.',-1),w=e("h2",{id:"serving-images",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#serving-images","aria-hidden":"true"},"#"),a(" Serving Images")],-1),v=e("p",null,"We can also use media queries to serve different background images at different sizes.",-1),y=e("p",null,"For the users who are using any device less then 650px they will see a tiny mouse thats only 8.42 KB in size. This tiny mouse turns into a gigantic group of elephants for any device that renders larger then 650px. This image is much larger then the images served to what we are assuming are cell phones. We cannot serve images by bandwidth yet, our best measurements are combinations of widths that change with the landscape of devices out there.",-1),S=e("iframe",{style:{width:"100%"},src:"//codepen.io/IMD/embed/aNRqGg/?height=466&theme-id=0&default-tab=result",width:"300",height:"466",allowfullscreen:"allowfullscreen"},'See the Pen &amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="http://codepen.io/IMD/pen/aNRqGg/"&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;CSS min-width media query shapes and colours&amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; by IMD (&amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="http://codepen.io/IMD"&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;@IMD&amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;) on &amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="http://codepen.io"&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;CodePen&amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;.',-1),x=o('<p>As we progress with our layouts we will explore setting widths and floating sidebars against our content. We will build navigation for smaller devices and expand them out for larger screens.</p><h2 id="media-queries-layout" tabindex="-1"><a class="header-anchor" href="#media-queries-layout" aria-hidden="true">#</a> Media Queries &amp; Layout</h2><div class="custom-container warning"><p class="custom-container-title">NOTE:</p><p>Floats and clearing floats to create page layouts has been largely replaced by flexbox and CSS grids. The content here is still relevant as they are still widely used and you should be aware of them. We will be focusing in flexbox and CSS Grids for page layouts in this course.</p></div><p>Most semantic HTML elements we use for layout are block level elements. This means by default the contents inside will align vertically one after another like we&#39;ve seen with other text based elements. HTML adapts to any screen size and we can use this to our advantage to style our layouts for all screen sizes.</p><p>One of the best ways to get started building any web application is to iron out the layout components before worrying about what&#39;s inside. We can look for common patterns to group in larger boxes. Everything on the web fits into this model.</p><p>To simply decouple our layout from other elements its much easier and more efficient to keep these layout elements separate than grouping them together by a class when it might seem redundant to add another div. Adding another div for the layout specific style ensures a more module component.</p><p>Let&#39;s look at a common layout pattern. Header, content, right sidebar, footer. We can imagine the layout structure will look similar to the image below. The wire frame on the left represents the layout structure smaller screens sizes will render. On the right, when there is enough minimum width to support the content side by side, Float the Main Content and Sidebar Left to each other.</p><p><img src="'+l+'" alt="Mobile and Desktop Layout"></p><h3 id="html-structure" tabindex="-1"><a class="header-anchor" href="#html-structure" aria-hidden="true">#</a> HTML Structure</h3>',9),M=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"HTML Layout",src:"//codepen.io/IMD/embed/bebGMJ/?height=265&theme-id=0&default-tab=html,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/bebGMJ/'>HTML Layout</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),_=e("h3",{id:"the-outline-property",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#the-outline-property","aria-hidden":"true"},"#"),a(" The Outline Property")],-1),C=e("p",null,"Let's roughly colour in our layout elements and assign some heights to visualize what each of them are doing.",-1),I=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"HTML Layout",src:"//codepen.io/IMD/embed/dXbygd/?height=265&theme-id=0&default-tab=html,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/dXbygd/'>HTML Layout</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),D=e("h3",{id:"floating-at-a-min-width-breakpoint",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#floating-at-a-min-width-breakpoint","aria-hidden":"true"},"#"),a(" Floating at a min width breakpoint")],-1),L=e("p",null,"At 400px wide, float the main content and sidebar beside eachother, float the sidebar right with a little bit less width for spacing in between.",-1),k=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"HTML Layout",src:"//codepen.io/IMD/embed/pbzoGj/?height=265&theme-id=0&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/pbzoGj/'>HTML Layout</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),T=e("h3",{id:"centering-the-layout",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#centering-the-layout","aria-hidden":"true"},"#"),a(" Centering the layout")],-1),q=e("p",null,"Setting up a common container class for centering components of the site to the maximum width we set. In this first pen, we want the header and footer always extend to the size of the screen. The main-content and sidebar are centered at a maximum of 400px wide.",-1),z=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"HTML Layout",src:"//codepen.io/IMD/embed/ZOzENp/?height=265&theme-id=0&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/ZOzENp/'>HTML Layout</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),P=e("h3",{id:"using-a-container-class",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#using-a-container-class","aria-hidden":"true"},"#"),a(" Using a Container Class")],-1),H=e("p",null,"The container class itself is modular and can be assigned to the header and footer centering both of them at 400px wide as well.",-1),B=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"HTML Layout",src:"//codepen.io/IMD/embed/rLBNEj/?height=265&theme-id=0&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/rLBNEj/'>HTML Layout</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),N=e("h3",{id:"adding-content-to-the-layout-structure",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#adding-content-to-the-layout-structure","aria-hidden":"true"},"#"),a(" Adding Content to the Layout Structure")],-1),W=e("code",null,"<img>",-1),E=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"HTML Layout",src:"//codepen.io/IMD/embed/vKBEBV/?height=265&theme-id=0&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/vKBEBV/'>HTML Layout</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1);function j(G,O){const i=s("RouterLink"),r=s("Youtube");return m(),p("div",null,[c,u,g,f,b,w,v,y,S,x,e("p",null,[a("We can begin with the HTML Markup, a header, section, aside, and footer. One addition is a container div that we can apply "),t(i,{to:"/modules/css/css-clearfix/"},{default:n(()=>[a("CSS Clearfix")]),_:1}),a(" to once we float the Main Content and Sidebar elements.")]),M,_,C,I,D,L,k,T,q,z,P,H,B,N,e("p",null,[a("Now that the layout styles and layout are in place, it's easy to add whatever content inside. In the example below we've made some familiar additions below. We've set the "),t(i,{to:"/modules/css/css-box-sizing/"},{default:n(()=>[a("CSS Box-Sizing")]),_:1}),a(" of all elements to border-box. This makes it easier to add padding to the .main-content section without recalculating the widths. There's a "),t(i,{to:"/modules/css/css-background/"},{default:n(()=>[a("CSS Background Image")]),_:1}),a(" of toast on the body and the "),W,a(" tag inside the .sidebar has a max-width of 100% meaning it will scale from 1-100% up to it's real size, it will not distort it scaling it more than the size it is but will resize to anything smaller than it's natural size.")]),E,t(r,{id:"B6l6Wzmj4pA",citation:"griffith"})])}const V=d(h,[["render",j],["__file","index.html.vue"]]);export{V as default};
