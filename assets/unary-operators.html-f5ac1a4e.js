import{_ as t,M as p,p as c,q as l,R as n,t as s,N as e,a3 as o}from"./framework-dd056dd6.js";const r={},i=n("h1",{id:"unary-operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#unary-operators","aria-hidden":"true"},"#"),s(" Unary Operators")],-1),d={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Unary",target:"_blank",rel:"noopener noreferrer"},u=n("h2",{id:"the-delete-operator",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-delete-operator","aria-hidden":"true"},"#"),s(" The delete Operator")],-1),k={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"delete",-1),v=o(`<div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>When using the <code>delete</code> operator on an array, the array is <strong>NOT</strong> reindexed and the length is not changed. Therefore, using the <code>delete</code> operator with arrays is generally discouraged. Use the <code>splice()</code> method instead.</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Ted&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// {name: &#39;Ted&#39;, age: 21}</span>
<span class="token keyword">delete</span> person<span class="token punctuation">.</span>age
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// {name: &#39;Ted&#39;}</span>

<span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span> <span class="token comment">// [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]</span>
<span class="token keyword">delete</span> colors<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span> <span class="token comment">// [&#39;red&#39;, undefined, &#39;blue&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="the-typeof-operator" tabindex="-1"><a class="header-anchor" href="#the-typeof-operator" aria-hidden="true">#</a> The typeof Operator</h2>`,3),h={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"typeof",-1),b=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Ed&#39;</span>
<span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span>
<span class="token keyword">const</span> enrolled <span class="token operator">=</span> <span class="token boolean">true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#39;Ted&#39;</span><span class="token punctuation">)</span>               <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name<span class="token punctuation">)</span>                <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">21</span><span class="token punctuation">)</span>                  <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> pi<span class="token punctuation">)</span>                  <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// object </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Ted&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment">// boolean</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> enrolled<span class="token punctuation">)</span>            <span class="token comment">// boolean</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> undeclaredVariable<span class="token punctuation">)</span>  <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before the introduction of ES2015, <code>typeof</code> was a guaranteed safe way to return a the datatype of a variable, even with undeclared variables. But with introduction <code>let</code> and <code>const</code>, which use block-scope, a <code>ReferenceError</code> can occur if the variable is declared after the <code>typeof</code> operator is used on the same variable.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> undeclaredVariable<span class="token punctuation">)</span>  <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name<span class="token punctuation">)</span>                <span class="token comment">// ReferenceError</span>

<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Ted&#39;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),g={class:"footer"},y=n("h4",null,"Additional Resources",-1),_={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Unary",target:"_blank",rel:"noopener noreferrer"},w={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete",target:"_blank",rel:"noopener noreferrer"},T={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone",target:"_blank",rel:"noopener noreferrer"};function x(U,j){const a=p("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[n("a",d,[s("Unary operators"),e(a)]),s(" require only one operand to perform an operation.")]),u,n("p",null,[s("The "),n("a",k,[m,s(" operator"),e(a)]),s(" is used to delete an object's property or an element at a specified index in the array.")]),v,n("p",null,[s("The "),n("a",h,[f,s(" operator"),e(a)]),s(" returns a string indicating the type of the following operand.")]),b,n("footer",g,[y,n("ul",null,[n("li",null,[n("a",_,[s("Unary operators"),e(a)])]),n("li",null,[n("a",w,[s("The delete operator"),e(a)])]),n("li",null,[n("a",T,[s("The typeof operator"),e(a)])]),n("li",null,[n("a",S,[s("The temporal dead zone"),e(a)])])])])])}const E=t(r,[["render",x],["__file","unary-operators.html.vue"]]);export{E as default};
