import{_ as c,M as i,p as r,q as l,N as e,R as n,t as s,a3 as t}from"./framework-dd056dd6.js";const p={},d=n("h1",{id:"string-functions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#string-functions","aria-hidden":"true"},"#"),s(" String Functions")],-1),u={href:"https://dev.mysql.com/doc/refman/5.7/en/string-functions.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>When working with String Functions, a new string can be adding strings with quotes as an argument of the function. If a string argument has no strings, it will be treated as a column name.</p><h2 id="upper-function" tabindex="-1"><a class="header-anchor" href="#upper-function" aria-hidden="true">#</a> UPPER() Function</h2><p>The <code>UPPER()</code> function is used to convert all the letter characters of a string to uppercase.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Covert the each movie title to all uppercase</span>
<span class="token keyword">SELECT</span> UPPER<span class="token punctuation">(</span>movie_title<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>movies<span class="token punctuation">\`</span></span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),m={class:"try"},k={href:"https://www.db-fiddle.com/f/7vMrS1Bsym9PELD14jp3fc/0",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="lower-function" tabindex="-1"><a class="header-anchor" href="#lower-function" aria-hidden="true">#</a> LOWER() Function</h2><p>The <code>LOWER()</code> function is used to convert all the letter characters of a string to lowercase.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Covert the each movie director to all lowercase</span>
<span class="token keyword">SELECT</span> LOWER<span class="token punctuation">(</span>director<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>movies<span class="token punctuation">\`</span></span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),f={class:"try"},b={href:"https://www.db-fiddle.com/f/7vMrS1Bsym9PELD14jp3fc/1",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="length-function" tabindex="-1"><a class="header-anchor" href="#length-function" aria-hidden="true">#</a> LENGTH() Function</h2><p>The <code>LENGTH()</code> function will return the number of characters in a string.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Return the number of characters in each movie title</span>
<span class="token keyword">SELECT</span> LENGTH<span class="token punctuation">(</span>movie_title<span class="token punctuation">)</span><span class="token punctuation">,</span> movie_title
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>movies<span class="token punctuation">\`</span></span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),_={class:"try"},w={href:"https://www.db-fiddle.com/f/7vMrS1Bsym9PELD14jp3fc/2",target:"_blank",rel:"noopener noreferrer"},y=t(`<h2 id="concat-function" tabindex="-1"><a class="header-anchor" href="#concat-function" aria-hidden="true">#</a> CONCAT() Function</h2><p>The <code>CONCAT()</code> function is used to combine two or more strings.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Combine movie_title, director and movie_id </span>
<span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span>movie_title<span class="token punctuation">,</span> <span class="token string">&#39; : &#39;</span><span class="token punctuation">,</span> director<span class="token punctuation">,</span> <span class="token string">&#39; : &#39;</span><span class="token punctuation">,</span> movie_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> con
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>movies<span class="token punctuation">\`</span></span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),T={class:"try"},E={href:"https://www.db-fiddle.com/f/7vMrS1Bsym9PELD14jp3fc/3",target:"_blank",rel:"noopener noreferrer"},F=t(`<h2 id="concat-ws-function" tabindex="-1"><a class="header-anchor" href="#concat-ws-function" aria-hidden="true">#</a> CONCAT_WS() Function</h2><p>The <code>CONCAT_WS()</code> function, which stands for Concatenate With Separator.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Combine movie_title, director and movie_id</span>
<span class="token comment">-- with the specified separator</span>
<span class="token keyword">SELECT</span> CONCAT_WS<span class="token punctuation">(</span><span class="token string">&#39; : &#39;</span><span class="token punctuation">,</span> movie_title<span class="token punctuation">,</span> director<span class="token punctuation">,</span> movie_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> con
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>movies<span class="token punctuation">\`</span></span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),L={class:"try"},M={href:"https://www.db-fiddle.com/f/7vMrS1Bsym9PELD14jp3fc/4",target:"_blank",rel:"noopener noreferrer"},R=t(`<h2 id="trim-function" tabindex="-1"><a class="header-anchor" href="#trim-function" aria-hidden="true">#</a> TRIM() Function</h2><p>The <code>TRIM()</code> function is used to remove any white space from the beginning and end of a string.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>There is also <code>LTRIM()</code> and <code>RTRIM()</code> which only removes white space from the beginning and the end, respectively.</p></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Removes the whitespace from the beginning and end of a string</span>
<span class="token keyword">SELECT</span> TRIM<span class="token punctuation">(</span><span class="token string">&#39;            abcde                 &#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> tr
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>movies<span class="token punctuation">\`</span></span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),S={class:"try"},q={href:"https://www.db-fiddle.com/f/7vMrS1Bsym9PELD14jp3fc/5",target:"_blank",rel:"noopener noreferrer"},C=t(`<h2 id="left-function" tabindex="-1"><a class="header-anchor" href="#left-function" aria-hidden="true">#</a> LEFT() Function</h2><p>The <code>LEFT()</code> function is used to return the specified number of characters starting at the left side of the string.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>There is also <code>RIGHT()</code> which is used to return the specified number characters starting at the right side of the string.</p></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Returns the first 5 characters of each movie title</span>
<span class="token keyword">SELECT</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>movie_title<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> five
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>movies<span class="token punctuation">\`</span></span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),I={class:"try"},x={href:"https://www.db-fiddle.com/f/7vMrS1Bsym9PELD14jp3fc/6",target:"_blank",rel:"noopener noreferrer"},O=t(`<h2 id="rpad-function" tabindex="-1"><a class="header-anchor" href="#rpad-function" aria-hidden="true">#</a> RPAD() Function</h2><p>The <code>RPAD()</code> function appends the specified characters to a string until the string is the specified length. If the string is longer than the specified length the returned value will be shortened.</p><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>There is also <code>LPAD()</code> which prepends the specified characters to a string until the string is the specified length.</p></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Appends Xs to movie titles until each title is 50 characters long</span>
<span class="token keyword">SELECT</span> RPAD<span class="token punctuation">(</span>movie_title<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">&#39;XXXXXX&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> xx
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>movies<span class="token punctuation">\`</span></span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),A={class:"try"},D={href:"https://www.db-fiddle.com/f/7vMrS1Bsym9PELD14jp3fc/7",target:"_blank",rel:"noopener noreferrer"},B=t(`<h2 id="format-function" tabindex="-1"><a class="header-anchor" href="#format-function" aria-hidden="true">#</a> FORMAT() Function</h2><p>The <code>FORMAT()</code> function formats the provided number by rounding decimal places and adding commas and periods. A locale can be specified so that the proper separators are used. The resulting value of the <code>FORMAT()</code> function will be a string.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Formats the year to include 3 decimal places</span>
<span class="token keyword">SELECT</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> frmt
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>movies<span class="token punctuation">\`</span></span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">-- Formats the year to include 3 decimal places</span>
<span class="token comment">-- using the French Canadian</span>
<span class="token keyword">SELECT</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;fr_CA&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> frmt
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>movies<span class="token punctuation">\`</span></span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),P={class:"try"},N={href:"https://www.db-fiddle.com/f/7vMrS1Bsym9PELD14jp3fc/8",target:"_blank",rel:"noopener noreferrer"};function j(W,X){const o=i("Youtube"),a=i("ExternalLinkIcon");return r(),l("div",null,[d,e(o,{id:"TF7q-8kjj2M",citation:"griffith"}),n("p",null,[n("a",u,[s("String Functions"),e(a)]),s(" are used to alter the returned data of those columns using a string datatype. String Functions do not alter the actual data that is stored in the database as all functions are executed after the data is retrieved but before it is displayed.")]),h,n("div",m,[n("p",null,[n("a",k,[s("Try it yourself on DB Fiddle"),e(a)])])]),v,n("div",f,[n("p",null,[n("a",b,[s("Try it yourself on DB Fiddle"),e(a)])])]),g,n("div",_,[n("p",null,[n("a",w,[s("Try it yourself on DB Fiddle"),e(a)])])]),y,n("div",T,[n("p",null,[n("a",E,[s("Try it yourself on DB Fiddle"),e(a)])])]),F,n("div",L,[n("p",null,[n("a",M,[s("Try it yourself on DB Fiddle"),e(a)])])]),R,n("div",S,[n("p",null,[n("a",q,[s("Try it yourself on DB Fiddle"),e(a)])])]),C,n("div",I,[n("p",null,[n("a",x,[s("Try it yourself on DB Fiddle"),e(a)])])]),O,n("div",A,[n("p",null,[n("a",D,[s("Try it yourself on DB Fiddle"),e(a)])])]),B,n("div",P,[n("p",null,[n("a",N,[s("Try it yourself on DB Fiddle"),e(a)])])])])}const H=c(p,[["render",j],["__file","string-functions.html.vue"]]);export{H as default};
