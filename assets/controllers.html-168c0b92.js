import{_ as o,M as p,p as l,q as i,R as n,t as s,N as e,a3 as t}from"./framework-dd056dd6.js";const c={},r=n("h1",{id:"laravel-routing-to-controllers",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#laravel-routing-to-controllers","aria-hidden":"true"},"#"),s(" Laravel Routing to Controllers")],-1),u={class:"watch"},d={href:"https://laracasts.com/series/laravel-6-from-scratch/episodes/8",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>Instead of defining all of your request handling logic as Closures in route files, it sometime better, especially for larger projects, to use a controller.</p><h2 id="routes-to-a-controller" tabindex="-1"><a class="header-anchor" href="#routes-to-a-controller" aria-hidden="true">#</a> Routes to a Controller</h2><div class="custom-container danger"><p class="custom-container-title">NOTE</p><p>As of Laravel 8, the way routes point to a controller has changed. <strong>By default</strong>, Laravel 8 has no automatic controller declaration prefixing. This feature can be easily reactivated.</p></div><p>To point a route to a controller, you must provide an array that defines which controller class and method to call. First start by importing the desired controller class into the routes file. Then the first item in the array is the desired controller class, while the second item is the method as a string.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers<span class="token punctuation">\\</span>PostsController</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">PostController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;show&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, it is possible to use a string that defines which controller class and method to call, which was common practice before Laravel 8. This does require making a small change to the <code>RouteServiceProvider.php</code> file. Find the line that defines <code>protected $namespace</code> and uncomment it.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
  * The controller namespace for the application.
  *
  * When present, controller route declarations will automatically be prefixed with this namespace.
  *
  * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">|</span><span class="token keyword">null</span></span>
  */</span>
<span class="token keyword">protected</span> <span class="token variable">$namespace</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;App\\\\Http\\\\Controllers&#39;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
  * Define your route model bindings, pattern filters, etc.
  *
  * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
  */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">configureRateLimiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;api&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;api&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">namespace</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;routes/api.php&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;web&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">namespace</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;routes/web.php&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line">Â </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that, a route can point to a controller by providing a string that defines which controller class and method to call. The first part of the string should be the name of the class. Then a <code>@</code> and finally the name of the method. The final result would look something like this:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/posts/{post}&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;PostsController@show&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="creating-a-controller" tabindex="-1"><a class="header-anchor" href="#creating-a-controller" aria-hidden="true">#</a> Creating a Controller</h2>`,10),v={href:"https://laravel.com/docs/6.x/controllers",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"PostsController",-1),m={href:"https://laravel.com/docs/6.x/artisan",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"app/Http/Controllers",-1),g=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostsControllers</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span> 
  <span class="token punctuation">{</span>
    <span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token string single-quoted-string">&#39;post-1&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;This is my first post&#39;</span><span class="token punctuation">;</span>
      <span class="token string single-quoted-string">&#39;post-2&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;This is my second post&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$posts</span><span class="token punctuation">[</span><span class="token variable">$post</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">abort</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;The post was not found.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token string single-quoted-string">&#39;post&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$posts</span><span class="token punctuation">[</span><span class="token variable">$post</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We will controllers in greater detail later in the course.</p>`,2);function f(w,y){const a=p("ExternalLinkIcon");return l(),i("div",null,[r,n("div",u,[n("p",null,[n("a",d,[s('Watch "Routing to Controllers" on Laracasts'),e(a)])])]),k,n("p",null,[n("a",v,[s("Controllers"),e(a)]),s(" are fundamental part of the Model-View-Controller (MVC) architecture that Laravel is build around. The above code will not work if there is not "),h,s(" controller class. Controllers can be created in one of two ways: manually or through the "),n("a",m,[s("artisan console"),e(a)]),s(". In either case, all controllers will reside in the "),b,s(" directory and will look something like this:")]),g])}const x=o(c,[["render",f],["__file","controllers.html.vue"]]);export{x as default};
